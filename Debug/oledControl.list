
oledControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035f0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001630  08003784  08003784  00004784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004db4  08004db4  00006020  2**0
                  CONTENTS
  4 .ARM          00000008  08004db4  08004db4  00005db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dbc  08004dbc  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dbc  08004dbc  00005dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dc0  08004dc0  00005dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08004dc4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000020  08004de4  00006020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08004de4  000064e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c33b  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000212e  00000000  00000000  0001238b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  000144c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ab  00000000  00000000  00015008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b6c  00000000  00000000  000158b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e938  00000000  00000000  0002b41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088018  00000000  00000000  00039d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1d6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002db4  00000000  00000000  000c1db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000c4b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800376c 	.word	0x0800376c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	0800376c 	.word	0x0800376c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <animation_OrderFrames>:
void animation_OrderFrames(animation* self);
void animation_FindConflicts (animation* self);


// insertion sort used internally to sort frames
void animation_OrderFrames(animation* self) {
 80004c4:	b4b0      	push	{r4, r5, r7}
 80004c6:	b087      	sub	sp, #28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
    int length = sizeof(self->frames)/sizeof(self->frames[0]);
 80004cc:	2300      	movs	r3, #0
 80004ce:	60fb      	str	r3, [r7, #12]
    for (int i = 1; i < length; ++i) {
 80004d0:	2301      	movs	r3, #1
 80004d2:	617b      	str	r3, [r7, #20]
 80004d4:	e054      	b.n	8000580 <animation_OrderFrames+0xbc>
        int key = self->frames[i].key;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6899      	ldr	r1, [r3, #8]
 80004da:	697a      	ldr	r2, [r7, #20]
 80004dc:	4613      	mov	r3, r2
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	4413      	add	r3, r2
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	440b      	add	r3, r1
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	60bb      	str	r3, [r7, #8]
        int j = i - 1;
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	3b01      	subs	r3, #1
 80004ee:	613b      	str	r3, [r7, #16]

        while (j >= 0 && self->frames[j].key > key) {
 80004f0:	e01b      	b.n	800052a <animation_OrderFrames+0x66>
            self->frames[j+1] = self->frames[j];
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	6899      	ldr	r1, [r3, #8]
 80004f6:	693a      	ldr	r2, [r7, #16]
 80004f8:	4613      	mov	r3, r2
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	4413      	add	r3, r2
 80004fe:	00db      	lsls	r3, r3, #3
 8000500:	18c8      	adds	r0, r1, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6899      	ldr	r1, [r3, #8]
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	1c5a      	adds	r2, r3, #1
 800050a:	4613      	mov	r3, r2
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	4413      	add	r3, r2
 8000510:	00db      	lsls	r3, r3, #3
 8000512:	440b      	add	r3, r1
 8000514:	461c      	mov	r4, r3
 8000516:	4605      	mov	r5, r0
 8000518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800051a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800051c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000520:	e884 0003 	stmia.w	r4, {r0, r1}
            j = j - 1;
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	3b01      	subs	r3, #1
 8000528:	613b      	str	r3, [r7, #16]
        while (j >= 0 && self->frames[j].key > key) {
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	2b00      	cmp	r3, #0
 800052e:	db0b      	blt.n	8000548 <animation_OrderFrames+0x84>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	6899      	ldr	r1, [r3, #8]
 8000534:	693a      	ldr	r2, [r7, #16]
 8000536:	4613      	mov	r3, r2
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	4413      	add	r3, r2
 800053c:	00db      	lsls	r3, r3, #3
 800053e:	440b      	add	r3, r1
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	68ba      	ldr	r2, [r7, #8]
 8000544:	429a      	cmp	r2, r3
 8000546:	dbd4      	blt.n	80004f2 <animation_OrderFrames+0x2e>
        }
        self->frames[j + 1] = self->frames[i];
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	6899      	ldr	r1, [r3, #8]
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	4613      	mov	r3, r2
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	4413      	add	r3, r2
 8000554:	00db      	lsls	r3, r3, #3
 8000556:	18c8      	adds	r0, r1, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6899      	ldr	r1, [r3, #8]
 800055c:	693b      	ldr	r3, [r7, #16]
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	4613      	mov	r3, r2
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	4413      	add	r3, r2
 8000566:	00db      	lsls	r3, r3, #3
 8000568:	440b      	add	r3, r1
 800056a:	461c      	mov	r4, r3
 800056c:	4605      	mov	r5, r0
 800056e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000572:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000576:	e884 0003 	stmia.w	r4, {r0, r1}
    for (int i = 1; i < length; ++i) {
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	3301      	adds	r3, #1
 800057e:	617b      	str	r3, [r7, #20]
 8000580:	697a      	ldr	r2, [r7, #20]
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	429a      	cmp	r2, r3
 8000586:	dba6      	blt.n	80004d6 <animation_OrderFrames+0x12>
    }
}
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	371c      	adds	r7, #28
 800058e:	46bd      	mov	sp, r7
 8000590:	bcb0      	pop	{r4, r5, r7}
 8000592:	4770      	bx	lr

08000594 <animation_FindConflicts>:

// makes sure no frames have the same key
void animation_FindConflicts(animation* self) {
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    int length = sizeof(self->frames)/sizeof(self->frames[0]);
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < length - 2; i++) {
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	e02c      	b.n	8000600 <animation_FindConflicts+0x6c>
        if (self->frames[i].key == self->frames[i+1].key) {
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6899      	ldr	r1, [r3, #8]
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	4613      	mov	r3, r2
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	4413      	add	r3, r2
 80005b2:	00db      	lsls	r3, r3, #3
 80005b4:	440b      	add	r3, r1
 80005b6:	6819      	ldr	r1, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6898      	ldr	r0, [r3, #8]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	1c5a      	adds	r2, r3, #1
 80005c0:	4613      	mov	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	4413      	add	r3, r2
 80005c6:	00db      	lsls	r3, r3, #3
 80005c8:	4403      	add	r3, r0
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4299      	cmp	r1, r3
 80005ce:	d114      	bne.n	80005fa <animation_FindConflicts+0x66>
            self->frames[i+1].key += 1; //just shifts the duplicate frame to the next.
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6899      	ldr	r1, [r3, #8]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	4613      	mov	r3, r2
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	4413      	add	r3, r2
 80005de:	00db      	lsls	r3, r3, #3
 80005e0:	440b      	add	r3, r1
 80005e2:	6819      	ldr	r1, [r3, #0]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6898      	ldr	r0, [r3, #8]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	4613      	mov	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	4413      	add	r3, r2
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	4403      	add	r3, r0
 80005f6:	1c4a      	adds	r2, r1, #1
 80005f8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length - 2; i++) {
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3301      	adds	r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	3b02      	subs	r3, #2
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	429a      	cmp	r2, r3
 8000608:	dbcd      	blt.n	80005a6 <animation_FindConflicts+0x12>
        }
    }
    if (self->frames[length-1].key == self->frames[length-2].key) {
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6899      	ldr	r1, [r3, #8]
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	4613      	mov	r3, r2
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	4413      	add	r3, r2
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	3b18      	subs	r3, #24
 800061a:	440b      	add	r3, r1
 800061c:	6819      	ldr	r1, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6898      	ldr	r0, [r3, #8]
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	4613      	mov	r3, r2
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	4413      	add	r3, r2
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	3b30      	subs	r3, #48	@ 0x30
 800062e:	4403      	add	r3, r0
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4299      	cmp	r1, r3
 8000634:	d119      	bne.n	800066a <animation_FindConflicts+0xd6>
        self->frames[length-1].key += 1;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6899      	ldr	r1, [r3, #8]
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	4613      	mov	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	4413      	add	r3, r2
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	3b18      	subs	r3, #24
 8000646:	440b      	add	r3, r1
 8000648:	6819      	ldr	r1, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6898      	ldr	r0, [r3, #8]
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	4613      	mov	r3, r2
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	4413      	add	r3, r2
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	3b18      	subs	r3, #24
 800065a:	4403      	add	r3, r0
 800065c:	1c4a      	adds	r2, r1, #1
 800065e:	601a      	str	r2, [r3, #0]
        self->length += 1;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	1c5a      	adds	r2, r3, #1
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	605a      	str	r2, [r3, #4]
    }

}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <animation_Play>:

// animation play must be called
bool animation_Play(animation* self) {
 8000676:	b580      	push	{r7, lr}
 8000678:	b086      	sub	sp, #24
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
    // needs to select correct frame to display at each interval
    // ie if frame1 is key0 and frame2 is key3
    // from current_frame from 0->2, frame1 should be displayed
    int frameToDisplay = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
    int arrLength = sizeof(self->frames)/sizeof(self->frames[0]);
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < arrLength; i++) {
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	e017      	b.n	80006bc <animation_Play+0x46>
        if (self->current_frame == 0)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d018      	beq.n	80006c6 <animation_Play+0x50>
            break;
        if (self->current_frame < self->frames[i].key ) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6819      	ldr	r1, [r3, #0]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6898      	ldr	r0, [r3, #8]
 800069c:	693a      	ldr	r2, [r7, #16]
 800069e:	4613      	mov	r3, r2
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	4413      	add	r3, r2
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	4403      	add	r3, r0
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4299      	cmp	r1, r3
 80006ac:	da03      	bge.n	80006b6 <animation_Play+0x40>
            frameToDisplay = i-1;
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
            break;
 80006b4:	e008      	b.n	80006c8 <animation_Play+0x52>
    for (int i = 0; i < arrLength; i++) {
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	3301      	adds	r3, #1
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693a      	ldr	r2, [r7, #16]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe3      	blt.n	800068c <animation_Play+0x16>
 80006c4:	e000      	b.n	80006c8 <animation_Play+0x52>
            break;
 80006c6:	bf00      	nop
        }
    }
    // render
    render_DisplaySprite(&self->frames[frameToDisplay]);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6899      	ldr	r1, [r3, #8]
 80006cc:	697a      	ldr	r2, [r7, #20]
 80006ce:	4613      	mov	r3, r2
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	4413      	add	r3, r2
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	440b      	add	r3, r1
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fc4f 	bl	8000f7c <render_DisplaySprite>

    // progress the frames until the end
    self->current_frame += 1;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	601a      	str	r2, [r3, #0]
    if (self->current_frame >= self->length) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	db04      	blt.n	80006fe <animation_Play+0x88>
        self->current_frame = 0;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
        return false;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e000      	b.n	8000700 <animation_Play+0x8a>
    }
    else
        return true;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <animation_LoadMedia>:

// initializes all frames and animations in an animation array. subject to change
void animation_LoadMedia(animation* self, SpriteFrame* frames) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af04      	add	r7, sp, #16
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
    SpriteFrame_Init(frames,sprites_arr[smiley],0,50,50,10,10);
 8000712:	4b29      	ldr	r3, [pc, #164]	@ (80007b8 <animation_LoadMedia+0xb0>)
 8000714:	6919      	ldr	r1, [r3, #16]
 8000716:	230a      	movs	r3, #10
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	230a      	movs	r3, #10
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	2332      	movs	r3, #50	@ 0x32
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2332      	movs	r3, #50	@ 0x32
 8000724:	2200      	movs	r2, #0
 8000726:	6838      	ldr	r0, [r7, #0]
 8000728:	f000 fdb9 	bl	800129e <SpriteFrame_Init>
    SpriteFrame_Init(frames + 1,sprites_arr[smiley],1,52,50,10,10);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	f103 0018 	add.w	r0, r3, #24
 8000732:	4b21      	ldr	r3, [pc, #132]	@ (80007b8 <animation_LoadMedia+0xb0>)
 8000734:	6919      	ldr	r1, [r3, #16]
 8000736:	230a      	movs	r3, #10
 8000738:	9302      	str	r3, [sp, #8]
 800073a:	230a      	movs	r3, #10
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	2332      	movs	r3, #50	@ 0x32
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2334      	movs	r3, #52	@ 0x34
 8000744:	2201      	movs	r2, #1
 8000746:	f000 fdaa 	bl	800129e <SpriteFrame_Init>
    SpriteFrame_Init(frames + 2,sprites_arr[smiley],2,54,50,10,10);
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8000750:	4b19      	ldr	r3, [pc, #100]	@ (80007b8 <animation_LoadMedia+0xb0>)
 8000752:	6919      	ldr	r1, [r3, #16]
 8000754:	230a      	movs	r3, #10
 8000756:	9302      	str	r3, [sp, #8]
 8000758:	230a      	movs	r3, #10
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	2332      	movs	r3, #50	@ 0x32
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2336      	movs	r3, #54	@ 0x36
 8000762:	2202      	movs	r2, #2
 8000764:	f000 fd9b 	bl	800129e <SpriteFrame_Init>
    SpriteFrame_Init(frames + 3,sprites_arr[smiley],3,56,50,10,10);
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800076e:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <animation_LoadMedia+0xb0>)
 8000770:	6919      	ldr	r1, [r3, #16]
 8000772:	230a      	movs	r3, #10
 8000774:	9302      	str	r3, [sp, #8]
 8000776:	230a      	movs	r3, #10
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	2332      	movs	r3, #50	@ 0x32
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2338      	movs	r3, #56	@ 0x38
 8000780:	2203      	movs	r2, #3
 8000782:	f000 fd8c 	bl	800129e <SpriteFrame_Init>
    SpriteFrame_Init(frames + 4,sprites_arr[smiley],4,58,50,10,10);
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 800078c:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <animation_LoadMedia+0xb0>)
 800078e:	6919      	ldr	r1, [r3, #16]
 8000790:	230a      	movs	r3, #10
 8000792:	9302      	str	r3, [sp, #8]
 8000794:	230a      	movs	r3, #10
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	2332      	movs	r3, #50	@ 0x32
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	233a      	movs	r3, #58	@ 0x3a
 800079e:	2204      	movs	r2, #4
 80007a0:	f000 fd7d 	bl	800129e <SpriteFrame_Init>
    animation_Init(self, frames,5);
 80007a4:	2205      	movs	r2, #5
 80007a6:	6839      	ldr	r1, [r7, #0]
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 f807 	bl	80007bc <animation_Init>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000004 	.word	0x20000004

080007bc <animation_Init>:


// constructor for singular animations
// ->keyframes will be automaticall generated
// ->length needs to be duration in frames
void animation_Init(animation* self, SpriteFrame* p_frames, int p_length) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
    self->frames = p_frames;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	609a      	str	r2, [r3, #8]
    self->length = p_length;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	605a      	str	r2, [r3, #4]

    // is_playing always inits to false. manually turning it on is required
    self->current_frame = 0;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
    //self->is_playing = false;

    self->animation_Play = animation_Play;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	4a05      	ldr	r2, [pc, #20]	@ (80007f4 <animation_Init+0x38>)
 80007de:	60da      	str	r2, [r3, #12]

    //ensures frames are in order
    animation_OrderFrames(self);
 80007e0:	68f8      	ldr	r0, [r7, #12]
 80007e2:	f7ff fe6f 	bl	80004c4 <animation_OrderFrames>
    //ensures frames dont take each others key frames
    animation_FindConflicts(self);
 80007e6:	68f8      	ldr	r0, [r7, #12]
 80007e8:	f7ff fed4 	bl	8000594 <animation_FindConflicts>
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	08000677 	.word	0x08000677

080007f8 <hurt>:

//
// Negative Actions
//

static void hurt(game* game, int amount) {
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
	if (game->health >= amount) {
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	683a      	ldr	r2, [r7, #0]
 8000808:	429a      	cmp	r2, r3
 800080a:	dc06      	bgt.n	800081a <hurt+0x22>
		game->health -= amount;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	1ad2      	subs	r2, r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	601a      	str	r2, [r3, #0]
	}
	else {
		game->health = 0;
	}
}
 8000818:	e002      	b.n	8000820 <hurt+0x28>
		game->health = 0;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <bore>:

static void bore(game* game, int amount) {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
	if (game->happiness >= amount) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	683a      	ldr	r2, [r7, #0]
 800083c:	429a      	cmp	r2, r3
 800083e:	dc06      	bgt.n	800084e <bore+0x22>
		game->happiness -= amount;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	689a      	ldr	r2, [r3, #8]
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	1ad2      	subs	r2, r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	609a      	str	r2, [r3, #8]
	}
	else {
		game->happiness = 0;
	}
}
 800084c:	e002      	b.n	8000854 <bore+0x28>
		game->happiness = 0;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <starve>:

static void starve(game* game, int amount) {
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
	if (game->hunger >= amount) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	683a      	ldr	r2, [r7, #0]
 8000870:	429a      	cmp	r2, r3
 8000872:	dc06      	bgt.n	8000882 <starve+0x22>
		game->hunger -= amount;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685a      	ldr	r2, [r3, #4]
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	1ad2      	subs	r2, r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	605a      	str	r2, [r3, #4]
	}
	else {
		game->hunger = 0;
	}
}
 8000880:	e002      	b.n	8000888 <starve+0x28>
		game->hunger = 0;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <heal>:

//
// Positive Actions
//

static void heal(game* game, int amount) {
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
	if ((game->health + amount) > HEALTH_MAX) {
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	4413      	add	r3, r2
 80008a6:	2b3c      	cmp	r3, #60	@ 0x3c
 80008a8:	dd03      	ble.n	80008b2 <heal+0x1e>
		game->health = HEALTH_MAX;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	223c      	movs	r2, #60	@ 0x3c
 80008ae:	601a      	str	r2, [r3, #0]
	}
	else {
		game->health += amount;
	}
}
 80008b0:	e005      	b.n	80008be <heal+0x2a>
		game->health += amount;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	441a      	add	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	601a      	str	r2, [r3, #0]
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <eat>:

static void eat(game* game, int amount) {
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	6039      	str	r1, [r7, #0]
	if ((game->hunger + amount) > HUNGER_MAX) {
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	4413      	add	r3, r2
 80008dc:	2b3c      	cmp	r3, #60	@ 0x3c
 80008de:	dd03      	ble.n	80008e8 <eat+0x1e>
		game->hunger = HUNGER_MAX;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	223c      	movs	r2, #60	@ 0x3c
 80008e4:	605a      	str	r2, [r3, #4]
	}
	else {
		game->hunger += amount;
	}
}
 80008e6:	e005      	b.n	80008f4 <eat+0x2a>
		game->hunger += amount;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	441a      	add	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	605a      	str	r2, [r3, #4]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <play>:

static void play(game* game, int amount) {
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
	if ((game->happiness + amount) > HAPPINESS_MAX) {
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	4413      	add	r3, r2
 8000912:	2b3c      	cmp	r3, #60	@ 0x3c
 8000914:	dd03      	ble.n	800091e <play+0x1e>
		game->happiness = HAPPINESS_MAX;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	223c      	movs	r2, #60	@ 0x3c
 800091a:	609a      	str	r2, [r3, #8]
	}
	else {
		game->happiness += amount;
	}
}
 800091c:	e005      	b.n	800092a <play+0x2a>
		game->happiness += amount;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	689a      	ldr	r2, [r3, #8]
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	441a      	add	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	609a      	str	r2, [r3, #8]
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <check_mood>:

//
//  Returns current mood of the mon
//

static Mood check_mood(struct game* self) {
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
    int overall = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
    overall += self->health;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	4413      	add	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
    overall += self->hunger;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	4413      	add	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]
    overall += self->happiness;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	68fa      	ldr	r2, [r7, #12]
 800095e:	4413      	add	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
    overall /= 3;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <check_mood+0x64>)
 8000966:	fb82 1203 	smull	r1, r2, r2, r3
 800096a:	17db      	asrs	r3, r3, #31
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	60fb      	str	r3, [r7, #12]

    if (overall <= 15){
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2b0f      	cmp	r3, #15
 8000974:	dc01      	bgt.n	800097a <check_mood+0x42>
        return MOOD_SERIOUS;
 8000976:	2300      	movs	r3, #0
 8000978:	e00a      	b.n	8000990 <check_mood+0x58>
    }
    if (overall <= 30){
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	2b1e      	cmp	r3, #30
 800097e:	dc01      	bgt.n	8000984 <check_mood+0x4c>
        return MOOD_UNHAPPY;
 8000980:	2301      	movs	r3, #1
 8000982:	e005      	b.n	8000990 <check_mood+0x58>
    }
    if (overall <= 45){
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b2d      	cmp	r3, #45	@ 0x2d
 8000988:	dc01      	bgt.n	800098e <check_mood+0x56>
        return MOOD_HAPPY;
 800098a:	2302      	movs	r3, #2
 800098c:	e000      	b.n	8000990 <check_mood+0x58>
    }
    else{
        return MOOD_CUTE;
 800098e:	2303      	movs	r3, #3
    }
}
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	55555556 	.word	0x55555556

080009a0 <switch_action>:

void switch_action(struct game* self) {
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	if (self->action_type == ACTION_GOOD) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d103      	bne.n	80009b8 <switch_action+0x18>
		self->action_type = ACTION_EVIL;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2201      	movs	r2, #1
 80009b4:	60da      	str	r2, [r3, #12]
	}
	else
		self->action_type = ACTION_GOOD;
}
 80009b6:	e002      	b.n	80009be <switch_action+0x1e>
		self->action_type = ACTION_GOOD;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <resolve_hunger>:

void resolve_hunger(game* self) {
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
	self->action_type == ACTION_GOOD ? eat(self, ACTION_AMT) : starve(self, ACTION_AMT);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d104      	bne.n	80009e4 <resolve_hunger+0x1a>
 80009da:	210a      	movs	r1, #10
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff74 	bl	80008ca <eat>
}
 80009e2:	e003      	b.n	80009ec <resolve_hunger+0x22>
	self->action_type == ACTION_GOOD ? eat(self, ACTION_AMT) : starve(self, ACTION_AMT);
 80009e4:	210a      	movs	r1, #10
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ff3a 	bl	8000860 <starve>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <resolve_health>:

void resolve_health(game* self) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	self->action_type == ACTION_GOOD ? heal(self, ACTION_AMT) : hurt(self, ACTION_AMT);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d104      	bne.n	8000a0e <resolve_health+0x1a>
 8000a04:	210a      	movs	r1, #10
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff ff44 	bl	8000894 <heal>
}
 8000a0c:	e003      	b.n	8000a16 <resolve_health+0x22>
	self->action_type == ACTION_GOOD ? heal(self, ACTION_AMT) : hurt(self, ACTION_AMT);
 8000a0e:	210a      	movs	r1, #10
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff fef1 	bl	80007f8 <hurt>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <resolve_happiness>:

void resolve_happiness(game* self) {
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
	self->action_type == ACTION_GOOD ? play(self, ACTION_AMT) : bore(self, ACTION_AMT);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d104      	bne.n	8000a38 <resolve_happiness+0x1a>
 8000a2e:	210a      	movs	r1, #10
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff ff65 	bl	8000900 <play>
}
 8000a36:	e003      	b.n	8000a40 <resolve_happiness+0x22>
	self->action_type == ACTION_GOOD ? play(self, ACTION_AMT) : bore(self, ACTION_AMT);
 8000a38:	210a      	movs	r1, #10
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff fef6 	bl	800082c <bore>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <game_init>:




void game_init(game* game, int health, int hunger, int happiness) {
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
 8000a54:	603b      	str	r3, [r7, #0]
	game->health = health;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	601a      	str	r2, [r3, #0]
	game->hunger = hunger;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	605a      	str	r2, [r3, #4]
	game->happiness = happiness;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	609a      	str	r2, [r3, #8]

	game->action_type = ACTION_EVIL;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	60da      	str	r2, [r3, #12]
	game->switch_action = switch_action;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4a09      	ldr	r2, [pc, #36]	@ (8000a98 <game_init+0x50>)
 8000a72:	611a      	str	r2, [r3, #16]

	game->resolve_hunger = resolve_hunger;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4a09      	ldr	r2, [pc, #36]	@ (8000a9c <game_init+0x54>)
 8000a78:	619a      	str	r2, [r3, #24]
	game->resolve_happiness = resolve_happiness;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4a08      	ldr	r2, [pc, #32]	@ (8000aa0 <game_init+0x58>)
 8000a7e:	621a      	str	r2, [r3, #32]
	game->resolve_health = resolve_health;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <game_init+0x5c>)
 8000a84:	61da      	str	r2, [r3, #28]

	game->check_mood = check_mood;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4a07      	ldr	r2, [pc, #28]	@ (8000aa8 <game_init+0x60>)
 8000a8a:	615a      	str	r2, [r3, #20]

}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	080009a1 	.word	0x080009a1
 8000a9c:	080009cb 	.word	0x080009cb
 8000aa0:	08000a1f 	.word	0x08000a1f
 8000aa4:	080009f5 	.word	0x080009f5
 8000aa8:	08000939 	.word	0x08000939

08000aac <switch_lights>:
 *      Author: Joseph Sary
 */
#include "input.h"
#include "animation.h"

void switch_lights(game* Game) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
      // PA5 PA6
      if (Game->action_type == ACTION_GOOD) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d10a      	bne.n	8000ad2 <switch_lights+0x26>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2120      	movs	r1, #32
 8000ac0:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <switch_lights+0x44>)
 8000ac2:	f001 fa03 	bl	8001ecc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2140      	movs	r1, #64	@ 0x40
 8000aca:	4809      	ldr	r0, [pc, #36]	@ (8000af0 <switch_lights+0x44>)
 8000acc:	f001 f9fe 	bl	8001ecc <HAL_GPIO_WritePin>
      } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
      }
}
 8000ad0:	e009      	b.n	8000ae6 <switch_lights+0x3a>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	4806      	ldr	r0, [pc, #24]	@ (8000af0 <switch_lights+0x44>)
 8000ad8:	f001 f9f8 	bl	8001ecc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	2140      	movs	r1, #64	@ 0x40
 8000ae0:	4803      	ldr	r0, [pc, #12]	@ (8000af0 <switch_lights+0x44>)
 8000ae2:	f001 f9f3 	bl	8001ecc <HAL_GPIO_WritePin>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40020000 	.word	0x40020000

08000af4 <button_check>:

void button_check( game* Game) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
      int state1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8000afc:	2120      	movs	r1, #32
 8000afe:	481e      	ldr	r0, [pc, #120]	@ (8000b78 <button_check+0x84>)
 8000b00:	f001 f9cc 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	617b      	str	r3, [r7, #20]
      int state2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 8000b08:	2140      	movs	r1, #64	@ 0x40
 8000b0a:	481b      	ldr	r0, [pc, #108]	@ (8000b78 <button_check+0x84>)
 8000b0c:	f001 f9c6 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000b10:	4603      	mov	r3, r0
 8000b12:	613b      	str	r3, [r7, #16]
      int state3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8000b14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b18:	4817      	ldr	r0, [pc, #92]	@ (8000b78 <button_check+0x84>)
 8000b1a:	f001 f9bf 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	60fb      	str	r3, [r7, #12]
      int state4 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 8000b22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b26:	4814      	ldr	r0, [pc, #80]	@ (8000b78 <button_check+0x84>)
 8000b28:	f001 f9b8 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	60bb      	str	r3, [r7, #8]

      if (state1) {
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <button_check+0x4a>
    	  Game->resolve_happiness(Game);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	4798      	blx	r3

      }
      if (state2) {
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d003      	beq.n	8000b4c <button_check+0x58>
    	  Game->resolve_hunger(Game);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	4798      	blx	r3
      }
      if (state3) {
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d003      	beq.n	8000b5a <button_check+0x66>
    	  Game->resolve_health(Game);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	4798      	blx	r3
      }
      if (state4) {
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <button_check+0x74>
          Game->switch_action(Game);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	691b      	ldr	r3, [r3, #16]
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	4798      	blx	r3
      }

      switch_lights(Game);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ff9f 	bl	8000aac <switch_lights>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40020800 	.word	0x40020800

08000b7c <input_init>:


void input_init(input* self) {
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
    self->button_check = button_check;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a04      	ldr	r2, [pc, #16]	@ (8000b98 <input_init+0x1c>)
 8000b88:	601a      	str	r2, [r3, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	08000af5 	.word	0x08000af5

08000b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b0ae      	sub	sp, #184	@ 0xb8
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba2:	f000 fe7b 	bl	800189c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba6:	f000 f849 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000baa:	f000 f90b 	bl	8000dc4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bae:	f000 f8df 	bl	8000d70 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bb2:	f000 f8af 	bl	8000d14 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  game Game;
  game_init(&Game, 60,60,60);
 8000bb6:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8000bba:	233c      	movs	r3, #60	@ 0x3c
 8000bbc:	223c      	movs	r2, #60	@ 0x3c
 8000bbe:	213c      	movs	r1, #60	@ 0x3c
 8000bc0:	f7ff ff42 	bl	8000a48 <game_init>

  render_Init();
 8000bc4:	f000 fa3f 	bl	8001046 <render_Init>

  input Input;
  input_init(&Input);
 8000bc8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ffd5 	bl	8000b7c <input_init>

  animation smiley;
  SpriteFrame smileyFrames[5];

  animation_LoadMedia(&smiley, smileyFrames);
 8000bd2:	463a      	mov	r2, r7
 8000bd4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fd94 	bl	8000708 <animation_LoadMedia>

  int ani_flag = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      Input.button_check(&Game);
 8000be6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000bea:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8000bee:	4610      	mov	r0, r2
 8000bf0:	4798      	blx	r3
      int state1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8000bf2:	2120      	movs	r1, #32
 8000bf4:	4810      	ldr	r0, [pc, #64]	@ (8000c38 <main+0x9c>)
 8000bf6:	f001 f951 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      if (state1) {
 8000c00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d002      	beq.n	8000c0e <main+0x72>
          ani_flag = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      if (ani_flag) {
 8000c0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d007      	beq.n	8000c26 <main+0x8a>
          ani_flag = smiley.animation_Play(&smiley);
 8000c16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000c1a:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8000c1e:	4610      	mov	r0, r2
 8000c20:	4798      	blx	r3
 8000c22:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
      }
      render_DisplayScreen(&Game);
 8000c26:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f9f2 	bl	8001014 <render_DisplayScreen>
      HAL_Delay(50);
 8000c30:	2032      	movs	r0, #50	@ 0x32
 8000c32:	f000 fea5 	bl	8001980 <HAL_Delay>
  {
 8000c36:	e7d6      	b.n	8000be6 <main+0x4a>
 8000c38:	40020800 	.word	0x40020800

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	@ 0x50
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 0320 	add.w	r3, r7, #32
 8000c46:	2230      	movs	r2, #48	@ 0x30
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fd62 	bl	8003714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	4b29      	ldr	r3, [pc, #164]	@ (8000d0c <SystemClock_Config+0xd0>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c68:	4a28      	ldr	r2, [pc, #160]	@ (8000d0c <SystemClock_Config+0xd0>)
 8000c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c70:	4b26      	ldr	r3, [pc, #152]	@ (8000d0c <SystemClock_Config+0xd0>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	4b23      	ldr	r3, [pc, #140]	@ (8000d10 <SystemClock_Config+0xd4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c88:	4a21      	ldr	r2, [pc, #132]	@ (8000d10 <SystemClock_Config+0xd4>)
 8000c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	4b1f      	ldr	r3, [pc, #124]	@ (8000d10 <SystemClock_Config+0xd4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca4:	2310      	movs	r3, #16
 8000ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cac:	2300      	movs	r3, #0
 8000cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cb4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000cb8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc2:	f107 0320 	add.w	r3, r7, #32
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 fdc8 	bl	800285c <HAL_RCC_OscConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cd2:	f000 f8f3 	bl	8000ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 f82a 	bl	8002d4c <HAL_RCC_ClockConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000cfe:	f000 f8dd 	bl	8000ebc <Error_Handler>
  }
}
 8000d02:	bf00      	nop
 8000d04:	3750      	adds	r7, #80	@ 0x50
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40007000 	.word	0x40007000

08000d14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d18:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <MX_I2C1_Init+0x50>)
 8000d1a:	4a13      	ldr	r2, [pc, #76]	@ (8000d68 <MX_I2C1_Init+0x54>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <MX_I2C1_Init+0x50>)
 8000d20:	4a12      	ldr	r2, [pc, #72]	@ (8000d6c <MX_I2C1_Init+0x58>)
 8000d22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <MX_I2C1_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <MX_I2C1_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <MX_I2C1_Init+0x50>)
 8000d32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <MX_I2C1_Init+0x50>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <MX_I2C1_Init+0x50>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <MX_I2C1_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <MX_I2C1_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <MX_I2C1_Init+0x50>)
 8000d52:	f001 f8d5 	bl	8001f00 <HAL_I2C_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d5c:	f000 f8ae 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000003c 	.word	0x2000003c
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	000186a0 	.word	0x000186a0

08000d70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d74:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	@ (8000dc0 <MX_USART2_UART_Init+0x50>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d7a:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000da8:	f002 f9f0 	bl	800318c <HAL_UART_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000db2:	f000 f883 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000090 	.word	0x20000090
 8000dc0:	40004400 	.word	0x40004400

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	@ 0x28
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	4b34      	ldr	r3, [pc, #208]	@ (8000eb0 <MX_GPIO_Init+0xec>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a33      	ldr	r2, [pc, #204]	@ (8000eb0 <MX_GPIO_Init+0xec>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b31      	ldr	r3, [pc, #196]	@ (8000eb0 <MX_GPIO_Init+0xec>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb0 <MX_GPIO_Init+0xec>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb0 <MX_GPIO_Init+0xec>)
 8000e00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e06:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb0 <MX_GPIO_Init+0xec>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <MX_GPIO_Init+0xec>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a25      	ldr	r2, [pc, #148]	@ (8000eb0 <MX_GPIO_Init+0xec>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b23      	ldr	r3, [pc, #140]	@ (8000eb0 <MX_GPIO_Init+0xec>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb0 <MX_GPIO_Init+0xec>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb0 <MX_GPIO_Init+0xec>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <MX_GPIO_Init+0xec>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2160      	movs	r1, #96	@ 0x60
 8000e4e:	4819      	ldr	r0, [pc, #100]	@ (8000eb4 <MX_GPIO_Init+0xf0>)
 8000e50:	f001 f83c 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e5a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4813      	ldr	r0, [pc, #76]	@ (8000eb8 <MX_GPIO_Init+0xf4>)
 8000e6c:	f000 fe92 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8000e70:	2360      	movs	r3, #96	@ 0x60
 8000e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	480b      	ldr	r0, [pc, #44]	@ (8000eb4 <MX_GPIO_Init+0xf0>)
 8000e88:	f000 fe84 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 Button_Pin PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|Button_Pin|GPIO_PIN_9;
 8000e8c:	f44f 7358 	mov.w	r3, #864	@ 0x360
 8000e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <MX_GPIO_Init+0xf4>)
 8000ea2:	f000 fe77 	bl	8001b94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	@ 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40020800 	.word	0x40020800

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
}
 8000ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <Error_Handler+0x8>

08000ec8 <render_DisplayHealth>:


const int STARTING_Y = 2;


void render_DisplayHealth(game* game) {
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	6078      	str	r0, [r7, #4]
	const int STARTING_X = 2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	60fb      	str	r3, [r7, #12]
	ssd1306_FillRectangle(STARTING_X, STARTING_Y, STARTING_X + 1, game->health + STARTING_Y, Black);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	b2d8      	uxtb	r0, r3
 8000ed8:	2302      	movs	r3, #2
 8000eda:	b2d9      	uxtb	r1, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	b2dc      	uxtb	r4, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	2302      	movs	r3, #2
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	4413      	add	r3, r2
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	9200      	str	r2, [sp, #0]
 8000ef6:	4622      	mov	r2, r4
 8000ef8:	f000 fbf6 	bl	80016e8 <ssd1306_FillRectangle>
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd90      	pop	{r4, r7, pc}

08000f04 <render_DisplayHunger>:

void render_DisplayHunger(game* game) {
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	6078      	str	r0, [r7, #4]
	const int STARTING_X = 6;
 8000f0c:	2306      	movs	r3, #6
 8000f0e:	60fb      	str	r3, [r7, #12]
	ssd1306_FillRectangle(STARTING_X, STARTING_Y, STARTING_X + 1, game->hunger + STARTING_Y, Black);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	b2d8      	uxtb	r0, r3
 8000f14:	2302      	movs	r3, #2
 8000f16:	b2d9      	uxtb	r1, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	b2dc      	uxtb	r4, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	2302      	movs	r3, #2
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2200      	movs	r2, #0
 8000f30:	9200      	str	r2, [sp, #0]
 8000f32:	4622      	mov	r2, r4
 8000f34:	f000 fbd8 	bl	80016e8 <ssd1306_FillRectangle>
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd90      	pop	{r4, r7, pc}

08000f40 <render_DisplayHappiness>:

void render_DisplayHappiness(game* game) {
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af02      	add	r7, sp, #8
 8000f46:	6078      	str	r0, [r7, #4]
	const int STARTING_X = 10;
 8000f48:	230a      	movs	r3, #10
 8000f4a:	60fb      	str	r3, [r7, #12]
	ssd1306_FillRectangle(STARTING_X, STARTING_Y, STARTING_X + 1, game->happiness + STARTING_Y, Black);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	b2d8      	uxtb	r0, r3
 8000f50:	2302      	movs	r3, #2
 8000f52:	b2d9      	uxtb	r1, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	3301      	adds	r3, #1
 8000f5a:	b2dc      	uxtb	r4, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	2302      	movs	r3, #2
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4413      	add	r3, r2
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	9200      	str	r2, [sp, #0]
 8000f6e:	4622      	mov	r2, r4
 8000f70:	f000 fbba 	bl	80016e8 <ssd1306_FillRectangle>
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd90      	pop	{r4, r7, pc}

08000f7c <render_DisplaySprite>:
      break;
    }
}
*/

void render_DisplaySprite(SpriteFrame* frame) {
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	6078      	str	r0, [r7, #4]
    ssd1306_DrawBitmap(frame->x, frame->y, frame->sprite, frame->w, frame->h, White);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	b2d8      	uxtb	r0, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	b2d9      	uxtb	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	695a      	ldr	r2, [r3, #20]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	b2dc      	uxtb	r4, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2501      	movs	r5, #1
 8000fa2:	9501      	str	r5, [sp, #4]
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	f000 fbec 	bl	8001784 <ssd1306_DrawBitmap>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bdb0      	pop	{r4, r5, r7, pc}

08000fb4 <render_WriteText>:

void render_WriteText(char* str) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	6078      	str	r0, [r7, #4]
	ssd1306_SetCursor(32, 5);
 8000fbc:	2105      	movs	r1, #5
 8000fbe:	2020      	movs	r0, #32
 8000fc0:	f000 fb7a 	bl	80016b8 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_6x8, Black);
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <render_WriteText+0x28>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	9200      	str	r2, [sp, #0]
 8000fca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fb4d 	bl	800166c <ssd1306_WriteString>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	08004da8 	.word	0x08004da8

08000fe0 <render_DisplayKarma>:

void render_DisplayKarma( game* game) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
    ActionType mood = game->action_type;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60fb      	str	r3, [r7, #12]
    char* karma = mood ? "EVIL" : "GOOD";
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <render_DisplayKarma+0x18>
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <render_DisplayKarma+0x2c>)
 8000ff6:	e000      	b.n	8000ffa <render_DisplayKarma+0x1a>
 8000ff8:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <render_DisplayKarma+0x30>)
 8000ffa:	60bb      	str	r3, [r7, #8]
    render_WriteText(karma);
 8000ffc:	68b8      	ldr	r0, [r7, #8]
 8000ffe:	f7ff ffd9 	bl	8000fb4 <render_WriteText>
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	08003784 	.word	0x08003784
 8001010:	0800378c 	.word	0x0800378c

08001014 <render_DisplayScreen>:

void render_DisplayScreen( game* game){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    ssd1306_Fill(White); //consider delegating to a render_start func
 800101c:	2001      	movs	r0, #1
 800101e:	f000 fa01 	bl	8001424 <ssd1306_Fill>
    // render_Display_sprite(game);
    render_DisplayHealth(game);       //
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff50 	bl	8000ec8 <render_DisplayHealth>
    render_DisplayHunger(game);       // consider putting this in a render_Display stats func in game
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff6b 	bl	8000f04 <render_DisplayHunger>
    render_DisplayHappiness(game);    //
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ff86 	bl	8000f40 <render_DisplayHappiness>
    render_DisplayKarma(game);        //
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ffd3 	bl	8000fe0 <render_DisplayKarma>
    ssd1306_UpdateScreen(); //consider delegating to a render_end func
 800103a:	f000 fa0b 	bl	8001454 <ssd1306_UpdateScreen>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <render_Init>:

void render_Init() {
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
    ssd1306_Init();
 800104a:	f000 f981 	bl	8001350 <ssd1306_Init>
    ssd1306_Fill(Black);
 800104e:	2000      	movs	r0, #0
 8001050:	f000 f9e8 	bl	8001424 <ssd1306_Fill>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <HAL_MspInit+0x4c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	4a0f      	ldr	r2, [pc, #60]	@ (80010a4 <HAL_MspInit+0x4c>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800106c:	6453      	str	r3, [r2, #68]	@ 0x44
 800106e:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <HAL_MspInit+0x4c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <HAL_MspInit+0x4c>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	4a08      	ldr	r2, [pc, #32]	@ (80010a4 <HAL_MspInit+0x4c>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001088:	6413      	str	r3, [r2, #64]	@ 0x40
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_MspInit+0x4c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001096:	2007      	movs	r0, #7
 8001098:	f000 fd48 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800

080010a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	@ 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a19      	ldr	r2, [pc, #100]	@ (800112c <HAL_I2C_MspInit+0x84>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d12c      	bne.n	8001124 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <HAL_I2C_MspInit+0x88>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	4a17      	ldr	r2, [pc, #92]	@ (8001130 <HAL_I2C_MspInit+0x88>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <HAL_I2C_MspInit+0x88>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ec:	2312      	movs	r3, #18
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f8:	2304      	movs	r3, #4
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	480c      	ldr	r0, [pc, #48]	@ (8001134 <HAL_I2C_MspInit+0x8c>)
 8001104:	f000 fd46 	bl	8001b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <HAL_I2C_MspInit+0x88>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	4a07      	ldr	r2, [pc, #28]	@ (8001130 <HAL_I2C_MspInit+0x88>)
 8001112:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001116:	6413      	str	r3, [r2, #64]	@ 0x40
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <HAL_I2C_MspInit+0x88>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	@ 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40005400 	.word	0x40005400
 8001130:	40023800 	.word	0x40023800
 8001134:	40020400 	.word	0x40020400

08001138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	@ 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a19      	ldr	r2, [pc, #100]	@ (80011bc <HAL_UART_MspInit+0x84>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d12b      	bne.n	80011b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <HAL_UART_MspInit+0x88>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	4a17      	ldr	r2, [pc, #92]	@ (80011c0 <HAL_UART_MspInit+0x88>)
 8001164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001168:	6413      	str	r3, [r2, #64]	@ 0x40
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <HAL_UART_MspInit+0x88>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <HAL_UART_MspInit+0x88>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a10      	ldr	r2, [pc, #64]	@ (80011c0 <HAL_UART_MspInit+0x88>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <HAL_UART_MspInit+0x88>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001192:	230c      	movs	r3, #12
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011a2:	2307      	movs	r3, #7
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <HAL_UART_MspInit+0x8c>)
 80011ae:	f000 fcf1 	bl	8001b94 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	@ 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40004400 	.word	0x40004400
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020000 	.word	0x40020000

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <NMI_Handler+0x4>

080011d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <HardFault_Handler+0x4>

080011d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <MemManage_Handler+0x4>

080011e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <UsageFault_Handler+0x4>

080011f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121e:	f000 fb8f 	bl	8001940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <SystemInit+0x20>)
 800122e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001232:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <SystemInit+0x20>)
 8001234:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001238:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800124c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001284 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001250:	f7ff ffea 	bl	8001228 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001256:	490d      	ldr	r1, [pc, #52]	@ (800128c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001258:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800126c:	4c0a      	ldr	r4, [pc, #40]	@ (8001298 <LoopFillZerobss+0x22>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800127a:	f002 fa53 	bl	8003724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127e:	f7ff fc8d 	bl	8000b9c <main>
  bx  lr    
 8001282:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001284:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001290:	08004dc4 	.word	0x08004dc4
  ldr r2, =_sbss
 8001294:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001298:	200004e4 	.word	0x200004e4

0800129c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC_IRQHandler>

0800129e <SpriteFrame_Init>:
 *  Created on: Jan 7, 2025
 *      Author: Joseph Sary
 */
#include "sprites.h"

void SpriteFrame_Init(SpriteFrame* self, Sprite* p_sprite, KeyframeIndex p_key, int p_x, int p_y, int p_w, int p_h) {
 800129e:	b480      	push	{r7}
 80012a0:	b085      	sub	sp, #20
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	603b      	str	r3, [r7, #0]
    self->sprite = p_sprite;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	615a      	str	r2, [r3, #20]
    self->key = p_key;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	601a      	str	r2, [r3, #0]

    self->x = p_x;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	605a      	str	r2, [r3, #4]
    self->y= p_y;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	609a      	str	r2, [r3, #8]
    self->w = p_w;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	60da      	str	r2, [r3, #12]
    self->h = p_h;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6a3a      	ldr	r2, [r7, #32]
 80012ce:	611a      	str	r2, [r3, #16]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af04      	add	r7, sp, #16
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	2301      	movs	r3, #1
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	1dfb      	adds	r3, r7, #7
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2301      	movs	r3, #1
 8001306:	2200      	movs	r2, #0
 8001308:	2178      	movs	r1, #120	@ 0x78
 800130a:	4803      	ldr	r0, [pc, #12]	@ (8001318 <ssd1306_WriteCommand+0x2c>)
 800130c:	f000 ff3c 	bl	8002188 <HAL_I2C_Mem_Write>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000003c 	.word	0x2000003c

0800131c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af04      	add	r7, sp, #16
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b29b      	uxth	r3, r3
 800132a:	f04f 32ff 	mov.w	r2, #4294967295
 800132e:	9202      	str	r2, [sp, #8]
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	2240      	movs	r2, #64	@ 0x40
 800133a:	2178      	movs	r1, #120	@ 0x78
 800133c:	4803      	ldr	r0, [pc, #12]	@ (800134c <ssd1306_WriteData+0x30>)
 800133e:	f000 ff23 	bl	8002188 <HAL_I2C_Mem_Write>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000003c 	.word	0x2000003c

08001350 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001354:	f7ff ffc2 	bl	80012dc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001358:	2064      	movs	r0, #100	@ 0x64
 800135a:	f000 fb11 	bl	8001980 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800135e:	2000      	movs	r0, #0
 8001360:	f000 fa7e 	bl	8001860 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001364:	2020      	movs	r0, #32
 8001366:	f7ff ffc1 	bl	80012ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff ffbe 	bl	80012ec <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001370:	20b0      	movs	r0, #176	@ 0xb0
 8001372:	f7ff ffbb 	bl	80012ec <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001376:	20c8      	movs	r0, #200	@ 0xc8
 8001378:	f7ff ffb8 	bl	80012ec <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff ffb5 	bl	80012ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001382:	2010      	movs	r0, #16
 8001384:	f7ff ffb2 	bl	80012ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001388:	2040      	movs	r0, #64	@ 0x40
 800138a:	f7ff ffaf 	bl	80012ec <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800138e:	20ff      	movs	r0, #255	@ 0xff
 8001390:	f000 fa53 	bl	800183a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001394:	20a1      	movs	r0, #161	@ 0xa1
 8001396:	f7ff ffa9 	bl	80012ec <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800139a:	20a6      	movs	r0, #166	@ 0xa6
 800139c:	f7ff ffa6 	bl	80012ec <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80013a0:	20a8      	movs	r0, #168	@ 0xa8
 80013a2:	f7ff ffa3 	bl	80012ec <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80013a6:	203f      	movs	r0, #63	@ 0x3f
 80013a8:	f7ff ffa0 	bl	80012ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80013ac:	20a4      	movs	r0, #164	@ 0xa4
 80013ae:	f7ff ff9d 	bl	80012ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80013b2:	20d3      	movs	r0, #211	@ 0xd3
 80013b4:	f7ff ff9a 	bl	80012ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff ff97 	bl	80012ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80013be:	20d5      	movs	r0, #213	@ 0xd5
 80013c0:	f7ff ff94 	bl	80012ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80013c4:	20f0      	movs	r0, #240	@ 0xf0
 80013c6:	f7ff ff91 	bl	80012ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80013ca:	20d9      	movs	r0, #217	@ 0xd9
 80013cc:	f7ff ff8e 	bl	80012ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80013d0:	2022      	movs	r0, #34	@ 0x22
 80013d2:	f7ff ff8b 	bl	80012ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80013d6:	20da      	movs	r0, #218	@ 0xda
 80013d8:	f7ff ff88 	bl	80012ec <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80013dc:	2012      	movs	r0, #18
 80013de:	f7ff ff85 	bl	80012ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80013e2:	20db      	movs	r0, #219	@ 0xdb
 80013e4:	f7ff ff82 	bl	80012ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80013e8:	2020      	movs	r0, #32
 80013ea:	f7ff ff7f 	bl	80012ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80013ee:	208d      	movs	r0, #141	@ 0x8d
 80013f0:	f7ff ff7c 	bl	80012ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80013f4:	2014      	movs	r0, #20
 80013f6:	f7ff ff79 	bl	80012ec <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80013fa:	2001      	movs	r0, #1
 80013fc:	f000 fa30 	bl	8001860 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001400:	2000      	movs	r0, #0
 8001402:	f000 f80f 	bl	8001424 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001406:	f000 f825 	bl	8001454 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800140a:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <ssd1306_Init+0xd0>)
 800140c:	2200      	movs	r2, #0
 800140e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001410:	4b03      	ldr	r3, [pc, #12]	@ (8001420 <ssd1306_Init+0xd0>)
 8001412:	2200      	movs	r2, #0
 8001414:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001416:	4b02      	ldr	r3, [pc, #8]	@ (8001420 <ssd1306_Init+0xd0>)
 8001418:	2201      	movs	r2, #1
 800141a:	711a      	strb	r2, [r3, #4]
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200004d8 	.word	0x200004d8

08001424 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <ssd1306_Fill+0x14>
 8001434:	2300      	movs	r3, #0
 8001436:	e000      	b.n	800143a <ssd1306_Fill+0x16>
 8001438:	23ff      	movs	r3, #255	@ 0xff
 800143a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800143e:	4619      	mov	r1, r3
 8001440:	4803      	ldr	r0, [pc, #12]	@ (8001450 <ssd1306_Fill+0x2c>)
 8001442:	f002 f967 	bl	8003714 <memset>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200000d8 	.word	0x200000d8

08001454 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800145a:	2300      	movs	r3, #0
 800145c:	71fb      	strb	r3, [r7, #7]
 800145e:	e016      	b.n	800148e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	3b50      	subs	r3, #80	@ 0x50
 8001464:	b2db      	uxtb	r3, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff40 	bl	80012ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff ff3d 	bl	80012ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001472:	2010      	movs	r0, #16
 8001474:	f7ff ff3a 	bl	80012ec <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	01db      	lsls	r3, r3, #7
 800147c:	4a08      	ldr	r2, [pc, #32]	@ (80014a0 <ssd1306_UpdateScreen+0x4c>)
 800147e:	4413      	add	r3, r2
 8001480:	2180      	movs	r1, #128	@ 0x80
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff4a 	bl	800131c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	3301      	adds	r3, #1
 800148c:	71fb      	strb	r3, [r7, #7]
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b07      	cmp	r3, #7
 8001492:	d9e5      	bls.n	8001460 <ssd1306_UpdateScreen+0xc>
    }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200000d8 	.word	0x200000d8

080014a4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
 80014ae:	460b      	mov	r3, r1
 80014b0:	71bb      	strb	r3, [r7, #6]
 80014b2:	4613      	mov	r3, r2
 80014b4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	db3d      	blt.n	800153a <ssd1306_DrawPixel+0x96>
 80014be:	79bb      	ldrb	r3, [r7, #6]
 80014c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80014c2:	d83a      	bhi.n	800153a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80014c4:	797b      	ldrb	r3, [r7, #5]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d11a      	bne.n	8001500 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014ca:	79fa      	ldrb	r2, [r7, #7]
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	08db      	lsrs	r3, r3, #3
 80014d0:	b2d8      	uxtb	r0, r3
 80014d2:	4603      	mov	r3, r0
 80014d4:	01db      	lsls	r3, r3, #7
 80014d6:	4413      	add	r3, r2
 80014d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001548 <ssd1306_DrawPixel+0xa4>)
 80014da:	5cd3      	ldrb	r3, [r2, r3]
 80014dc:	b25a      	sxtb	r2, r3
 80014de:	79bb      	ldrb	r3, [r7, #6]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	2101      	movs	r1, #1
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b259      	sxtb	r1, r3
 80014f0:	79fa      	ldrb	r2, [r7, #7]
 80014f2:	4603      	mov	r3, r0
 80014f4:	01db      	lsls	r3, r3, #7
 80014f6:	4413      	add	r3, r2
 80014f8:	b2c9      	uxtb	r1, r1
 80014fa:	4a13      	ldr	r2, [pc, #76]	@ (8001548 <ssd1306_DrawPixel+0xa4>)
 80014fc:	54d1      	strb	r1, [r2, r3]
 80014fe:	e01d      	b.n	800153c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001500:	79fa      	ldrb	r2, [r7, #7]
 8001502:	79bb      	ldrb	r3, [r7, #6]
 8001504:	08db      	lsrs	r3, r3, #3
 8001506:	b2d8      	uxtb	r0, r3
 8001508:	4603      	mov	r3, r0
 800150a:	01db      	lsls	r3, r3, #7
 800150c:	4413      	add	r3, r2
 800150e:	4a0e      	ldr	r2, [pc, #56]	@ (8001548 <ssd1306_DrawPixel+0xa4>)
 8001510:	5cd3      	ldrb	r3, [r2, r3]
 8001512:	b25a      	sxtb	r2, r3
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	2101      	movs	r1, #1
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	b25b      	sxtb	r3, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	b25b      	sxtb	r3, r3
 8001526:	4013      	ands	r3, r2
 8001528:	b259      	sxtb	r1, r3
 800152a:	79fa      	ldrb	r2, [r7, #7]
 800152c:	4603      	mov	r3, r0
 800152e:	01db      	lsls	r3, r3, #7
 8001530:	4413      	add	r3, r2
 8001532:	b2c9      	uxtb	r1, r1
 8001534:	4a04      	ldr	r2, [pc, #16]	@ (8001548 <ssd1306_DrawPixel+0xa4>)
 8001536:	54d1      	strb	r1, [r2, r3]
 8001538:	e000      	b.n	800153c <ssd1306_DrawPixel+0x98>
        return;
 800153a:	bf00      	nop
    }
}
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	200000d8 	.word	0x200000d8

0800154c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b089      	sub	sp, #36	@ 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	4604      	mov	r4, r0
 8001554:	4638      	mov	r0, r7
 8001556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800155a:	4623      	mov	r3, r4
 800155c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	2b1f      	cmp	r3, #31
 8001562:	d902      	bls.n	800156a <ssd1306_WriteChar+0x1e>
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	2b7e      	cmp	r3, #126	@ 0x7e
 8001568:	d901      	bls.n	800156e <ssd1306_WriteChar+0x22>
        return 0;
 800156a:	2300      	movs	r3, #0
 800156c:	e077      	b.n	800165e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800156e:	4b3e      	ldr	r3, [pc, #248]	@ (8001668 <ssd1306_WriteChar+0x11c>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	783b      	ldrb	r3, [r7, #0]
 8001576:	4413      	add	r3, r2
 8001578:	2b80      	cmp	r3, #128	@ 0x80
 800157a:	dc06      	bgt.n	800158a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800157c:	4b3a      	ldr	r3, [pc, #232]	@ (8001668 <ssd1306_WriteChar+0x11c>)
 800157e:	885b      	ldrh	r3, [r3, #2]
 8001580:	461a      	mov	r2, r3
 8001582:	787b      	ldrb	r3, [r7, #1]
 8001584:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001586:	2b40      	cmp	r3, #64	@ 0x40
 8001588:	dd01      	ble.n	800158e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800158a:	2300      	movs	r3, #0
 800158c:	e067      	b.n	800165e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	e04e      	b.n	8001632 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	3b20      	subs	r3, #32
 800159a:	7879      	ldrb	r1, [r7, #1]
 800159c:	fb01 f303 	mul.w	r3, r1, r3
 80015a0:	4619      	mov	r1, r3
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	440b      	add	r3, r1
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	e036      	b.n	8001622 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d013      	beq.n	80015ec <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80015c4:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <ssd1306_WriteChar+0x11c>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	b2d8      	uxtb	r0, r3
 80015d2:	4b25      	ldr	r3, [pc, #148]	@ (8001668 <ssd1306_WriteChar+0x11c>)
 80015d4:	885b      	ldrh	r3, [r3, #2]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4413      	add	r3, r2
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80015e4:	4619      	mov	r1, r3
 80015e6:	f7ff ff5d 	bl	80014a4 <ssd1306_DrawPixel>
 80015ea:	e017      	b.n	800161c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80015ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001668 <ssd1306_WriteChar+0x11c>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	4413      	add	r3, r2
 80015f8:	b2d8      	uxtb	r0, r3
 80015fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <ssd1306_WriteChar+0x11c>)
 80015fc:	885b      	ldrh	r3, [r3, #2]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	4413      	add	r3, r2
 8001606:	b2d9      	uxtb	r1, r3
 8001608:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800160c:	2b00      	cmp	r3, #0
 800160e:	bf0c      	ite	eq
 8001610:	2301      	moveq	r3, #1
 8001612:	2300      	movne	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	461a      	mov	r2, r3
 8001618:	f7ff ff44 	bl	80014a4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	3301      	adds	r3, #1
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	783b      	ldrb	r3, [r7, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	4293      	cmp	r3, r2
 800162a:	d3c3      	bcc.n	80015b4 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	3301      	adds	r3, #1
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	787b      	ldrb	r3, [r7, #1]
 8001634:	461a      	mov	r2, r3
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	4293      	cmp	r3, r2
 800163a:	d3ab      	bcc.n	8001594 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 800163c:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <ssd1306_WriteChar+0x11c>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	2a00      	cmp	r2, #0
 8001644:	d005      	beq.n	8001652 <ssd1306_WriteChar+0x106>
 8001646:	68b9      	ldr	r1, [r7, #8]
 8001648:	7bfa      	ldrb	r2, [r7, #15]
 800164a:	3a20      	subs	r2, #32
 800164c:	440a      	add	r2, r1
 800164e:	7812      	ldrb	r2, [r2, #0]
 8001650:	e000      	b.n	8001654 <ssd1306_WriteChar+0x108>
 8001652:	783a      	ldrb	r2, [r7, #0]
 8001654:	4413      	add	r3, r2
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b03      	ldr	r3, [pc, #12]	@ (8001668 <ssd1306_WriteChar+0x11c>)
 800165a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800165c:	7bfb      	ldrb	r3, [r7, #15]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3724      	adds	r7, #36	@ 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd90      	pop	{r4, r7, pc}
 8001666:	bf00      	nop
 8001668:	200004d8 	.word	0x200004d8

0800166c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af02      	add	r7, sp, #8
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	4638      	mov	r0, r7
 8001676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800167a:	e013      	b.n	80016a4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	7818      	ldrb	r0, [r3, #0]
 8001680:	7e3b      	ldrb	r3, [r7, #24]
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	463b      	mov	r3, r7
 8001686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001688:	f7ff ff60 	bl	800154c <ssd1306_WriteChar>
 800168c:	4603      	mov	r3, r0
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d002      	beq.n	800169e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	e008      	b.n	80016b0 <ssd1306_WriteString+0x44>
        }
        str++;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3301      	adds	r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e7      	bne.n	800167c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	781b      	ldrb	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	460a      	mov	r2, r1
 80016c2:	71fb      	strb	r3, [r7, #7]
 80016c4:	4613      	mov	r3, r2
 80016c6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <ssd1306_SetCursor+0x2c>)
 80016ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80016d0:	79bb      	ldrb	r3, [r7, #6]
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	4b03      	ldr	r3, [pc, #12]	@ (80016e4 <ssd1306_SetCursor+0x2c>)
 80016d6:	805a      	strh	r2, [r3, #2]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	200004d8 	.word	0x200004d8

080016e8 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4604      	mov	r4, r0
 80016f0:	4608      	mov	r0, r1
 80016f2:	4611      	mov	r1, r2
 80016f4:	461a      	mov	r2, r3
 80016f6:	4623      	mov	r3, r4
 80016f8:	71fb      	strb	r3, [r7, #7]
 80016fa:	4603      	mov	r3, r0
 80016fc:	71bb      	strb	r3, [r7, #6]
 80016fe:	460b      	mov	r3, r1
 8001700:	717b      	strb	r3, [r7, #5]
 8001702:	4613      	mov	r3, r2
 8001704:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001706:	79fa      	ldrb	r2, [r7, #7]
 8001708:	797b      	ldrb	r3, [r7, #5]
 800170a:	4293      	cmp	r3, r2
 800170c:	bf28      	it	cs
 800170e:	4613      	movcs	r3, r2
 8001710:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001712:	797a      	ldrb	r2, [r7, #5]
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	4293      	cmp	r3, r2
 8001718:	bf38      	it	cc
 800171a:	4613      	movcc	r3, r2
 800171c:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800171e:	79ba      	ldrb	r2, [r7, #6]
 8001720:	793b      	ldrb	r3, [r7, #4]
 8001722:	4293      	cmp	r3, r2
 8001724:	bf28      	it	cs
 8001726:	4613      	movcs	r3, r2
 8001728:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 800172a:	793a      	ldrb	r2, [r7, #4]
 800172c:	79bb      	ldrb	r3, [r7, #6]
 800172e:	4293      	cmp	r3, r2
 8001730:	bf38      	it	cc
 8001732:	4613      	movcc	r3, r2
 8001734:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001736:	7afb      	ldrb	r3, [r7, #11]
 8001738:	73fb      	strb	r3, [r7, #15]
 800173a:	e017      	b.n	800176c <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800173c:	7b7b      	ldrb	r3, [r7, #13]
 800173e:	73bb      	strb	r3, [r7, #14]
 8001740:	e009      	b.n	8001756 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001742:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001746:	7bf9      	ldrb	r1, [r7, #15]
 8001748:	7bbb      	ldrb	r3, [r7, #14]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff feaa 	bl	80014a4 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001750:	7bbb      	ldrb	r3, [r7, #14]
 8001752:	3301      	adds	r3, #1
 8001754:	73bb      	strb	r3, [r7, #14]
 8001756:	7bba      	ldrb	r2, [r7, #14]
 8001758:	7b3b      	ldrb	r3, [r7, #12]
 800175a:	429a      	cmp	r2, r3
 800175c:	d803      	bhi.n	8001766 <ssd1306_FillRectangle+0x7e>
 800175e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001762:	2b00      	cmp	r3, #0
 8001764:	daed      	bge.n	8001742 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	3301      	adds	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	7bfa      	ldrb	r2, [r7, #15]
 800176e:	7abb      	ldrb	r3, [r7, #10]
 8001770:	429a      	cmp	r2, r3
 8001772:	d803      	bhi.n	800177c <ssd1306_FillRectangle+0x94>
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	2b3f      	cmp	r3, #63	@ 0x3f
 8001778:	d9e0      	bls.n	800173c <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 800177a:	bf00      	nop
 800177c:	bf00      	nop
}
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bd90      	pop	{r4, r7, pc}

08001784 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	603a      	str	r2, [r7, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	460b      	mov	r3, r1
 8001794:	71bb      	strb	r3, [r7, #6]
 8001796:	4613      	mov	r3, r2
 8001798:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800179a:	797b      	ldrb	r3, [r7, #5]
 800179c:	3307      	adds	r3, #7
 800179e:	2b00      	cmp	r3, #0
 80017a0:	da00      	bge.n	80017a4 <ssd1306_DrawBitmap+0x20>
 80017a2:	3307      	adds	r3, #7
 80017a4:	10db      	asrs	r3, r3, #3
 80017a6:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db3e      	blt.n	8001832 <ssd1306_DrawBitmap+0xae>
 80017b4:	79bb      	ldrb	r3, [r7, #6]
 80017b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80017b8:	d83b      	bhi.n	8001832 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80017ba:	2300      	movs	r3, #0
 80017bc:	73bb      	strb	r3, [r7, #14]
 80017be:	e033      	b.n	8001828 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80017c0:	2300      	movs	r3, #0
 80017c2:	737b      	strb	r3, [r7, #13]
 80017c4:	e026      	b.n	8001814 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80017c6:	7b7b      	ldrb	r3, [r7, #13]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	e00d      	b.n	80017f4 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80017d8:	7bbb      	ldrb	r3, [r7, #14]
 80017da:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	7b7a      	ldrb	r2, [r7, #13]
 80017e4:	08d2      	lsrs	r2, r2, #3
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	4413      	add	r3, r2
 80017ea:	461a      	mov	r2, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80017f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da08      	bge.n	800180e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80017fc:	79fa      	ldrb	r2, [r7, #7]
 80017fe:	7b7b      	ldrb	r3, [r7, #13]
 8001800:	4413      	add	r3, r2
 8001802:	b2db      	uxtb	r3, r3
 8001804:	7f3a      	ldrb	r2, [r7, #28]
 8001806:	79b9      	ldrb	r1, [r7, #6]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fe4b 	bl	80014a4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800180e:	7b7b      	ldrb	r3, [r7, #13]
 8001810:	3301      	adds	r3, #1
 8001812:	737b      	strb	r3, [r7, #13]
 8001814:	7b7a      	ldrb	r2, [r7, #13]
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	429a      	cmp	r2, r3
 800181a:	d3d4      	bcc.n	80017c6 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800181c:	7bbb      	ldrb	r3, [r7, #14]
 800181e:	3301      	adds	r3, #1
 8001820:	73bb      	strb	r3, [r7, #14]
 8001822:	79bb      	ldrb	r3, [r7, #6]
 8001824:	3301      	adds	r3, #1
 8001826:	71bb      	strb	r3, [r7, #6]
 8001828:	7bba      	ldrb	r2, [r7, #14]
 800182a:	7e3b      	ldrb	r3, [r7, #24]
 800182c:	429a      	cmp	r2, r3
 800182e:	d3c7      	bcc.n	80017c0 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001830:	e000      	b.n	8001834 <ssd1306_DrawBitmap+0xb0>
        return;
 8001832:	bf00      	nop
}
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001844:	2381      	movs	r3, #129	@ 0x81
 8001846:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fd4e 	bl	80012ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fd4a 	bl	80012ec <ssd1306_WriteCommand>
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001870:	23af      	movs	r3, #175	@ 0xaf
 8001872:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001874:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <ssd1306_SetDisplayOn+0x38>)
 8001876:	2201      	movs	r2, #1
 8001878:	715a      	strb	r2, [r3, #5]
 800187a:	e004      	b.n	8001886 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800187c:	23ae      	movs	r3, #174	@ 0xae
 800187e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <ssd1306_SetDisplayOn+0x38>)
 8001882:	2200      	movs	r2, #0
 8001884:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fd2f 	bl	80012ec <ssd1306_WriteCommand>
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200004d8 	.word	0x200004d8

0800189c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a0:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0d      	ldr	r2, [pc, #52]	@ (80018dc <HAL_Init+0x40>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <HAL_Init+0x40>)
 80018b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b8:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <HAL_Init+0x40>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a07      	ldr	r2, [pc, #28]	@ (80018dc <HAL_Init+0x40>)
 80018be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 f931 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 f808 	bl	80018e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d0:	f7ff fbc2 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00

080018e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e8:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <HAL_InitTick+0x54>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_InitTick+0x58>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f93b 	bl	8001b7a <HAL_SYSTICK_Config>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e00e      	b.n	800192c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b0f      	cmp	r3, #15
 8001912:	d80a      	bhi.n	800192a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001914:	2200      	movs	r2, #0
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f000 f911 	bl	8001b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001920:	4a06      	ldr	r2, [pc, #24]	@ (800193c <HAL_InitTick+0x5c>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000000 	.word	0x20000000
 8001938:	2000001c 	.word	0x2000001c
 800193c:	20000018 	.word	0x20000018

08001940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <HAL_IncTick+0x20>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_IncTick+0x24>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	4a04      	ldr	r2, [pc, #16]	@ (8001964 <HAL_IncTick+0x24>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	2000001c 	.word	0x2000001c
 8001964:	200004e0 	.word	0x200004e0

08001968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b03      	ldr	r3, [pc, #12]	@ (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	200004e0 	.word	0x200004e0

08001980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff ffee 	bl	8001968 <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d005      	beq.n	80019a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199a:	4b0a      	ldr	r3, [pc, #40]	@ (80019c4 <HAL_Delay+0x44>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019a6:	bf00      	nop
 80019a8:	f7ff ffde 	bl	8001968 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f7      	bhi.n	80019a8 <HAL_Delay+0x28>
  {
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000001c 	.word	0x2000001c

080019c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <__NVIC_GetPriorityGrouping+0x18>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	f003 0307 	and.w	r3, r3, #7
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	@ (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	@ (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	@ 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	@ 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001af8:	d301      	bcc.n	8001afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00f      	b.n	8001b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <SysTick_Config+0x40>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b06:	210f      	movs	r1, #15
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f7ff ff8e 	bl	8001a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b10:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <SysTick_Config+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b16:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <SysTick_Config+0x40>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff47 	bl	80019c8 <__NVIC_SetPriorityGrouping>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b54:	f7ff ff5c 	bl	8001a10 <__NVIC_GetPriorityGrouping>
 8001b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff8e 	bl	8001a80 <NVIC_EncodePriority>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff5d 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffb0 	bl	8001ae8 <SysTick_Config>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	@ 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	e159      	b.n	8001e64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f040 8148 	bne.w	8001e5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d005      	beq.n	8001be6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d130      	bne.n	8001c48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 0201 	and.w	r2, r3, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d017      	beq.n	8001c84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d123      	bne.n	8001cd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	08da      	lsrs	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3208      	adds	r2, #8
 8001c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	08da      	lsrs	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3208      	adds	r2, #8
 8001cd2:	69b9      	ldr	r1, [r7, #24]
 8001cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80a2 	beq.w	8001e5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b57      	ldr	r3, [pc, #348]	@ (8001e7c <HAL_GPIO_Init+0x2e8>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	4a56      	ldr	r2, [pc, #344]	@ (8001e7c <HAL_GPIO_Init+0x2e8>)
 8001d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2a:	4b54      	ldr	r3, [pc, #336]	@ (8001e7c <HAL_GPIO_Init+0x2e8>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d36:	4a52      	ldr	r2, [pc, #328]	@ (8001e80 <HAL_GPIO_Init+0x2ec>)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a49      	ldr	r2, [pc, #292]	@ (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d019      	beq.n	8001d96 <HAL_GPIO_Init+0x202>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a48      	ldr	r2, [pc, #288]	@ (8001e88 <HAL_GPIO_Init+0x2f4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d013      	beq.n	8001d92 <HAL_GPIO_Init+0x1fe>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a47      	ldr	r2, [pc, #284]	@ (8001e8c <HAL_GPIO_Init+0x2f8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00d      	beq.n	8001d8e <HAL_GPIO_Init+0x1fa>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a46      	ldr	r2, [pc, #280]	@ (8001e90 <HAL_GPIO_Init+0x2fc>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d007      	beq.n	8001d8a <HAL_GPIO_Init+0x1f6>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a45      	ldr	r2, [pc, #276]	@ (8001e94 <HAL_GPIO_Init+0x300>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d101      	bne.n	8001d86 <HAL_GPIO_Init+0x1f2>
 8001d82:	2304      	movs	r3, #4
 8001d84:	e008      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d86:	2307      	movs	r3, #7
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e004      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e002      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d96:	2300      	movs	r3, #0
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	f002 0203 	and.w	r2, r2, #3
 8001d9e:	0092      	lsls	r2, r2, #2
 8001da0:	4093      	lsls	r3, r2
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da8:	4935      	ldr	r1, [pc, #212]	@ (8001e80 <HAL_GPIO_Init+0x2ec>)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	3302      	adds	r3, #2
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db6:	4b38      	ldr	r3, [pc, #224]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dda:	4a2f      	ldr	r2, [pc, #188]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e04:	4a24      	ldr	r2, [pc, #144]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e0a:	4b23      	ldr	r3, [pc, #140]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e34:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e58:	4a0f      	ldr	r2, [pc, #60]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3301      	adds	r3, #1
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	2b0f      	cmp	r3, #15
 8001e68:	f67f aea2 	bls.w	8001bb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3724      	adds	r7, #36	@ 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40013800 	.word	0x40013800
 8001e84:	40020000 	.word	0x40020000
 8001e88:	40020400 	.word	0x40020400
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40020c00 	.word	0x40020c00
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40013c00 	.word	0x40013c00

08001e9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	887b      	ldrh	r3, [r7, #2]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
 8001eb8:	e001      	b.n	8001ebe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001edc:	787b      	ldrb	r3, [r7, #1]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ee8:	e003      	b.n	8001ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	041a      	lsls	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	619a      	str	r2, [r3, #24]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e12b      	b.n	800216a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff f8be 	bl	80010a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2224      	movs	r2, #36	@ 0x24
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0201 	bic.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f64:	f001 f8ea 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8001f68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4a81      	ldr	r2, [pc, #516]	@ (8002174 <HAL_I2C_Init+0x274>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d807      	bhi.n	8001f84 <HAL_I2C_Init+0x84>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4a80      	ldr	r2, [pc, #512]	@ (8002178 <HAL_I2C_Init+0x278>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	bf94      	ite	ls
 8001f7c:	2301      	movls	r3, #1
 8001f7e:	2300      	movhi	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	e006      	b.n	8001f92 <HAL_I2C_Init+0x92>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a7d      	ldr	r2, [pc, #500]	@ (800217c <HAL_I2C_Init+0x27c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	bf94      	ite	ls
 8001f8c:	2301      	movls	r3, #1
 8001f8e:	2300      	movhi	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e0e7      	b.n	800216a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4a78      	ldr	r2, [pc, #480]	@ (8002180 <HAL_I2C_Init+0x280>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0c9b      	lsrs	r3, r3, #18
 8001fa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a6a      	ldr	r2, [pc, #424]	@ (8002174 <HAL_I2C_Init+0x274>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d802      	bhi.n	8001fd4 <HAL_I2C_Init+0xd4>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	e009      	b.n	8001fe8 <HAL_I2C_Init+0xe8>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	4a69      	ldr	r2, [pc, #420]	@ (8002184 <HAL_I2C_Init+0x284>)
 8001fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe4:	099b      	lsrs	r3, r3, #6
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ffa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	495c      	ldr	r1, [pc, #368]	@ (8002174 <HAL_I2C_Init+0x274>)
 8002004:	428b      	cmp	r3, r1
 8002006:	d819      	bhi.n	800203c <HAL_I2C_Init+0x13c>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1e59      	subs	r1, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fbb1 f3f3 	udiv	r3, r1, r3
 8002016:	1c59      	adds	r1, r3, #1
 8002018:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800201c:	400b      	ands	r3, r1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_I2C_Init+0x138>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1e59      	subs	r1, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002030:	3301      	adds	r3, #1
 8002032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002036:	e051      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 8002038:	2304      	movs	r3, #4
 800203a:	e04f      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d111      	bne.n	8002068 <HAL_I2C_Init+0x168>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1e58      	subs	r0, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	440b      	add	r3, r1
 8002052:	fbb0 f3f3 	udiv	r3, r0, r3
 8002056:	3301      	adds	r3, #1
 8002058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205c:	2b00      	cmp	r3, #0
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	e012      	b.n	800208e <HAL_I2C_Init+0x18e>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1e58      	subs	r0, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	0099      	lsls	r1, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	fbb0 f3f3 	udiv	r3, r0, r3
 800207e:	3301      	adds	r3, #1
 8002080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf0c      	ite	eq
 8002088:	2301      	moveq	r3, #1
 800208a:	2300      	movne	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Init+0x196>
 8002092:	2301      	movs	r3, #1
 8002094:	e022      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10e      	bne.n	80020bc <HAL_I2C_Init+0x1bc>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1e58      	subs	r0, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6859      	ldr	r1, [r3, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	440b      	add	r3, r1
 80020ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b0:	3301      	adds	r3, #1
 80020b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ba:	e00f      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1e58      	subs	r0, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	0099      	lsls	r1, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	6809      	ldr	r1, [r1, #0]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69da      	ldr	r2, [r3, #28]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800210a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6911      	ldr	r1, [r2, #16]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68d2      	ldr	r2, [r2, #12]
 8002116:	4311      	orrs	r1, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	430b      	orrs	r3, r1
 800211e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	000186a0 	.word	0x000186a0
 8002178:	001e847f 	.word	0x001e847f
 800217c:	003d08ff 	.word	0x003d08ff
 8002180:	431bde83 	.word	0x431bde83
 8002184:	10624dd3 	.word	0x10624dd3

08002188 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af02      	add	r7, sp, #8
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	4608      	mov	r0, r1
 8002192:	4611      	mov	r1, r2
 8002194:	461a      	mov	r2, r3
 8002196:	4603      	mov	r3, r0
 8002198:	817b      	strh	r3, [r7, #10]
 800219a:	460b      	mov	r3, r1
 800219c:	813b      	strh	r3, [r7, #8]
 800219e:	4613      	mov	r3, r2
 80021a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021a2:	f7ff fbe1 	bl	8001968 <HAL_GetTick>
 80021a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b20      	cmp	r3, #32
 80021b2:	f040 80d9 	bne.w	8002368 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	2319      	movs	r3, #25
 80021bc:	2201      	movs	r2, #1
 80021be:	496d      	ldr	r1, [pc, #436]	@ (8002374 <HAL_I2C_Mem_Write+0x1ec>)
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f971 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021cc:	2302      	movs	r3, #2
 80021ce:	e0cc      	b.n	800236a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_I2C_Mem_Write+0x56>
 80021da:	2302      	movs	r3, #2
 80021dc:	e0c5      	b.n	800236a <HAL_I2C_Mem_Write+0x1e2>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d007      	beq.n	8002204 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002212:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2221      	movs	r2, #33	@ 0x21
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2240      	movs	r2, #64	@ 0x40
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a3a      	ldr	r2, [r7, #32]
 800222e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002234:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4a4d      	ldr	r2, [pc, #308]	@ (8002378 <HAL_I2C_Mem_Write+0x1f0>)
 8002244:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002246:	88f8      	ldrh	r0, [r7, #6]
 8002248:	893a      	ldrh	r2, [r7, #8]
 800224a:	8979      	ldrh	r1, [r7, #10]
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	4603      	mov	r3, r0
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f890 	bl	800237c <I2C_RequestMemoryWrite>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d052      	beq.n	8002308 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e081      	b.n	800236a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 fa36 	bl	80026dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00d      	beq.n	8002292 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	2b04      	cmp	r3, #4
 800227c:	d107      	bne.n	800228e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800228c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e06b      	b.n	800236a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	781a      	ldrb	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d11b      	bne.n	8002308 <HAL_I2C_Mem_Write+0x180>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d017      	beq.n	8002308 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1aa      	bne.n	8002266 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 fa29 	bl	800276c <I2C_WaitOnBTFFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00d      	beq.n	800233c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	2b04      	cmp	r3, #4
 8002326:	d107      	bne.n	8002338 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002336:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e016      	b.n	800236a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800234a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	e000      	b.n	800236a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002368:	2302      	movs	r3, #2
  }
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	00100002 	.word	0x00100002
 8002378:	ffff0000 	.word	0xffff0000

0800237c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	4608      	mov	r0, r1
 8002386:	4611      	mov	r1, r2
 8002388:	461a      	mov	r2, r3
 800238a:	4603      	mov	r3, r0
 800238c:	817b      	strh	r3, [r7, #10]
 800238e:	460b      	mov	r3, r1
 8002390:	813b      	strh	r3, [r7, #8]
 8002392:	4613      	mov	r3, r2
 8002394:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f878 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00d      	beq.n	80023da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023cc:	d103      	bne.n	80023d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e05f      	b.n	800249a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023da:	897b      	ldrh	r3, [r7, #10]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80023e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	6a3a      	ldr	r2, [r7, #32]
 80023ee:	492d      	ldr	r1, [pc, #180]	@ (80024a4 <I2C_RequestMemoryWrite+0x128>)
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f8d3 	bl	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e04c      	b.n	800249a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002418:	6a39      	ldr	r1, [r7, #32]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f95e 	bl	80026dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00d      	beq.n	8002442 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	2b04      	cmp	r3, #4
 800242c:	d107      	bne.n	800243e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800243c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e02b      	b.n	800249a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d105      	bne.n	8002454 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002448:	893b      	ldrh	r3, [r7, #8]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	611a      	str	r2, [r3, #16]
 8002452:	e021      	b.n	8002498 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002454:	893b      	ldrh	r3, [r7, #8]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	b29b      	uxth	r3, r3
 800245a:	b2da      	uxtb	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002464:	6a39      	ldr	r1, [r7, #32]
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f938 	bl	80026dc <I2C_WaitOnTXEFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00d      	beq.n	800248e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	2b04      	cmp	r3, #4
 8002478:	d107      	bne.n	800248a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002488:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e005      	b.n	800249a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800248e:	893b      	ldrh	r3, [r7, #8]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	00010002 	.word	0x00010002

080024a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b8:	e048      	b.n	800254c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c0:	d044      	beq.n	800254c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c2:	f7ff fa51 	bl	8001968 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d302      	bcc.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d139      	bne.n	800254c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	0c1b      	lsrs	r3, r3, #16
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d10d      	bne.n	80024fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	43da      	mvns	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	4013      	ands	r3, r2
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	e00c      	b.n	8002518 <I2C_WaitOnFlagUntilTimeout+0x70>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	43da      	mvns	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	4013      	ands	r3, r2
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	429a      	cmp	r2, r3
 800251c:	d116      	bne.n	800254c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	f043 0220 	orr.w	r2, r3, #32
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e023      	b.n	8002594 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	0c1b      	lsrs	r3, r3, #16
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d10d      	bne.n	8002572 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	43da      	mvns	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4013      	ands	r3, r2
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	e00c      	b.n	800258c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	43da      	mvns	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4013      	ands	r3, r2
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	429a      	cmp	r2, r3
 8002590:	d093      	beq.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025aa:	e071      	b.n	8002690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ba:	d123      	bne.n	8002604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f0:	f043 0204 	orr.w	r2, r3, #4
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e067      	b.n	80026d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260a:	d041      	beq.n	8002690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260c:	f7ff f9ac 	bl	8001968 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	429a      	cmp	r2, r3
 800261a:	d302      	bcc.n	8002622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d136      	bne.n	8002690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b01      	cmp	r3, #1
 800262a:	d10c      	bne.n	8002646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	43da      	mvns	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	4013      	ands	r3, r2
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	bf14      	ite	ne
 800263e:	2301      	movne	r3, #1
 8002640:	2300      	moveq	r3, #0
 8002642:	b2db      	uxtb	r3, r3
 8002644:	e00b      	b.n	800265e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	43da      	mvns	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	4013      	ands	r3, r2
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf14      	ite	ne
 8002658:	2301      	movne	r3, #1
 800265a:	2300      	moveq	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d016      	beq.n	8002690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e021      	b.n	80026d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	0c1b      	lsrs	r3, r3, #16
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d10c      	bne.n	80026b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	43da      	mvns	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	4013      	ands	r3, r2
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf14      	ite	ne
 80026ac:	2301      	movne	r3, #1
 80026ae:	2300      	moveq	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e00b      	b.n	80026cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	43da      	mvns	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4013      	ands	r3, r2
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bf14      	ite	ne
 80026c6:	2301      	movne	r3, #1
 80026c8:	2300      	moveq	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f47f af6d 	bne.w	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026e8:	e034      	b.n	8002754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 f886 	bl	80027fc <I2C_IsAcknowledgeFailed>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e034      	b.n	8002764 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d028      	beq.n	8002754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002702:	f7ff f931 	bl	8001968 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	429a      	cmp	r2, r3
 8002710:	d302      	bcc.n	8002718 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d11d      	bne.n	8002754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002722:	2b80      	cmp	r3, #128	@ 0x80
 8002724:	d016      	beq.n	8002754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	f043 0220 	orr.w	r2, r3, #32
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e007      	b.n	8002764 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275e:	2b80      	cmp	r3, #128	@ 0x80
 8002760:	d1c3      	bne.n	80026ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002778:	e034      	b.n	80027e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f83e 	bl	80027fc <I2C_IsAcknowledgeFailed>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e034      	b.n	80027f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d028      	beq.n	80027e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002792:	f7ff f8e9 	bl	8001968 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d302      	bcc.n	80027a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d11d      	bne.n	80027e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d016      	beq.n	80027e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	f043 0220 	orr.w	r2, r3, #32
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e007      	b.n	80027f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d1c3      	bne.n	800277a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800280e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002812:	d11b      	bne.n	800284c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800281c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	f043 0204 	orr.w	r2, r3, #4
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e267      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d075      	beq.n	8002966 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800287a:	4b88      	ldr	r3, [pc, #544]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b04      	cmp	r3, #4
 8002884:	d00c      	beq.n	80028a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002886:	4b85      	ldr	r3, [pc, #532]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800288e:	2b08      	cmp	r3, #8
 8002890:	d112      	bne.n	80028b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002892:	4b82      	ldr	r3, [pc, #520]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800289a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800289e:	d10b      	bne.n	80028b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a0:	4b7e      	ldr	r3, [pc, #504]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d05b      	beq.n	8002964 <HAL_RCC_OscConfig+0x108>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d157      	bne.n	8002964 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e242      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c0:	d106      	bne.n	80028d0 <HAL_RCC_OscConfig+0x74>
 80028c2:	4b76      	ldr	r3, [pc, #472]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a75      	ldr	r2, [pc, #468]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e01d      	b.n	800290c <HAL_RCC_OscConfig+0xb0>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x98>
 80028da:	4b70      	ldr	r3, [pc, #448]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a6f      	ldr	r2, [pc, #444]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b6d      	ldr	r3, [pc, #436]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6c      	ldr	r2, [pc, #432]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0xb0>
 80028f4:	4b69      	ldr	r3, [pc, #420]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a68      	ldr	r2, [pc, #416]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b66      	ldr	r3, [pc, #408]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a65      	ldr	r2, [pc, #404]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800290a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d013      	beq.n	800293c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7ff f828 	bl	8001968 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800291c:	f7ff f824 	bl	8001968 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	@ 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e207      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292e:	4b5b      	ldr	r3, [pc, #364]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0xc0>
 800293a:	e014      	b.n	8002966 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7ff f814 	bl	8001968 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002944:	f7ff f810 	bl	8001968 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	@ 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e1f3      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002956:	4b51      	ldr	r3, [pc, #324]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0xe8>
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d063      	beq.n	8002a3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002972:	4b4a      	ldr	r3, [pc, #296]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800297e:	4b47      	ldr	r3, [pc, #284]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002986:	2b08      	cmp	r3, #8
 8002988:	d11c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298a:	4b44      	ldr	r3, [pc, #272]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d116      	bne.n	80029c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002996:	4b41      	ldr	r3, [pc, #260]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_RCC_OscConfig+0x152>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e1c7      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ae:	4b3b      	ldr	r3, [pc, #236]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4937      	ldr	r1, [pc, #220]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c2:	e03a      	b.n	8002a3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029cc:	4b34      	ldr	r3, [pc, #208]	@ (8002aa0 <HAL_RCC_OscConfig+0x244>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d2:	f7fe ffc9 	bl	8001968 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029da:	f7fe ffc5 	bl	8001968 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e1a8      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ec:	4b2b      	ldr	r3, [pc, #172]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f8:	4b28      	ldr	r3, [pc, #160]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4925      	ldr	r1, [pc, #148]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]
 8002a0c:	e015      	b.n	8002a3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0e:	4b24      	ldr	r3, [pc, #144]	@ (8002aa0 <HAL_RCC_OscConfig+0x244>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe ffa8 	bl	8001968 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1c:	f7fe ffa4 	bl	8001968 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e187      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d036      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d016      	beq.n	8002a7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4e:	4b15      	ldr	r3, [pc, #84]	@ (8002aa4 <HAL_RCC_OscConfig+0x248>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a54:	f7fe ff88 	bl	8001968 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5c:	f7fe ff84 	bl	8001968 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e167      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x200>
 8002a7a:	e01b      	b.n	8002ab4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7c:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <HAL_RCC_OscConfig+0x248>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7fe ff71 	bl	8001968 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a88:	e00e      	b.n	8002aa8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8a:	f7fe ff6d 	bl	8001968 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d907      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e150      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	42470000 	.word	0x42470000
 8002aa4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa8:	4b88      	ldr	r3, [pc, #544]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002aaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ea      	bne.n	8002a8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 8097 	beq.w	8002bf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac6:	4b81      	ldr	r3, [pc, #516]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10f      	bne.n	8002af2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	4b7d      	ldr	r3, [pc, #500]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	4a7c      	ldr	r2, [pc, #496]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae2:	4b7a      	ldr	r3, [pc, #488]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aee:	2301      	movs	r3, #1
 8002af0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af2:	4b77      	ldr	r3, [pc, #476]	@ (8002cd0 <HAL_RCC_OscConfig+0x474>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d118      	bne.n	8002b30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afe:	4b74      	ldr	r3, [pc, #464]	@ (8002cd0 <HAL_RCC_OscConfig+0x474>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a73      	ldr	r2, [pc, #460]	@ (8002cd0 <HAL_RCC_OscConfig+0x474>)
 8002b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0a:	f7fe ff2d 	bl	8001968 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b12:	f7fe ff29 	bl	8001968 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e10c      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b24:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd0 <HAL_RCC_OscConfig+0x474>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x2ea>
 8002b38:	4b64      	ldr	r3, [pc, #400]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3c:	4a63      	ldr	r2, [pc, #396]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b44:	e01c      	b.n	8002b80 <HAL_RCC_OscConfig+0x324>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x30c>
 8002b4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b52:	4a5e      	ldr	r2, [pc, #376]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b5a:	4b5c      	ldr	r3, [pc, #368]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5e:	4a5b      	ldr	r2, [pc, #364]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b66:	e00b      	b.n	8002b80 <HAL_RCC_OscConfig+0x324>
 8002b68:	4b58      	ldr	r3, [pc, #352]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6c:	4a57      	ldr	r2, [pc, #348]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b74:	4b55      	ldr	r3, [pc, #340]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b78:	4a54      	ldr	r2, [pc, #336]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f023 0304 	bic.w	r3, r3, #4
 8002b7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d015      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7fe feee 	bl	8001968 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b90:	f7fe feea 	bl	8001968 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e0cb      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	4b49      	ldr	r3, [pc, #292]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0ee      	beq.n	8002b90 <HAL_RCC_OscConfig+0x334>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb4:	f7fe fed8 	bl	8001968 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbc:	f7fe fed4 	bl	8001968 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e0b5      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd2:	4b3e      	ldr	r3, [pc, #248]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1ee      	bne.n	8002bbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d105      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be4:	4b39      	ldr	r3, [pc, #228]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	4a38      	ldr	r2, [pc, #224]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002bea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80a1 	beq.w	8002d3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bfa:	4b34      	ldr	r3, [pc, #208]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d05c      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d141      	bne.n	8002c92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b31      	ldr	r3, [pc, #196]	@ (8002cd4 <HAL_RCC_OscConfig+0x478>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fea8 	bl	8001968 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe fea4 	bl	8001968 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e087      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	4b27      	ldr	r3, [pc, #156]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	019b      	lsls	r3, r3, #6
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	085b      	lsrs	r3, r3, #1
 8002c52:	3b01      	subs	r3, #1
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5c:	061b      	lsls	r3, r3, #24
 8002c5e:	491b      	ldr	r1, [pc, #108]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c64:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd4 <HAL_RCC_OscConfig+0x478>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7fe fe7d 	bl	8001968 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c72:	f7fe fe79 	bl	8001968 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e05c      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c84:	4b11      	ldr	r3, [pc, #68]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x416>
 8002c90:	e054      	b.n	8002d3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c92:	4b10      	ldr	r3, [pc, #64]	@ (8002cd4 <HAL_RCC_OscConfig+0x478>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe fe66 	bl	8001968 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7fe fe62 	bl	8001968 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e045      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x444>
 8002cbe:	e03d      	b.n	8002d3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e038      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d48 <HAL_RCC_OscConfig+0x4ec>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d028      	beq.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d121      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d11a      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d08:	4013      	ands	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d111      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	3b01      	subs	r3, #1
 8002d22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800

08002d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0cc      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d60:	4b68      	ldr	r3, [pc, #416]	@ (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d90c      	bls.n	8002d88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	4b65      	ldr	r3, [pc, #404]	@ (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d76:	4b63      	ldr	r3, [pc, #396]	@ (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0b8      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da0:	4b59      	ldr	r3, [pc, #356]	@ (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4a58      	ldr	r2, [pc, #352]	@ (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002daa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db8:	4b53      	ldr	r3, [pc, #332]	@ (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a52      	ldr	r2, [pc, #328]	@ (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc4:	4b50      	ldr	r3, [pc, #320]	@ (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	494d      	ldr	r1, [pc, #308]	@ (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d044      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	4b47      	ldr	r3, [pc, #284]	@ (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d119      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e07f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d003      	beq.n	8002e0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d107      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e06f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e067      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e2a:	4b37      	ldr	r3, [pc, #220]	@ (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f023 0203 	bic.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4934      	ldr	r1, [pc, #208]	@ (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e3c:	f7fe fd94 	bl	8001968 <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e44:	f7fe fd90 	bl	8001968 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e04f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 020c 	and.w	r2, r3, #12
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d1eb      	bne.n	8002e44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b25      	ldr	r3, [pc, #148]	@ (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d20c      	bcs.n	8002e94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b22      	ldr	r3, [pc, #136]	@ (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b20      	ldr	r3, [pc, #128]	@ (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e032      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea0:	4b19      	ldr	r3, [pc, #100]	@ (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4916      	ldr	r1, [pc, #88]	@ (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ebe:	4b12      	ldr	r3, [pc, #72]	@ (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	490e      	ldr	r1, [pc, #56]	@ (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ed2:	f000 f821 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	490a      	ldr	r1, [pc, #40]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	5ccb      	ldrb	r3, [r1, r3]
 8002ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eea:	4a09      	ldr	r2, [pc, #36]	@ (8002f10 <HAL_RCC_ClockConfig+0x1c4>)
 8002eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002eee:	4b09      	ldr	r3, [pc, #36]	@ (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe fcf4 	bl	80018e0 <HAL_InitTick>

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023c00 	.word	0x40023c00
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	08003794 	.word	0x08003794
 8002f10:	20000000 	.word	0x20000000
 8002f14:	20000018 	.word	0x20000018

08002f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f1c:	b094      	sub	sp, #80	@ 0x50
 8002f1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f30:	4b79      	ldr	r3, [pc, #484]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d00d      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x40>
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	f200 80e1 	bhi.w	8003104 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x34>
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f4a:	e0db      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f4c:	4b73      	ldr	r3, [pc, #460]	@ (800311c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f50:	e0db      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f52:	4b73      	ldr	r3, [pc, #460]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f56:	e0d8      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f58:	4b6f      	ldr	r3, [pc, #444]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f62:	4b6d      	ldr	r3, [pc, #436]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d063      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6e:	4b6a      	ldr	r3, [pc, #424]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	099b      	lsrs	r3, r3, #6
 8002f74:	2200      	movs	r2, #0
 8002f76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f80:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f82:	2300      	movs	r3, #0
 8002f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f8a:	4622      	mov	r2, r4
 8002f8c:	462b      	mov	r3, r5
 8002f8e:	f04f 0000 	mov.w	r0, #0
 8002f92:	f04f 0100 	mov.w	r1, #0
 8002f96:	0159      	lsls	r1, r3, #5
 8002f98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f9c:	0150      	lsls	r0, r2, #5
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	1a51      	subs	r1, r2, r1
 8002fa6:	6139      	str	r1, [r7, #16]
 8002fa8:	4629      	mov	r1, r5
 8002faa:	eb63 0301 	sbc.w	r3, r3, r1
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fbc:	4659      	mov	r1, fp
 8002fbe:	018b      	lsls	r3, r1, #6
 8002fc0:	4651      	mov	r1, sl
 8002fc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fc6:	4651      	mov	r1, sl
 8002fc8:	018a      	lsls	r2, r1, #6
 8002fca:	4651      	mov	r1, sl
 8002fcc:	ebb2 0801 	subs.w	r8, r2, r1
 8002fd0:	4659      	mov	r1, fp
 8002fd2:	eb63 0901 	sbc.w	r9, r3, r1
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fea:	4690      	mov	r8, r2
 8002fec:	4699      	mov	r9, r3
 8002fee:	4623      	mov	r3, r4
 8002ff0:	eb18 0303 	adds.w	r3, r8, r3
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	462b      	mov	r3, r5
 8002ff8:	eb49 0303 	adc.w	r3, r9, r3
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800300a:	4629      	mov	r1, r5
 800300c:	024b      	lsls	r3, r1, #9
 800300e:	4621      	mov	r1, r4
 8003010:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003014:	4621      	mov	r1, r4
 8003016:	024a      	lsls	r2, r1, #9
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800301e:	2200      	movs	r2, #0
 8003020:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003022:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003024:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003028:	f7fd f8d4 	bl	80001d4 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4613      	mov	r3, r2
 8003032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003034:	e058      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003036:	4b38      	ldr	r3, [pc, #224]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x200>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	099b      	lsrs	r3, r3, #6
 800303c:	2200      	movs	r2, #0
 800303e:	4618      	mov	r0, r3
 8003040:	4611      	mov	r1, r2
 8003042:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003046:	623b      	str	r3, [r7, #32]
 8003048:	2300      	movs	r3, #0
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
 800304c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003050:	4642      	mov	r2, r8
 8003052:	464b      	mov	r3, r9
 8003054:	f04f 0000 	mov.w	r0, #0
 8003058:	f04f 0100 	mov.w	r1, #0
 800305c:	0159      	lsls	r1, r3, #5
 800305e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003062:	0150      	lsls	r0, r2, #5
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4641      	mov	r1, r8
 800306a:	ebb2 0a01 	subs.w	sl, r2, r1
 800306e:	4649      	mov	r1, r9
 8003070:	eb63 0b01 	sbc.w	fp, r3, r1
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003080:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003084:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003088:	ebb2 040a 	subs.w	r4, r2, sl
 800308c:	eb63 050b 	sbc.w	r5, r3, fp
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	00eb      	lsls	r3, r5, #3
 800309a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800309e:	00e2      	lsls	r2, r4, #3
 80030a0:	4614      	mov	r4, r2
 80030a2:	461d      	mov	r5, r3
 80030a4:	4643      	mov	r3, r8
 80030a6:	18e3      	adds	r3, r4, r3
 80030a8:	603b      	str	r3, [r7, #0]
 80030aa:	464b      	mov	r3, r9
 80030ac:	eb45 0303 	adc.w	r3, r5, r3
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030be:	4629      	mov	r1, r5
 80030c0:	028b      	lsls	r3, r1, #10
 80030c2:	4621      	mov	r1, r4
 80030c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030c8:	4621      	mov	r1, r4
 80030ca:	028a      	lsls	r2, r1, #10
 80030cc:	4610      	mov	r0, r2
 80030ce:	4619      	mov	r1, r3
 80030d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030d2:	2200      	movs	r2, #0
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	61fa      	str	r2, [r7, #28]
 80030d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030dc:	f7fd f87a 	bl	80001d4 <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4613      	mov	r3, r2
 80030e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	0c1b      	lsrs	r3, r3, #16
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	3301      	adds	r3, #1
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80030f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003102:	e002      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4b05      	ldr	r3, [pc, #20]	@ (800311c <HAL_RCC_GetSysClockFreq+0x204>)
 8003106:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800310c:	4618      	mov	r0, r3
 800310e:	3750      	adds	r7, #80	@ 0x50
 8003110:	46bd      	mov	sp, r7
 8003112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800
 800311c:	00f42400 	.word	0x00f42400
 8003120:	007a1200 	.word	0x007a1200

08003124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003128:	4b03      	ldr	r3, [pc, #12]	@ (8003138 <HAL_RCC_GetHCLKFreq+0x14>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000000 	.word	0x20000000

0800313c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003140:	f7ff fff0 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 8003144:	4602      	mov	r2, r0
 8003146:	4b05      	ldr	r3, [pc, #20]	@ (800315c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	0a9b      	lsrs	r3, r3, #10
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	4903      	ldr	r1, [pc, #12]	@ (8003160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003152:	5ccb      	ldrb	r3, [r1, r3]
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40023800 	.word	0x40023800
 8003160:	080037a4 	.word	0x080037a4

08003164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003168:	f7ff ffdc 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	0b5b      	lsrs	r3, r3, #13
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	4903      	ldr	r1, [pc, #12]	@ (8003188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40023800 	.word	0x40023800
 8003188:	080037a4 	.word	0x080037a4

0800318c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e042      	b.n	8003224 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fd ffc0 	bl	8001138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2224      	movs	r2, #36	@ 0x24
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f82b 	bl	800322c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800322c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003230:	b0c0      	sub	sp, #256	@ 0x100
 8003232:	af00      	add	r7, sp, #0
 8003234:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003248:	68d9      	ldr	r1, [r3, #12]
 800324a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	ea40 0301 	orr.w	r3, r0, r1
 8003254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	431a      	orrs	r2, r3
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	431a      	orrs	r2, r3
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003284:	f021 010c 	bic.w	r1, r1, #12
 8003288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003292:	430b      	orrs	r3, r1
 8003294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80032a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a6:	6999      	ldr	r1, [r3, #24]
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	ea40 0301 	orr.w	r3, r0, r1
 80032b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4b8f      	ldr	r3, [pc, #572]	@ (80034f8 <UART_SetConfig+0x2cc>)
 80032bc:	429a      	cmp	r2, r3
 80032be:	d005      	beq.n	80032cc <UART_SetConfig+0xa0>
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4b8d      	ldr	r3, [pc, #564]	@ (80034fc <UART_SetConfig+0x2d0>)
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d104      	bne.n	80032d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032cc:	f7ff ff4a 	bl	8003164 <HAL_RCC_GetPCLK2Freq>
 80032d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80032d4:	e003      	b.n	80032de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032d6:	f7ff ff31 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 80032da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032e8:	f040 810c 	bne.w	8003504 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032f0:	2200      	movs	r2, #0
 80032f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80032f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80032fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80032fe:	4622      	mov	r2, r4
 8003300:	462b      	mov	r3, r5
 8003302:	1891      	adds	r1, r2, r2
 8003304:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003306:	415b      	adcs	r3, r3
 8003308:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800330a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800330e:	4621      	mov	r1, r4
 8003310:	eb12 0801 	adds.w	r8, r2, r1
 8003314:	4629      	mov	r1, r5
 8003316:	eb43 0901 	adc.w	r9, r3, r1
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800332a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800332e:	4690      	mov	r8, r2
 8003330:	4699      	mov	r9, r3
 8003332:	4623      	mov	r3, r4
 8003334:	eb18 0303 	adds.w	r3, r8, r3
 8003338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800333c:	462b      	mov	r3, r5
 800333e:	eb49 0303 	adc.w	r3, r9, r3
 8003342:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003352:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003356:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800335a:	460b      	mov	r3, r1
 800335c:	18db      	adds	r3, r3, r3
 800335e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003360:	4613      	mov	r3, r2
 8003362:	eb42 0303 	adc.w	r3, r2, r3
 8003366:	657b      	str	r3, [r7, #84]	@ 0x54
 8003368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800336c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003370:	f7fc ff30 	bl	80001d4 <__aeabi_uldivmod>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4b61      	ldr	r3, [pc, #388]	@ (8003500 <UART_SetConfig+0x2d4>)
 800337a:	fba3 2302 	umull	r2, r3, r3, r2
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	011c      	lsls	r4, r3, #4
 8003382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003386:	2200      	movs	r2, #0
 8003388:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800338c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003394:	4642      	mov	r2, r8
 8003396:	464b      	mov	r3, r9
 8003398:	1891      	adds	r1, r2, r2
 800339a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800339c:	415b      	adcs	r3, r3
 800339e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033a4:	4641      	mov	r1, r8
 80033a6:	eb12 0a01 	adds.w	sl, r2, r1
 80033aa:	4649      	mov	r1, r9
 80033ac:	eb43 0b01 	adc.w	fp, r3, r1
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033c4:	4692      	mov	sl, r2
 80033c6:	469b      	mov	fp, r3
 80033c8:	4643      	mov	r3, r8
 80033ca:	eb1a 0303 	adds.w	r3, sl, r3
 80033ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033d2:	464b      	mov	r3, r9
 80033d4:	eb4b 0303 	adc.w	r3, fp, r3
 80033d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80033ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80033f0:	460b      	mov	r3, r1
 80033f2:	18db      	adds	r3, r3, r3
 80033f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80033f6:	4613      	mov	r3, r2
 80033f8:	eb42 0303 	adc.w	r3, r2, r3
 80033fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80033fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003402:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003406:	f7fc fee5 	bl	80001d4 <__aeabi_uldivmod>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4611      	mov	r1, r2
 8003410:	4b3b      	ldr	r3, [pc, #236]	@ (8003500 <UART_SetConfig+0x2d4>)
 8003412:	fba3 2301 	umull	r2, r3, r3, r1
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2264      	movs	r2, #100	@ 0x64
 800341a:	fb02 f303 	mul.w	r3, r2, r3
 800341e:	1acb      	subs	r3, r1, r3
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003426:	4b36      	ldr	r3, [pc, #216]	@ (8003500 <UART_SetConfig+0x2d4>)
 8003428:	fba3 2302 	umull	r2, r3, r3, r2
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003434:	441c      	add	r4, r3
 8003436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800343a:	2200      	movs	r2, #0
 800343c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003440:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003444:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003448:	4642      	mov	r2, r8
 800344a:	464b      	mov	r3, r9
 800344c:	1891      	adds	r1, r2, r2
 800344e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003450:	415b      	adcs	r3, r3
 8003452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003458:	4641      	mov	r1, r8
 800345a:	1851      	adds	r1, r2, r1
 800345c:	6339      	str	r1, [r7, #48]	@ 0x30
 800345e:	4649      	mov	r1, r9
 8003460:	414b      	adcs	r3, r1
 8003462:	637b      	str	r3, [r7, #52]	@ 0x34
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003470:	4659      	mov	r1, fp
 8003472:	00cb      	lsls	r3, r1, #3
 8003474:	4651      	mov	r1, sl
 8003476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800347a:	4651      	mov	r1, sl
 800347c:	00ca      	lsls	r2, r1, #3
 800347e:	4610      	mov	r0, r2
 8003480:	4619      	mov	r1, r3
 8003482:	4603      	mov	r3, r0
 8003484:	4642      	mov	r2, r8
 8003486:	189b      	adds	r3, r3, r2
 8003488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800348c:	464b      	mov	r3, r9
 800348e:	460a      	mov	r2, r1
 8003490:	eb42 0303 	adc.w	r3, r2, r3
 8003494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80034a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034ac:	460b      	mov	r3, r1
 80034ae:	18db      	adds	r3, r3, r3
 80034b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034b2:	4613      	mov	r3, r2
 80034b4:	eb42 0303 	adc.w	r3, r2, r3
 80034b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80034c2:	f7fc fe87 	bl	80001d4 <__aeabi_uldivmod>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003500 <UART_SetConfig+0x2d4>)
 80034cc:	fba3 1302 	umull	r1, r3, r3, r2
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	2164      	movs	r1, #100	@ 0x64
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	3332      	adds	r3, #50	@ 0x32
 80034de:	4a08      	ldr	r2, [pc, #32]	@ (8003500 <UART_SetConfig+0x2d4>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	f003 0207 	and.w	r2, r3, #7
 80034ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4422      	add	r2, r4
 80034f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034f4:	e106      	b.n	8003704 <UART_SetConfig+0x4d8>
 80034f6:	bf00      	nop
 80034f8:	40011000 	.word	0x40011000
 80034fc:	40011400 	.word	0x40011400
 8003500:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003508:	2200      	movs	r2, #0
 800350a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800350e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003512:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003516:	4642      	mov	r2, r8
 8003518:	464b      	mov	r3, r9
 800351a:	1891      	adds	r1, r2, r2
 800351c:	6239      	str	r1, [r7, #32]
 800351e:	415b      	adcs	r3, r3
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
 8003522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003526:	4641      	mov	r1, r8
 8003528:	1854      	adds	r4, r2, r1
 800352a:	4649      	mov	r1, r9
 800352c:	eb43 0501 	adc.w	r5, r3, r1
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	00eb      	lsls	r3, r5, #3
 800353a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800353e:	00e2      	lsls	r2, r4, #3
 8003540:	4614      	mov	r4, r2
 8003542:	461d      	mov	r5, r3
 8003544:	4643      	mov	r3, r8
 8003546:	18e3      	adds	r3, r4, r3
 8003548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800354c:	464b      	mov	r3, r9
 800354e:	eb45 0303 	adc.w	r3, r5, r3
 8003552:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003562:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003572:	4629      	mov	r1, r5
 8003574:	008b      	lsls	r3, r1, #2
 8003576:	4621      	mov	r1, r4
 8003578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800357c:	4621      	mov	r1, r4
 800357e:	008a      	lsls	r2, r1, #2
 8003580:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003584:	f7fc fe26 	bl	80001d4 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4b60      	ldr	r3, [pc, #384]	@ (8003710 <UART_SetConfig+0x4e4>)
 800358e:	fba3 2302 	umull	r2, r3, r3, r2
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	011c      	lsls	r4, r3, #4
 8003596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800359a:	2200      	movs	r2, #0
 800359c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80035a8:	4642      	mov	r2, r8
 80035aa:	464b      	mov	r3, r9
 80035ac:	1891      	adds	r1, r2, r2
 80035ae:	61b9      	str	r1, [r7, #24]
 80035b0:	415b      	adcs	r3, r3
 80035b2:	61fb      	str	r3, [r7, #28]
 80035b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035b8:	4641      	mov	r1, r8
 80035ba:	1851      	adds	r1, r2, r1
 80035bc:	6139      	str	r1, [r7, #16]
 80035be:	4649      	mov	r1, r9
 80035c0:	414b      	adcs	r3, r1
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035d0:	4659      	mov	r1, fp
 80035d2:	00cb      	lsls	r3, r1, #3
 80035d4:	4651      	mov	r1, sl
 80035d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035da:	4651      	mov	r1, sl
 80035dc:	00ca      	lsls	r2, r1, #3
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	4603      	mov	r3, r0
 80035e4:	4642      	mov	r2, r8
 80035e6:	189b      	adds	r3, r3, r2
 80035e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035ec:	464b      	mov	r3, r9
 80035ee:	460a      	mov	r2, r1
 80035f0:	eb42 0303 	adc.w	r3, r2, r3
 80035f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003602:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003610:	4649      	mov	r1, r9
 8003612:	008b      	lsls	r3, r1, #2
 8003614:	4641      	mov	r1, r8
 8003616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800361a:	4641      	mov	r1, r8
 800361c:	008a      	lsls	r2, r1, #2
 800361e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003622:	f7fc fdd7 	bl	80001d4 <__aeabi_uldivmod>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4611      	mov	r1, r2
 800362c:	4b38      	ldr	r3, [pc, #224]	@ (8003710 <UART_SetConfig+0x4e4>)
 800362e:	fba3 2301 	umull	r2, r3, r3, r1
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	2264      	movs	r2, #100	@ 0x64
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	1acb      	subs	r3, r1, r3
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	3332      	adds	r3, #50	@ 0x32
 8003640:	4a33      	ldr	r2, [pc, #204]	@ (8003710 <UART_SetConfig+0x4e4>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800364c:	441c      	add	r4, r3
 800364e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003652:	2200      	movs	r2, #0
 8003654:	673b      	str	r3, [r7, #112]	@ 0x70
 8003656:	677a      	str	r2, [r7, #116]	@ 0x74
 8003658:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800365c:	4642      	mov	r2, r8
 800365e:	464b      	mov	r3, r9
 8003660:	1891      	adds	r1, r2, r2
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	415b      	adcs	r3, r3
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800366c:	4641      	mov	r1, r8
 800366e:	1851      	adds	r1, r2, r1
 8003670:	6039      	str	r1, [r7, #0]
 8003672:	4649      	mov	r1, r9
 8003674:	414b      	adcs	r3, r1
 8003676:	607b      	str	r3, [r7, #4]
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003684:	4659      	mov	r1, fp
 8003686:	00cb      	lsls	r3, r1, #3
 8003688:	4651      	mov	r1, sl
 800368a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800368e:	4651      	mov	r1, sl
 8003690:	00ca      	lsls	r2, r1, #3
 8003692:	4610      	mov	r0, r2
 8003694:	4619      	mov	r1, r3
 8003696:	4603      	mov	r3, r0
 8003698:	4642      	mov	r2, r8
 800369a:	189b      	adds	r3, r3, r2
 800369c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800369e:	464b      	mov	r3, r9
 80036a0:	460a      	mov	r2, r1
 80036a2:	eb42 0303 	adc.w	r3, r2, r3
 80036a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80036b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80036c0:	4649      	mov	r1, r9
 80036c2:	008b      	lsls	r3, r1, #2
 80036c4:	4641      	mov	r1, r8
 80036c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ca:	4641      	mov	r1, r8
 80036cc:	008a      	lsls	r2, r1, #2
 80036ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80036d2:	f7fc fd7f 	bl	80001d4 <__aeabi_uldivmod>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4b0d      	ldr	r3, [pc, #52]	@ (8003710 <UART_SetConfig+0x4e4>)
 80036dc:	fba3 1302 	umull	r1, r3, r3, r2
 80036e0:	095b      	lsrs	r3, r3, #5
 80036e2:	2164      	movs	r1, #100	@ 0x64
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	3332      	adds	r3, #50	@ 0x32
 80036ee:	4a08      	ldr	r2, [pc, #32]	@ (8003710 <UART_SetConfig+0x4e4>)
 80036f0:	fba2 2303 	umull	r2, r3, r2, r3
 80036f4:	095b      	lsrs	r3, r3, #5
 80036f6:	f003 020f 	and.w	r2, r3, #15
 80036fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4422      	add	r2, r4
 8003702:	609a      	str	r2, [r3, #8]
}
 8003704:	bf00      	nop
 8003706:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800370a:	46bd      	mov	sp, r7
 800370c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003710:	51eb851f 	.word	0x51eb851f

08003714 <memset>:
 8003714:	4402      	add	r2, r0
 8003716:	4603      	mov	r3, r0
 8003718:	4293      	cmp	r3, r2
 800371a:	d100      	bne.n	800371e <memset+0xa>
 800371c:	4770      	bx	lr
 800371e:	f803 1b01 	strb.w	r1, [r3], #1
 8003722:	e7f9      	b.n	8003718 <memset+0x4>

08003724 <__libc_init_array>:
 8003724:	b570      	push	{r4, r5, r6, lr}
 8003726:	4d0d      	ldr	r5, [pc, #52]	@ (800375c <__libc_init_array+0x38>)
 8003728:	4c0d      	ldr	r4, [pc, #52]	@ (8003760 <__libc_init_array+0x3c>)
 800372a:	1b64      	subs	r4, r4, r5
 800372c:	10a4      	asrs	r4, r4, #2
 800372e:	2600      	movs	r6, #0
 8003730:	42a6      	cmp	r6, r4
 8003732:	d109      	bne.n	8003748 <__libc_init_array+0x24>
 8003734:	4d0b      	ldr	r5, [pc, #44]	@ (8003764 <__libc_init_array+0x40>)
 8003736:	4c0c      	ldr	r4, [pc, #48]	@ (8003768 <__libc_init_array+0x44>)
 8003738:	f000 f818 	bl	800376c <_init>
 800373c:	1b64      	subs	r4, r4, r5
 800373e:	10a4      	asrs	r4, r4, #2
 8003740:	2600      	movs	r6, #0
 8003742:	42a6      	cmp	r6, r4
 8003744:	d105      	bne.n	8003752 <__libc_init_array+0x2e>
 8003746:	bd70      	pop	{r4, r5, r6, pc}
 8003748:	f855 3b04 	ldr.w	r3, [r5], #4
 800374c:	4798      	blx	r3
 800374e:	3601      	adds	r6, #1
 8003750:	e7ee      	b.n	8003730 <__libc_init_array+0xc>
 8003752:	f855 3b04 	ldr.w	r3, [r5], #4
 8003756:	4798      	blx	r3
 8003758:	3601      	adds	r6, #1
 800375a:	e7f2      	b.n	8003742 <__libc_init_array+0x1e>
 800375c:	08004dbc 	.word	0x08004dbc
 8003760:	08004dbc 	.word	0x08004dbc
 8003764:	08004dbc 	.word	0x08004dbc
 8003768:	08004dc0 	.word	0x08004dc0

0800376c <_init>:
 800376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376e:	bf00      	nop
 8003770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003772:	bc08      	pop	{r3}
 8003774:	469e      	mov	lr, r3
 8003776:	4770      	bx	lr

08003778 <_fini>:
 8003778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377a:	bf00      	nop
 800377c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377e:	bc08      	pop	{r3}
 8003780:	469e      	mov	lr, r3
 8003782:	4770      	bx	lr
