
oledControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ab0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001020  08003c44  08003c44  00004c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c64  08004c64  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004c64  08004c64  00005c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c6c  08004c6c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c6c  08004c6c  00005c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c70  08004c70  00005c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004c74  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  20000068  08004cdc  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08004cdc  0000667c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bee8  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec8  00000000  00000000  00011f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  00013e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ca  00000000  00000000  000149b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fa7  00000000  00000000  00015282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d844  00000000  00000000  0002c229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a3f8  00000000  00000000  00039a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3e65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003518  00000000  00000000  000c3ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000c73c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003c2c 	.word	0x08003c2c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	08003c2c 	.word	0x08003c2c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <hurt>:

//
// Negative Actions
//

static void hurt(game* game, int amount) {
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
	if (game->health >= amount) {
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	683a      	ldr	r2, [r7, #0]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	dc06      	bgt.n	80004e6 <hurt+0x22>
		game->health -= amount;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	1ad2      	subs	r2, r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	601a      	str	r2, [r3, #0]
	}
	else {
		game->health = 0;
	}
}
 80004e4:	e002      	b.n	80004ec <hurt+0x28>
		game->health = 0;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <bore>:

static void bore(game* game, int amount) {
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
	if (game->happiness >= amount) {
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	683a      	ldr	r2, [r7, #0]
 8000508:	429a      	cmp	r2, r3
 800050a:	dc06      	bgt.n	800051a <bore+0x22>
		game->happiness -= amount;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	689a      	ldr	r2, [r3, #8]
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	1ad2      	subs	r2, r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	609a      	str	r2, [r3, #8]
	}
	else {
		game->happiness = 0;
	}
}
 8000518:	e002      	b.n	8000520 <bore+0x28>
		game->happiness = 0;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <starve>:

static void starve(game* game, int amount) {
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
	if (game->hunger >= amount) {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	683a      	ldr	r2, [r7, #0]
 800053c:	429a      	cmp	r2, r3
 800053e:	dc06      	bgt.n	800054e <starve+0x22>
		game->hunger -= amount;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	685a      	ldr	r2, [r3, #4]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	1ad2      	subs	r2, r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	605a      	str	r2, [r3, #4]
	}
	else {
		game->hunger = 0;
	}
}
 800054c:	e002      	b.n	8000554 <starve+0x28>
		game->hunger = 0;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2200      	movs	r2, #0
 8000552:	605a      	str	r2, [r3, #4]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <heal>:

//
// Positive Actions
//

static void heal(game* game, int amount) {
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	if ((game->health + amount) > HEALTH_MAX) {
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	4413      	add	r3, r2
 8000572:	2b3c      	cmp	r3, #60	@ 0x3c
 8000574:	dd03      	ble.n	800057e <heal+0x1e>
		game->health = HEALTH_MAX;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	223c      	movs	r2, #60	@ 0x3c
 800057a:	601a      	str	r2, [r3, #0]
	}
	else {
		game->health += amount;
	}
}
 800057c:	e005      	b.n	800058a <heal+0x2a>
		game->health += amount;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	441a      	add	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	601a      	str	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <eat>:

static void eat(game* game, int amount) {
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	6039      	str	r1, [r7, #0]
	if ((game->hunger + amount) > HUNGER_MAX) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	4413      	add	r3, r2
 80005a8:	2b3c      	cmp	r3, #60	@ 0x3c
 80005aa:	dd03      	ble.n	80005b4 <eat+0x1e>
		game->hunger = HUNGER_MAX;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	223c      	movs	r2, #60	@ 0x3c
 80005b0:	605a      	str	r2, [r3, #4]
	}
	else {
		game->hunger += amount;
	}
}
 80005b2:	e005      	b.n	80005c0 <eat+0x2a>
		game->hunger += amount;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	685a      	ldr	r2, [r3, #4]
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	441a      	add	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	605a      	str	r2, [r3, #4]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <play>:

static void play(game* game, int amount) {
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
	if ((game->happiness + amount) > HAPPINESS_MAX) {
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	689a      	ldr	r2, [r3, #8]
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	4413      	add	r3, r2
 80005de:	2b3c      	cmp	r3, #60	@ 0x3c
 80005e0:	dd03      	ble.n	80005ea <play+0x1e>
		game->happiness = HAPPINESS_MAX;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	223c      	movs	r2, #60	@ 0x3c
 80005e6:	609a      	str	r2, [r3, #8]
	}
	else {
		game->happiness += amount;
	}
}
 80005e8:	e005      	b.n	80005f6 <play+0x2a>
		game->happiness += amount;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689a      	ldr	r2, [r3, #8]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	441a      	add	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	609a      	str	r2, [r3, #8]
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <checkMood>:

//
//  Returns current mood of the mon
//

static Mood checkMood(struct game* self) {
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    int overall = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
    overall += self->health;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
    overall += self->hunger;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	4413      	add	r3, r2
 8000622:	60fb      	str	r3, [r7, #12]
    overall += self->happiness;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	4413      	add	r3, r2
 800062c:	60fb      	str	r3, [r7, #12]
    overall /= 3;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	4a0d      	ldr	r2, [pc, #52]	@ (8000668 <checkMood+0x64>)
 8000632:	fb82 1203 	smull	r1, r2, r2, r3
 8000636:	17db      	asrs	r3, r3, #31
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	60fb      	str	r3, [r7, #12]

    if (overall <= 15){
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	2b0f      	cmp	r3, #15
 8000640:	dc01      	bgt.n	8000646 <checkMood+0x42>
        return MOOD_SERIOUS;
 8000642:	2300      	movs	r3, #0
 8000644:	e00a      	b.n	800065c <checkMood+0x58>
    }
    if (overall <= 30){
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2b1e      	cmp	r3, #30
 800064a:	dc01      	bgt.n	8000650 <checkMood+0x4c>
        return MOOD_UNHAPPY;
 800064c:	2301      	movs	r3, #1
 800064e:	e005      	b.n	800065c <checkMood+0x58>
    }
    if (overall <= 45){
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	2b2d      	cmp	r3, #45	@ 0x2d
 8000654:	dc01      	bgt.n	800065a <checkMood+0x56>
        return MOOD_HAPPY;
 8000656:	2302      	movs	r3, #2
 8000658:	e000      	b.n	800065c <checkMood+0x58>
    }
    else{
        return MOOD_CUTE;
 800065a:	2303      	movs	r3, #3
    }
}
 800065c:	4618      	mov	r0, r3
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	55555556 	.word	0x55555556

0800066c <switchAction>:

void switchAction(struct game* self) {
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	if (self->actionType == ACTION_GOOD) {
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d103      	bne.n	8000684 <switchAction+0x18>
		self->actionType = ACTION_EVIL;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2201      	movs	r2, #1
 8000680:	60da      	str	r2, [r3, #12]
	}
	else
		self->actionType = ACTION_GOOD;
}
 8000682:	e002      	b.n	800068a <switchAction+0x1e>
		self->actionType = ACTION_GOOD;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <resolveHunger>:

void resolveHunger(game* self) {
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
	self->actionType == ACTION_GOOD ? eat(self, ACTION_AMT) : starve(self, ACTION_AMT);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	68db      	ldr	r3, [r3, #12]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d104      	bne.n	80006b0 <resolveHunger+0x1a>
 80006a6:	210a      	movs	r1, #10
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff ff74 	bl	8000596 <eat>
}
 80006ae:	e003      	b.n	80006b8 <resolveHunger+0x22>
	self->actionType == ACTION_GOOD ? eat(self, ACTION_AMT) : starve(self, ACTION_AMT);
 80006b0:	210a      	movs	r1, #10
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff ff3a 	bl	800052c <starve>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <resolveHealth>:

void resolveHealth(game* self) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	self->actionType == ACTION_GOOD ? heal(self, ACTION_AMT) : hurt(self, ACTION_AMT);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d104      	bne.n	80006da <resolveHealth+0x1a>
 80006d0:	210a      	movs	r1, #10
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff ff44 	bl	8000560 <heal>
}
 80006d8:	e003      	b.n	80006e2 <resolveHealth+0x22>
	self->actionType == ACTION_GOOD ? heal(self, ACTION_AMT) : hurt(self, ACTION_AMT);
 80006da:	210a      	movs	r1, #10
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff fef1 	bl	80004c4 <hurt>
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <resolveHappiness>:

void resolveHappiness(game* self) {
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
	self->actionType == ACTION_GOOD ? play(self, ACTION_AMT) : bore(self, ACTION_AMT);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	68db      	ldr	r3, [r3, #12]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d104      	bne.n	8000704 <resolveHappiness+0x1a>
 80006fa:	210a      	movs	r1, #10
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff ff65 	bl	80005cc <play>
}
 8000702:	e003      	b.n	800070c <resolveHappiness+0x22>
	self->actionType == ACTION_GOOD ? play(self, ACTION_AMT) : bore(self, ACTION_AMT);
 8000704:	210a      	movs	r1, #10
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff fef6 	bl	80004f8 <bore>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <game_init>:




void game_init(game* game, int health, int hunger, int happiness) {
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	603b      	str	r3, [r7, #0]
	game->health = health;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	68ba      	ldr	r2, [r7, #8]
 8000726:	601a      	str	r2, [r3, #0]
	game->hunger = hunger;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	605a      	str	r2, [r3, #4]
	game->happiness = happiness;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	609a      	str	r2, [r3, #8]

	game->actionType = ACTION_EVIL;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2201      	movs	r2, #1
 8000738:	60da      	str	r2, [r3, #12]
	game->switchAction = switchAction;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	4a09      	ldr	r2, [pc, #36]	@ (8000764 <game_init+0x50>)
 800073e:	611a      	str	r2, [r3, #16]

	game->resolveHunger = resolveHunger;
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	4a09      	ldr	r2, [pc, #36]	@ (8000768 <game_init+0x54>)
 8000744:	619a      	str	r2, [r3, #24]
	game->resolveHappiness = resolveHappiness;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4a08      	ldr	r2, [pc, #32]	@ (800076c <game_init+0x58>)
 800074a:	621a      	str	r2, [r3, #32]
	game->resolveHealth = resolveHealth;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	4a08      	ldr	r2, [pc, #32]	@ (8000770 <game_init+0x5c>)
 8000750:	61da      	str	r2, [r3, #28]

	game->checkMood = checkMood;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	4a07      	ldr	r2, [pc, #28]	@ (8000774 <game_init+0x60>)
 8000756:	615a      	str	r2, [r3, #20]

}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	0800066d 	.word	0x0800066d
 8000768:	08000697 	.word	0x08000697
 800076c:	080006eb 	.word	0x080006eb
 8000770:	080006c1 	.word	0x080006c1
 8000774:	08000605 	.word	0x08000605

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b092      	sub	sp, #72	@ 0x48
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077e:	f000 fe6d 	bl	800145c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000782:	f000 f865 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000786:	f000 f927 	bl	80009d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800078a:	f000 f8fb 	bl	8000984 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800078e:	f000 f8cb 	bl	8000928 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  game Game;
  game_init(&Game, 60,60,60);
 8000792:	f107 0014 	add.w	r0, r7, #20
 8000796:	233c      	movs	r3, #60	@ 0x3c
 8000798:	223c      	movs	r2, #60	@ 0x3c
 800079a:	213c      	movs	r1, #60	@ 0x3c
 800079c:	f7ff ffba 	bl	8000714 <game_init>

  render Render;
  render_init(&Render);
 80007a0:	463b      	mov	r3, r7
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fa5e 	bl	8000c64 <render_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      state1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80007a8:	2120      	movs	r1, #32
 80007aa:	4827      	ldr	r0, [pc, #156]	@ (8000848 <main+0xd0>)
 80007ac:	f001 f956 	bl	8001a5c <HAL_GPIO_ReadPin>
 80007b0:	4603      	mov	r3, r0
 80007b2:	647b      	str	r3, [r7, #68]	@ 0x44
      state2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 80007b4:	2140      	movs	r1, #64	@ 0x40
 80007b6:	4824      	ldr	r0, [pc, #144]	@ (8000848 <main+0xd0>)
 80007b8:	f001 f950 	bl	8001a5c <HAL_GPIO_ReadPin>
 80007bc:	4603      	mov	r3, r0
 80007be:	643b      	str	r3, [r7, #64]	@ 0x40
      state3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 80007c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007c4:	4820      	ldr	r0, [pc, #128]	@ (8000848 <main+0xd0>)
 80007c6:	f001 f949 	bl	8001a5c <HAL_GPIO_ReadPin>
 80007ca:	4603      	mov	r3, r0
 80007cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      state4 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 80007ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007d2:	481d      	ldr	r0, [pc, #116]	@ (8000848 <main+0xd0>)
 80007d4:	f001 f942 	bl	8001a5c <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	63bb      	str	r3, [r7, #56]	@ 0x38


      if (state1) {
 80007dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d007      	beq.n	80007f2 <main+0x7a>
    	  Game.resolveHappiness(&Game);
 80007e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007e4:	f107 0214 	add.w	r2, r7, #20
 80007e8:	4610      	mov	r0, r2
 80007ea:	4798      	blx	r3
    	  printf("called\n");
 80007ec:	4817      	ldr	r0, [pc, #92]	@ (800084c <main+0xd4>)
 80007ee:	f002 fe89 	bl	8003504 <puts>
      }
      if (state2) {
 80007f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d007      	beq.n	8000808 <main+0x90>
    	  Game.resolveHunger(&Game);
 80007f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007fa:	f107 0214 	add.w	r2, r7, #20
 80007fe:	4610      	mov	r0, r2
 8000800:	4798      	blx	r3
    	  printf("called\n");
 8000802:	4812      	ldr	r0, [pc, #72]	@ (800084c <main+0xd4>)
 8000804:	f002 fe7e 	bl	8003504 <puts>
      }
      if (state3) {
 8000808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800080a:	2b00      	cmp	r3, #0
 800080c:	d007      	beq.n	800081e <main+0xa6>
    	  Game.resolveHealth(&Game);
 800080e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000810:	f107 0214 	add.w	r2, r7, #20
 8000814:	4610      	mov	r0, r2
 8000816:	4798      	blx	r3
    	  printf("called\n");
 8000818:	480c      	ldr	r0, [pc, #48]	@ (800084c <main+0xd4>)
 800081a:	f002 fe73 	bl	8003504 <puts>
      }
      if (state4) {
 800081e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000820:	2b00      	cmp	r3, #0
 8000822:	d007      	beq.n	8000834 <main+0xbc>
          Game.switchAction(&Game);
 8000824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000826:	f107 0214 	add.w	r2, r7, #20
 800082a:	4610      	mov	r0, r2
 800082c:	4798      	blx	r3
    	  printf("called\n");
 800082e:	4807      	ldr	r0, [pc, #28]	@ (800084c <main+0xd4>)
 8000830:	f002 fe68 	bl	8003504 <puts>
      }

      Render.displayScreen(&Game);
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	f107 0214 	add.w	r2, r7, #20
 800083a:	4610      	mov	r0, r2
 800083c:	4798      	blx	r3
      HAL_Delay(50);
 800083e:	2032      	movs	r0, #50	@ 0x32
 8000840:	f000 fe7e 	bl	8001540 <HAL_Delay>
      state1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8000844:	e7b0      	b.n	80007a8 <main+0x30>
 8000846:	bf00      	nop
 8000848:	40020800 	.word	0x40020800
 800084c:	08003c44 	.word	0x08003c44

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	@ 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	2230      	movs	r2, #48	@ 0x30
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f002 ff30 	bl	80036c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	4b29      	ldr	r3, [pc, #164]	@ (8000920 <SystemClock_Config+0xd0>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	4a28      	ldr	r2, [pc, #160]	@ (8000920 <SystemClock_Config+0xd0>)
 800087e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000882:	6413      	str	r3, [r2, #64]	@ 0x40
 8000884:	4b26      	ldr	r3, [pc, #152]	@ (8000920 <SystemClock_Config+0xd0>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <SystemClock_Config+0xd4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800089c:	4a21      	ldr	r2, [pc, #132]	@ (8000924 <SystemClock_Config+0xd4>)
 800089e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <SystemClock_Config+0xd4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b4:	2301      	movs	r3, #1
 80008b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b8:	2310      	movs	r3, #16
 80008ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008bc:	2302      	movs	r3, #2
 80008be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c0:	2300      	movs	r3, #0
 80008c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008c4:	2310      	movs	r3, #16
 80008c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ce:	2304      	movs	r3, #4
 80008d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008d2:	2307      	movs	r3, #7
 80008d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fd9e 	bl	800241c <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008e6:	f000 f8f3 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	230f      	movs	r3, #15
 80008ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ee:	2302      	movs	r3, #2
 80008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2102      	movs	r1, #2
 8000906:	4618      	mov	r0, r3
 8000908:	f002 f800 	bl	800290c <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000912:	f000 f8dd 	bl	8000ad0 <Error_Handler>
  }
}
 8000916:	bf00      	nop
 8000918:	3750      	adds	r7, #80	@ 0x50
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40007000 	.word	0x40007000

08000928 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_I2C1_Init+0x50>)
 800092e:	4a13      	ldr	r2, [pc, #76]	@ (800097c <MX_I2C1_Init+0x54>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000934:	4a12      	ldr	r2, [pc, #72]	@ (8000980 <MX_I2C1_Init+0x58>)
 8000936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_I2C1_Init+0x50>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000946:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800094a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <MX_I2C1_Init+0x50>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <MX_I2C1_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000966:	f001 f8ab 	bl	8001ac0 <HAL_I2C_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000970:	f000 f8ae 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000084 	.word	0x20000084
 800097c:	40005400 	.word	0x40005400
 8000980:	000186a0 	.word	0x000186a0

08000984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 800098a:	4a12      	ldr	r2, [pc, #72]	@ (80009d4 <MX_USART2_UART_Init+0x50>)
 800098c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009bc:	f002 f9c6 	bl	8002d4c <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009c6:	f000 f883 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000d8 	.word	0x200000d8
 80009d4:	40004400 	.word	0x40004400

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b34      	ldr	r3, [pc, #208]	@ (8000ac4 <MX_GPIO_Init+0xec>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a33      	ldr	r2, [pc, #204]	@ (8000ac4 <MX_GPIO_Init+0xec>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b31      	ldr	r3, [pc, #196]	@ (8000ac4 <MX_GPIO_Init+0xec>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac4 <MX_GPIO_Init+0xec>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a2c      	ldr	r2, [pc, #176]	@ (8000ac4 <MX_GPIO_Init+0xec>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <MX_GPIO_Init+0xec>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <MX_GPIO_Init+0xec>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a25      	ldr	r2, [pc, #148]	@ (8000ac4 <MX_GPIO_Init+0xec>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b23      	ldr	r3, [pc, #140]	@ (8000ac4 <MX_GPIO_Init+0xec>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <MX_GPIO_Init+0xec>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac4 <MX_GPIO_Init+0xec>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <MX_GPIO_Init+0xec>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2120      	movs	r1, #32
 8000a62:	4819      	ldr	r0, [pc, #100]	@ (8000ac8 <MX_GPIO_Init+0xf0>)
 8000a64:	f001 f812 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a6e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4813      	ldr	r0, [pc, #76]	@ (8000acc <MX_GPIO_Init+0xf4>)
 8000a80:	f000 fe68 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a84:	2320      	movs	r3, #32
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480b      	ldr	r0, [pc, #44]	@ (8000ac8 <MX_GPIO_Init+0xf0>)
 8000a9c:	f000 fe5a 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 Button_Pin PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|Button_Pin|GPIO_PIN_9;
 8000aa0:	f44f 7358 	mov.w	r3, #864	@ 0x360
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	@ (8000acc <MX_GPIO_Init+0xf4>)
 8000ab6:	f000 fe4d 	bl	8001754 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aba:	bf00      	nop
 8000abc:	3728      	adds	r7, #40	@ 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020800 	.word	0x40020800

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <Error_Handler+0x8>

08000adc <displayHealth>:
 */
#include "render.h"

const int STARTING_Y = 2;

void displayHealth(game* game) {
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	6078      	str	r0, [r7, #4]
	const int STARTING_X = 2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	60fb      	str	r3, [r7, #12]
	ssd1306_FillRectangle(STARTING_X, STARTING_Y, STARTING_X + 1, game->health + STARTING_Y, Black);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	b2d8      	uxtb	r0, r3
 8000aec:	2302      	movs	r3, #2
 8000aee:	b2d9      	uxtb	r1, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	3301      	adds	r3, #1
 8000af6:	b2dc      	uxtb	r4, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	2302      	movs	r3, #2
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4413      	add	r3, r2
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2200      	movs	r2, #0
 8000b08:	9200      	str	r2, [sp, #0]
 8000b0a:	4622      	mov	r2, r4
 8000b0c:	f000 fbcc 	bl	80012a8 <ssd1306_FillRectangle>
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd90      	pop	{r4, r7, pc}

08000b18 <displayHunger>:

void displayHunger(game* game) {
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	6078      	str	r0, [r7, #4]
	const int STARTING_X = 6;
 8000b20:	2306      	movs	r3, #6
 8000b22:	60fb      	str	r3, [r7, #12]
	ssd1306_FillRectangle(STARTING_X, STARTING_Y, STARTING_X + 1, game->hunger + STARTING_Y, Black);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	b2d8      	uxtb	r0, r3
 8000b28:	2302      	movs	r3, #2
 8000b2a:	b2d9      	uxtb	r1, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	3301      	adds	r3, #1
 8000b32:	b2dc      	uxtb	r4, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4413      	add	r3, r2
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2200      	movs	r2, #0
 8000b44:	9200      	str	r2, [sp, #0]
 8000b46:	4622      	mov	r2, r4
 8000b48:	f000 fbae 	bl	80012a8 <ssd1306_FillRectangle>
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}

08000b54 <displayHappiness>:

void displayHappiness(game* game) {
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b087      	sub	sp, #28
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	6078      	str	r0, [r7, #4]
	const int STARTING_X = 10;
 8000b5c:	230a      	movs	r3, #10
 8000b5e:	60fb      	str	r3, [r7, #12]
	ssd1306_FillRectangle(STARTING_X, STARTING_Y, STARTING_X + 1, game->happiness + STARTING_Y, Black);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	b2d8      	uxtb	r0, r3
 8000b64:	2302      	movs	r3, #2
 8000b66:	b2d9      	uxtb	r1, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b2dc      	uxtb	r4, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	2302      	movs	r3, #2
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	4413      	add	r3, r2
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2200      	movs	r2, #0
 8000b80:	9200      	str	r2, [sp, #0]
 8000b82:	4622      	mov	r2, r4
 8000b84:	f000 fb90 	bl	80012a8 <ssd1306_FillRectangle>
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd90      	pop	{r4, r7, pc}

08000b90 <displaySprite>:

void displaySprite(game* game){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af02      	add	r7, sp, #8
 8000b96:	6078      	str	r0, [r7, #4]
    Mood mood = game->checkMood(game);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	4798      	blx	r3
 8000ba0:	60f8      	str	r0, [r7, #12]
    switch (mood) {
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d837      	bhi.n	8000c18 <displaySprite+0x88>
 8000ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8000bb0 <displaySprite+0x20>)
 8000baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bae:	bf00      	nop
 8000bb0:	08000bc1 	.word	0x08000bc1
 8000bb4:	08000bd7 	.word	0x08000bd7
 8000bb8:	08000bed 	.word	0x08000bed
 8000bbc:	08000c03 	.word	0x08000c03
    case MOOD_SERIOUS:
      ssd1306_DrawBitmap(0,0, epd_bitmap_spriteSerious, SSD1306_WIDTH, SSD1306_HEIGHT, White);
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	2340      	movs	r3, #64	@ 0x40
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2380      	movs	r3, #128	@ 0x80
 8000bca:	4a15      	ldr	r2, [pc, #84]	@ (8000c20 <displaySprite+0x90>)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 fbb8 	bl	8001344 <ssd1306_DrawBitmap>
      break;
 8000bd4:	e020      	b.n	8000c18 <displaySprite+0x88>
    case MOOD_UNHAPPY:
      ssd1306_DrawBitmap(0,0, epd_bitmap_spriteUnhappy, SSD1306_WIDTH, SSD1306_HEIGHT, White);
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	9301      	str	r3, [sp, #4]
 8000bda:	2340      	movs	r3, #64	@ 0x40
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2380      	movs	r3, #128	@ 0x80
 8000be0:	4a10      	ldr	r2, [pc, #64]	@ (8000c24 <displaySprite+0x94>)
 8000be2:	2100      	movs	r1, #0
 8000be4:	2000      	movs	r0, #0
 8000be6:	f000 fbad 	bl	8001344 <ssd1306_DrawBitmap>
      break;
 8000bea:	e015      	b.n	8000c18 <displaySprite+0x88>
    case MOOD_HAPPY:
      ssd1306_DrawBitmap(0,0, epd_bitmap_spriteHappy, SSD1306_WIDTH, SSD1306_HEIGHT, White);
 8000bec:	2301      	movs	r3, #1
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	2340      	movs	r3, #64	@ 0x40
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2380      	movs	r3, #128	@ 0x80
 8000bf6:	4a0c      	ldr	r2, [pc, #48]	@ (8000c28 <displaySprite+0x98>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 fba2 	bl	8001344 <ssd1306_DrawBitmap>
      break;
 8000c00:	e00a      	b.n	8000c18 <displaySprite+0x88>
    case MOOD_CUTE:
      ssd1306_DrawBitmap(0,0, epd_bitmap_spriteCute, SSD1306_WIDTH, SSD1306_HEIGHT, White);
 8000c02:	2301      	movs	r3, #1
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	2340      	movs	r3, #64	@ 0x40
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2380      	movs	r3, #128	@ 0x80
 8000c0c:	4a07      	ldr	r2, [pc, #28]	@ (8000c2c <displaySprite+0x9c>)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	2000      	movs	r0, #0
 8000c12:	f000 fb97 	bl	8001344 <ssd1306_DrawBitmap>
      break;
 8000c16:	bf00      	nop
    }

}
 8000c18:	bf00      	nop
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	08004464 	.word	0x08004464
 8000c24:	08004064 	.word	0x08004064
 8000c28:	08003c64 	.word	0x08003c64
 8000c2c:	08004864 	.word	0x08004864

08000c30 <displayScreen>:

void displayScreen(game* game){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
    ssd1306_Fill(Black);
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f000 faa1 	bl	8001180 <ssd1306_Fill>
    displaySprite(game);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffa6 	bl	8000b90 <displaySprite>
    displayHealth(game);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff49 	bl	8000adc <displayHealth>
    displayHunger(game);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ff64 	bl	8000b18 <displayHunger>
    displayHappiness(game);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff7f 	bl	8000b54 <displayHappiness>
    ssd1306_UpdateScreen();
 8000c56:	f000 faab 	bl	80011b0 <ssd1306_UpdateScreen>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <render_init>:
	ssd1306_setCursor(32, 5);
	ssd1306_WriteString(val, Font_6x8, Black);
}
*/

void render_init(render* render) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
    ssd1306_Init();
 8000c6c:	f000 fa1e 	bl	80010ac <ssd1306_Init>
    ssd1306_Fill(Black);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 fa85 	bl	8001180 <ssd1306_Fill>
	render->displayHealth = displayHealth;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a08      	ldr	r2, [pc, #32]	@ (8000c9c <render_init+0x38>)
 8000c7a:	601a      	str	r2, [r3, #0]
	render->displayHunger = displayHunger;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ca0 <render_init+0x3c>)
 8000c80:	605a      	str	r2, [r3, #4]
	render->displayHappiness = displayHappiness;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a07      	ldr	r2, [pc, #28]	@ (8000ca4 <render_init+0x40>)
 8000c86:	609a      	str	r2, [r3, #8]
	render->displaySprite = displaySprite;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a07      	ldr	r2, [pc, #28]	@ (8000ca8 <render_init+0x44>)
 8000c8c:	60da      	str	r2, [r3, #12]
	render->displayScreen = displayScreen;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a06      	ldr	r2, [pc, #24]	@ (8000cac <render_init+0x48>)
 8000c92:	611a      	str	r2, [r3, #16]
//	render->writeText = writeText;
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	08000add 	.word	0x08000add
 8000ca0:	08000b19 	.word	0x08000b19
 8000ca4:	08000b55 	.word	0x08000b55
 8000ca8:	08000b91 	.word	0x08000b91
 8000cac:	08000c31 	.word	0x08000c31

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	4a08      	ldr	r2, [pc, #32]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cee:	2007      	movs	r0, #7
 8000cf0:	f000 fcfc 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800

08000d00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a19      	ldr	r2, [pc, #100]	@ (8000d84 <HAL_I2C_MspInit+0x84>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d12c      	bne.n	8000d7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a17      	ldr	r2, [pc, #92]	@ (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d44:	2312      	movs	r3, #18
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d50:	2304      	movs	r3, #4
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <HAL_I2C_MspInit+0x8c>)
 8000d5c:	f000 fcfa 	bl	8001754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d68:	4a07      	ldr	r2, [pc, #28]	@ (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d70:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	@ 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40005400 	.word	0x40005400
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020400 	.word	0x40020400

08000d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a19      	ldr	r2, [pc, #100]	@ (8000e14 <HAL_UART_MspInit+0x84>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d12b      	bne.n	8000e0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <HAL_UART_MspInit+0x88>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	4a17      	ldr	r2, [pc, #92]	@ (8000e18 <HAL_UART_MspInit+0x88>)
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc2:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <HAL_UART_MspInit+0x88>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <HAL_UART_MspInit+0x88>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a10      	ldr	r2, [pc, #64]	@ (8000e18 <HAL_UART_MspInit+0x88>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <HAL_UART_MspInit+0x88>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dea:	230c      	movs	r3, #12
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <HAL_UART_MspInit+0x8c>)
 8000e06:	f000 fca5 	bl	8001754 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	@ 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40004400 	.word	0x40004400
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020000 	.word	0x40020000

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <NMI_Handler+0x4>

08000e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <MemManage_Handler+0x4>

08000e38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e76:	f000 fb43 	bl	8001500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60f8      	str	r0, [r7, #12]
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	e00a      	b.n	8000ea6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e90:	f3af 8000 	nop.w
 8000e94:	4601      	mov	r1, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	60ba      	str	r2, [r7, #8]
 8000e9c:	b2ca      	uxtb	r2, r1
 8000e9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	dbf0      	blt.n	8000e90 <_read+0x12>
  }

  return len;
 8000eae:	687b      	ldr	r3, [r7, #4]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	e009      	b.n	8000ede <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	60ba      	str	r2, [r7, #8]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	3301      	adds	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	dbf1      	blt.n	8000eca <_write+0x12>
  }
  return len;
 8000ee6:	687b      	ldr	r3, [r7, #4]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <_close>:

int _close(int file)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f18:	605a      	str	r2, [r3, #4]
  return 0;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_isatty>:

int _isatty(int file)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b085      	sub	sp, #20
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f002 fbea 	bl	8003760 <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	@ (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20018000 	.word	0x20018000
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	20000120 	.word	0x20000120
 8000fc0:	20000680 	.word	0x20000680

08000fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <SystemInit+0x20>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <SystemInit+0x20>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001020 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fec:	f7ff ffea 	bl	8000fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ff2:	490d      	ldr	r1, [pc, #52]	@ (8001028 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800102c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001008:	4c0a      	ldr	r4, [pc, #40]	@ (8001034 <LoopFillZerobss+0x22>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001016:	f002 fba9 	bl	800376c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff fbad 	bl	8000778 <main>
  bx  lr    
 800101e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001020:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800102c:	08004c74 	.word	0x08004c74
  ldr r2, =_sbss
 8001030:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001034:	2000067c 	.word	0x2000067c

08001038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC_IRQHandler>

0800103a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af04      	add	r7, sp, #16
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001052:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001056:	9302      	str	r3, [sp, #8]
 8001058:	2301      	movs	r3, #1
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	2200      	movs	r2, #0
 8001064:	2178      	movs	r1, #120	@ 0x78
 8001066:	4803      	ldr	r0, [pc, #12]	@ (8001074 <ssd1306_WriteCommand+0x2c>)
 8001068:	f000 fe6e 	bl	8001d48 <HAL_I2C_Mem_Write>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000084 	.word	0x20000084

08001078 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af04      	add	r7, sp, #16
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b29b      	uxth	r3, r3
 8001086:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800108a:	9202      	str	r2, [sp, #8]
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	2240      	movs	r2, #64	@ 0x40
 8001096:	2178      	movs	r1, #120	@ 0x78
 8001098:	4803      	ldr	r0, [pc, #12]	@ (80010a8 <ssd1306_WriteData+0x30>)
 800109a:	f000 fe55 	bl	8001d48 <HAL_I2C_Mem_Write>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000084 	.word	0x20000084

080010ac <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80010b0:	f7ff ffc3 	bl	800103a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80010b4:	2064      	movs	r0, #100	@ 0x64
 80010b6:	f000 fa43 	bl	8001540 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 f9b0 	bl	8001420 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80010c0:	2020      	movs	r0, #32
 80010c2:	f7ff ffc1 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff ffbe 	bl	8001048 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010cc:	20b0      	movs	r0, #176	@ 0xb0
 80010ce:	f7ff ffbb 	bl	8001048 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80010d2:	20c8      	movs	r0, #200	@ 0xc8
 80010d4:	f7ff ffb8 	bl	8001048 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff ffb5 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80010de:	2010      	movs	r0, #16
 80010e0:	f7ff ffb2 	bl	8001048 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80010e4:	2040      	movs	r0, #64	@ 0x40
 80010e6:	f7ff ffaf 	bl	8001048 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80010ea:	20ff      	movs	r0, #255	@ 0xff
 80010ec:	f000 f985 	bl	80013fa <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80010f0:	20a1      	movs	r0, #161	@ 0xa1
 80010f2:	f7ff ffa9 	bl	8001048 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80010f6:	20a6      	movs	r0, #166	@ 0xa6
 80010f8:	f7ff ffa6 	bl	8001048 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80010fc:	20a8      	movs	r0, #168	@ 0xa8
 80010fe:	f7ff ffa3 	bl	8001048 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001102:	203f      	movs	r0, #63	@ 0x3f
 8001104:	f7ff ffa0 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001108:	20a4      	movs	r0, #164	@ 0xa4
 800110a:	f7ff ff9d 	bl	8001048 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800110e:	20d3      	movs	r0, #211	@ 0xd3
 8001110:	f7ff ff9a 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff ff97 	bl	8001048 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800111a:	20d5      	movs	r0, #213	@ 0xd5
 800111c:	f7ff ff94 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001120:	20f0      	movs	r0, #240	@ 0xf0
 8001122:	f7ff ff91 	bl	8001048 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001126:	20d9      	movs	r0, #217	@ 0xd9
 8001128:	f7ff ff8e 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800112c:	2022      	movs	r0, #34	@ 0x22
 800112e:	f7ff ff8b 	bl	8001048 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001132:	20da      	movs	r0, #218	@ 0xda
 8001134:	f7ff ff88 	bl	8001048 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001138:	2012      	movs	r0, #18
 800113a:	f7ff ff85 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800113e:	20db      	movs	r0, #219	@ 0xdb
 8001140:	f7ff ff82 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001144:	2020      	movs	r0, #32
 8001146:	f7ff ff7f 	bl	8001048 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800114a:	208d      	movs	r0, #141	@ 0x8d
 800114c:	f7ff ff7c 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001150:	2014      	movs	r0, #20
 8001152:	f7ff ff79 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001156:	2001      	movs	r0, #1
 8001158:	f000 f962 	bl	8001420 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800115c:	2000      	movs	r0, #0
 800115e:	f000 f80f 	bl	8001180 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001162:	f000 f825 	bl	80011b0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001166:	4b05      	ldr	r3, [pc, #20]	@ (800117c <ssd1306_Init+0xd0>)
 8001168:	2200      	movs	r2, #0
 800116a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <ssd1306_Init+0xd0>)
 800116e:	2200      	movs	r2, #0
 8001170:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001172:	4b02      	ldr	r3, [pc, #8]	@ (800117c <ssd1306_Init+0xd0>)
 8001174:	2201      	movs	r2, #1
 8001176:	711a      	strb	r2, [r3, #4]
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000524 	.word	0x20000524

08001180 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <ssd1306_Fill+0x14>
 8001190:	2300      	movs	r3, #0
 8001192:	e000      	b.n	8001196 <ssd1306_Fill+0x16>
 8001194:	23ff      	movs	r3, #255	@ 0xff
 8001196:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800119a:	4619      	mov	r1, r3
 800119c:	4803      	ldr	r0, [pc, #12]	@ (80011ac <ssd1306_Fill+0x2c>)
 800119e:	f002 fa91 	bl	80036c4 <memset>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000124 	.word	0x20000124

080011b0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80011b6:	2300      	movs	r3, #0
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	e016      	b.n	80011ea <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	3b50      	subs	r3, #80	@ 0x50
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff40 	bl	8001048 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff ff3d 	bl	8001048 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80011ce:	2010      	movs	r0, #16
 80011d0:	f7ff ff3a 	bl	8001048 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	01db      	lsls	r3, r3, #7
 80011d8:	4a08      	ldr	r2, [pc, #32]	@ (80011fc <ssd1306_UpdateScreen+0x4c>)
 80011da:	4413      	add	r3, r2
 80011dc:	2180      	movs	r1, #128	@ 0x80
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff4a 	bl	8001078 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	3301      	adds	r3, #1
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b07      	cmp	r3, #7
 80011ee:	d9e5      	bls.n	80011bc <ssd1306_UpdateScreen+0xc>
    }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000124 	.word	0x20000124

08001200 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	460b      	mov	r3, r1
 800120c:	71bb      	strb	r3, [r7, #6]
 800120e:	4613      	mov	r3, r2
 8001210:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	2b00      	cmp	r3, #0
 8001218:	db3d      	blt.n	8001296 <ssd1306_DrawPixel+0x96>
 800121a:	79bb      	ldrb	r3, [r7, #6]
 800121c:	2b3f      	cmp	r3, #63	@ 0x3f
 800121e:	d83a      	bhi.n	8001296 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001220:	797b      	ldrb	r3, [r7, #5]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d11a      	bne.n	800125c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	79bb      	ldrb	r3, [r7, #6]
 800122a:	08db      	lsrs	r3, r3, #3
 800122c:	b2d8      	uxtb	r0, r3
 800122e:	4603      	mov	r3, r0
 8001230:	01db      	lsls	r3, r3, #7
 8001232:	4413      	add	r3, r2
 8001234:	4a1b      	ldr	r2, [pc, #108]	@ (80012a4 <ssd1306_DrawPixel+0xa4>)
 8001236:	5cd3      	ldrb	r3, [r2, r3]
 8001238:	b25a      	sxtb	r2, r3
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	2101      	movs	r1, #1
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	b25b      	sxtb	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b259      	sxtb	r1, r3
 800124c:	79fa      	ldrb	r2, [r7, #7]
 800124e:	4603      	mov	r3, r0
 8001250:	01db      	lsls	r3, r3, #7
 8001252:	4413      	add	r3, r2
 8001254:	b2c9      	uxtb	r1, r1
 8001256:	4a13      	ldr	r2, [pc, #76]	@ (80012a4 <ssd1306_DrawPixel+0xa4>)
 8001258:	54d1      	strb	r1, [r2, r3]
 800125a:	e01d      	b.n	8001298 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800125c:	79fa      	ldrb	r2, [r7, #7]
 800125e:	79bb      	ldrb	r3, [r7, #6]
 8001260:	08db      	lsrs	r3, r3, #3
 8001262:	b2d8      	uxtb	r0, r3
 8001264:	4603      	mov	r3, r0
 8001266:	01db      	lsls	r3, r3, #7
 8001268:	4413      	add	r3, r2
 800126a:	4a0e      	ldr	r2, [pc, #56]	@ (80012a4 <ssd1306_DrawPixel+0xa4>)
 800126c:	5cd3      	ldrb	r3, [r2, r3]
 800126e:	b25a      	sxtb	r2, r3
 8001270:	79bb      	ldrb	r3, [r7, #6]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	2101      	movs	r1, #1
 8001278:	fa01 f303 	lsl.w	r3, r1, r3
 800127c:	b25b      	sxtb	r3, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	b25b      	sxtb	r3, r3
 8001282:	4013      	ands	r3, r2
 8001284:	b259      	sxtb	r1, r3
 8001286:	79fa      	ldrb	r2, [r7, #7]
 8001288:	4603      	mov	r3, r0
 800128a:	01db      	lsls	r3, r3, #7
 800128c:	4413      	add	r3, r2
 800128e:	b2c9      	uxtb	r1, r1
 8001290:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <ssd1306_DrawPixel+0xa4>)
 8001292:	54d1      	strb	r1, [r2, r3]
 8001294:	e000      	b.n	8001298 <ssd1306_DrawPixel+0x98>
        return;
 8001296:	bf00      	nop
    }
}
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000124 	.word	0x20000124

080012a8 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4604      	mov	r4, r0
 80012b0:	4608      	mov	r0, r1
 80012b2:	4611      	mov	r1, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	4623      	mov	r3, r4
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	4603      	mov	r3, r0
 80012bc:	71bb      	strb	r3, [r7, #6]
 80012be:	460b      	mov	r3, r1
 80012c0:	717b      	strb	r3, [r7, #5]
 80012c2:	4613      	mov	r3, r2
 80012c4:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80012c6:	79fa      	ldrb	r2, [r7, #7]
 80012c8:	797b      	ldrb	r3, [r7, #5]
 80012ca:	4293      	cmp	r3, r2
 80012cc:	bf28      	it	cs
 80012ce:	4613      	movcs	r3, r2
 80012d0:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80012d2:	797a      	ldrb	r2, [r7, #5]
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	4293      	cmp	r3, r2
 80012d8:	bf38      	it	cc
 80012da:	4613      	movcc	r3, r2
 80012dc:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 80012de:	79ba      	ldrb	r2, [r7, #6]
 80012e0:	793b      	ldrb	r3, [r7, #4]
 80012e2:	4293      	cmp	r3, r2
 80012e4:	bf28      	it	cs
 80012e6:	4613      	movcs	r3, r2
 80012e8:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80012ea:	793a      	ldrb	r2, [r7, #4]
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	4293      	cmp	r3, r2
 80012f0:	bf38      	it	cc
 80012f2:	4613      	movcc	r3, r2
 80012f4:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80012f6:	7afb      	ldrb	r3, [r7, #11]
 80012f8:	73fb      	strb	r3, [r7, #15]
 80012fa:	e017      	b.n	800132c <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80012fc:	7b7b      	ldrb	r3, [r7, #13]
 80012fe:	73bb      	strb	r3, [r7, #14]
 8001300:	e009      	b.n	8001316 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001302:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001306:	7bf9      	ldrb	r1, [r7, #15]
 8001308:	7bbb      	ldrb	r3, [r7, #14]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff78 	bl	8001200 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001310:	7bbb      	ldrb	r3, [r7, #14]
 8001312:	3301      	adds	r3, #1
 8001314:	73bb      	strb	r3, [r7, #14]
 8001316:	7bba      	ldrb	r2, [r7, #14]
 8001318:	7b3b      	ldrb	r3, [r7, #12]
 800131a:	429a      	cmp	r2, r3
 800131c:	d803      	bhi.n	8001326 <ssd1306_FillRectangle+0x7e>
 800131e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001322:	2b00      	cmp	r3, #0
 8001324:	daed      	bge.n	8001302 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	3301      	adds	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	7abb      	ldrb	r3, [r7, #10]
 8001330:	429a      	cmp	r2, r3
 8001332:	d803      	bhi.n	800133c <ssd1306_FillRectangle+0x94>
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	2b3f      	cmp	r3, #63	@ 0x3f
 8001338:	d9e0      	bls.n	80012fc <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 800133a:	bf00      	nop
 800133c:	bf00      	nop
}
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	bd90      	pop	{r4, r7, pc}

08001344 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	603a      	str	r2, [r7, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
 8001352:	460b      	mov	r3, r1
 8001354:	71bb      	strb	r3, [r7, #6]
 8001356:	4613      	mov	r3, r2
 8001358:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800135a:	797b      	ldrb	r3, [r7, #5]
 800135c:	3307      	adds	r3, #7
 800135e:	2b00      	cmp	r3, #0
 8001360:	da00      	bge.n	8001364 <ssd1306_DrawBitmap+0x20>
 8001362:	3307      	adds	r3, #7
 8001364:	10db      	asrs	r3, r3, #3
 8001366:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db3e      	blt.n	80013f2 <ssd1306_DrawBitmap+0xae>
 8001374:	79bb      	ldrb	r3, [r7, #6]
 8001376:	2b3f      	cmp	r3, #63	@ 0x3f
 8001378:	d83b      	bhi.n	80013f2 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800137a:	2300      	movs	r3, #0
 800137c:	73bb      	strb	r3, [r7, #14]
 800137e:	e033      	b.n	80013e8 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001380:	2300      	movs	r3, #0
 8001382:	737b      	strb	r3, [r7, #13]
 8001384:	e026      	b.n	80013d4 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001386:	7b7b      	ldrb	r3, [r7, #13]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e00d      	b.n	80013b4 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001398:	7bbb      	ldrb	r3, [r7, #14]
 800139a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	7b7a      	ldrb	r2, [r7, #13]
 80013a4:	08d2      	lsrs	r2, r2, #3
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	4413      	add	r3, r2
 80013aa:	461a      	mov	r2, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80013b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da08      	bge.n	80013ce <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80013bc:	79fa      	ldrb	r2, [r7, #7]
 80013be:	7b7b      	ldrb	r3, [r7, #13]
 80013c0:	4413      	add	r3, r2
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	7f3a      	ldrb	r2, [r7, #28]
 80013c6:	79b9      	ldrb	r1, [r7, #6]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff19 	bl	8001200 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80013ce:	7b7b      	ldrb	r3, [r7, #13]
 80013d0:	3301      	adds	r3, #1
 80013d2:	737b      	strb	r3, [r7, #13]
 80013d4:	7b7a      	ldrb	r2, [r7, #13]
 80013d6:	797b      	ldrb	r3, [r7, #5]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d3d4      	bcc.n	8001386 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80013dc:	7bbb      	ldrb	r3, [r7, #14]
 80013de:	3301      	adds	r3, #1
 80013e0:	73bb      	strb	r3, [r7, #14]
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	3301      	adds	r3, #1
 80013e6:	71bb      	strb	r3, [r7, #6]
 80013e8:	7bba      	ldrb	r2, [r7, #14]
 80013ea:	7e3b      	ldrb	r3, [r7, #24]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d3c7      	bcc.n	8001380 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80013f0:	e000      	b.n	80013f4 <ssd1306_DrawBitmap+0xb0>
        return;
 80013f2:	bf00      	nop
}
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001404:	2381      	movs	r3, #129	@ 0x81
 8001406:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fe1c 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fe18 	bl	8001048 <ssd1306_WriteCommand>
}
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001430:	23af      	movs	r3, #175	@ 0xaf
 8001432:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <ssd1306_SetDisplayOn+0x38>)
 8001436:	2201      	movs	r2, #1
 8001438:	715a      	strb	r2, [r3, #5]
 800143a:	e004      	b.n	8001446 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800143c:	23ae      	movs	r3, #174	@ 0xae
 800143e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <ssd1306_SetDisplayOn+0x38>)
 8001442:	2200      	movs	r2, #0
 8001444:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fdfd 	bl	8001048 <ssd1306_WriteCommand>
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000524 	.word	0x20000524

0800145c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001460:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0d      	ldr	r2, [pc, #52]	@ (800149c <HAL_Init+0x40>)
 8001466:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800146a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <HAL_Init+0x40>)
 8001472:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001476:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001478:	4b08      	ldr	r3, [pc, #32]	@ (800149c <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a07      	ldr	r2, [pc, #28]	@ (800149c <HAL_Init+0x40>)
 800147e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001482:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001484:	2003      	movs	r0, #3
 8001486:	f000 f931 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148a:	2000      	movs	r0, #0
 800148c:	f000 f808 	bl	80014a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001490:	f7ff fc0e 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023c00 	.word	0x40023c00

080014a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a8:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_InitTick+0x54>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <HAL_InitTick+0x58>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f93b 	bl	800173a <HAL_SYSTICK_Config>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00e      	b.n	80014ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b0f      	cmp	r3, #15
 80014d2:	d80a      	bhi.n	80014ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d4:	2200      	movs	r2, #0
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014dc:	f000 f911 	bl	8001702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e0:	4a06      	ldr	r2, [pc, #24]	@ (80014fc <HAL_InitTick+0x5c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e000      	b.n	80014ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000008 	.word	0x20000008
 80014fc:	20000004 	.word	0x20000004

08001500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_IncTick+0x20>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <HAL_IncTick+0x24>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	4a04      	ldr	r2, [pc, #16]	@ (8001524 <HAL_IncTick+0x24>)
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000008 	.word	0x20000008
 8001524:	2000052c 	.word	0x2000052c

08001528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b03      	ldr	r3, [pc, #12]	@ (800153c <HAL_GetTick+0x14>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	2000052c 	.word	0x2000052c

08001540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001548:	f7ff ffee 	bl	8001528 <HAL_GetTick>
 800154c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001558:	d005      	beq.n	8001566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_Delay+0x44>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4413      	add	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001566:	bf00      	nop
 8001568:	f7ff ffde 	bl	8001528 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	429a      	cmp	r2, r3
 8001576:	d8f7      	bhi.n	8001568 <HAL_Delay+0x28>
  {
  }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000008 	.word	0x20000008

08001588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ba:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	60d3      	str	r3, [r2, #12]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	@ (8001638 <__NVIC_SetPriority+0x4c>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4908      	ldr	r1, [pc, #32]	@ (800163c <__NVIC_SetPriority+0x50>)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	3b04      	subs	r3, #4
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	@ 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
         );
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	@ 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b8:	d301      	bcc.n	80016be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00f      	b.n	80016de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <SysTick_Config+0x40>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c6:	210f      	movs	r1, #15
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016cc:	f7ff ff8e 	bl	80015ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <SysTick_Config+0x40>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d6:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <SysTick_Config+0x40>)
 80016d8:	2207      	movs	r2, #7
 80016da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff47 	bl	8001588 <__NVIC_SetPriorityGrouping>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001714:	f7ff ff5c 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 8001718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	6978      	ldr	r0, [r7, #20]
 8001720:	f7ff ff8e 	bl	8001640 <NVIC_EncodePriority>
 8001724:	4602      	mov	r2, r0
 8001726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff5d 	bl	80015ec <__NVIC_SetPriority>
}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ffb0 	bl	80016a8 <SysTick_Config>
 8001748:	4603      	mov	r3, r0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	@ 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	e159      	b.n	8001a24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001770:	2201      	movs	r2, #1
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	429a      	cmp	r2, r3
 800178a:	f040 8148 	bne.w	8001a1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	2b01      	cmp	r3, #1
 8001798:	d005      	beq.n	80017a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d130      	bne.n	8001808 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017dc:	2201      	movs	r2, #1
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 0201 	and.w	r2, r3, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b03      	cmp	r3, #3
 8001812:	d017      	beq.n	8001844 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	2203      	movs	r2, #3
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d123      	bne.n	8001898 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	08da      	lsrs	r2, r3, #3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3208      	adds	r2, #8
 8001858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	220f      	movs	r2, #15
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	08da      	lsrs	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	69b9      	ldr	r1, [r7, #24]
 8001894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0203 	and.w	r2, r3, #3
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80a2 	beq.w	8001a1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b57      	ldr	r3, [pc, #348]	@ (8001a3c <HAL_GPIO_Init+0x2e8>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	4a56      	ldr	r2, [pc, #344]	@ (8001a3c <HAL_GPIO_Init+0x2e8>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ea:	4b54      	ldr	r3, [pc, #336]	@ (8001a3c <HAL_GPIO_Init+0x2e8>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f6:	4a52      	ldr	r2, [pc, #328]	@ (8001a40 <HAL_GPIO_Init+0x2ec>)
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	3302      	adds	r3, #2
 80018fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	220f      	movs	r2, #15
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a49      	ldr	r2, [pc, #292]	@ (8001a44 <HAL_GPIO_Init+0x2f0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d019      	beq.n	8001956 <HAL_GPIO_Init+0x202>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a48      	ldr	r2, [pc, #288]	@ (8001a48 <HAL_GPIO_Init+0x2f4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d013      	beq.n	8001952 <HAL_GPIO_Init+0x1fe>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a47      	ldr	r2, [pc, #284]	@ (8001a4c <HAL_GPIO_Init+0x2f8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d00d      	beq.n	800194e <HAL_GPIO_Init+0x1fa>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a46      	ldr	r2, [pc, #280]	@ (8001a50 <HAL_GPIO_Init+0x2fc>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d007      	beq.n	800194a <HAL_GPIO_Init+0x1f6>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a45      	ldr	r2, [pc, #276]	@ (8001a54 <HAL_GPIO_Init+0x300>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d101      	bne.n	8001946 <HAL_GPIO_Init+0x1f2>
 8001942:	2304      	movs	r3, #4
 8001944:	e008      	b.n	8001958 <HAL_GPIO_Init+0x204>
 8001946:	2307      	movs	r3, #7
 8001948:	e006      	b.n	8001958 <HAL_GPIO_Init+0x204>
 800194a:	2303      	movs	r3, #3
 800194c:	e004      	b.n	8001958 <HAL_GPIO_Init+0x204>
 800194e:	2302      	movs	r3, #2
 8001950:	e002      	b.n	8001958 <HAL_GPIO_Init+0x204>
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <HAL_GPIO_Init+0x204>
 8001956:	2300      	movs	r3, #0
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	f002 0203 	and.w	r2, r2, #3
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	4093      	lsls	r3, r2
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001968:	4935      	ldr	r1, [pc, #212]	@ (8001a40 <HAL_GPIO_Init+0x2ec>)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	3302      	adds	r3, #2
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001976:	4b38      	ldr	r3, [pc, #224]	@ (8001a58 <HAL_GPIO_Init+0x304>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800199a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a58 <HAL_GPIO_Init+0x304>)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a58 <HAL_GPIO_Init+0x304>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c4:	4a24      	ldr	r2, [pc, #144]	@ (8001a58 <HAL_GPIO_Init+0x304>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ca:	4b23      	ldr	r3, [pc, #140]	@ (8001a58 <HAL_GPIO_Init+0x304>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001a58 <HAL_GPIO_Init+0x304>)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f4:	4b18      	ldr	r3, [pc, #96]	@ (8001a58 <HAL_GPIO_Init+0x304>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a18:	4a0f      	ldr	r2, [pc, #60]	@ (8001a58 <HAL_GPIO_Init+0x304>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3301      	adds	r3, #1
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	2b0f      	cmp	r3, #15
 8001a28:	f67f aea2 	bls.w	8001770 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3724      	adds	r7, #36	@ 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40013800 	.word	0x40013800
 8001a44:	40020000 	.word	0x40020000
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40020800 	.word	0x40020800
 8001a50:	40020c00 	.word	0x40020c00
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40013c00 	.word	0x40013c00

08001a5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	887b      	ldrh	r3, [r7, #2]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a74:	2301      	movs	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	e001      	b.n	8001a7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a9c:	787b      	ldrb	r3, [r7, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aa8:	e003      	b.n	8001ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	041a      	lsls	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	619a      	str	r2, [r3, #24]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e12b      	b.n	8001d2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff f90a 	bl	8000d00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2224      	movs	r2, #36	@ 0x24
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0201 	bic.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b24:	f001 f8ea 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 8001b28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4a81      	ldr	r2, [pc, #516]	@ (8001d34 <HAL_I2C_Init+0x274>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d807      	bhi.n	8001b44 <HAL_I2C_Init+0x84>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4a80      	ldr	r2, [pc, #512]	@ (8001d38 <HAL_I2C_Init+0x278>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	bf94      	ite	ls
 8001b3c:	2301      	movls	r3, #1
 8001b3e:	2300      	movhi	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	e006      	b.n	8001b52 <HAL_I2C_Init+0x92>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4a7d      	ldr	r2, [pc, #500]	@ (8001d3c <HAL_I2C_Init+0x27c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	bf94      	ite	ls
 8001b4c:	2301      	movls	r3, #1
 8001b4e:	2300      	movhi	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0e7      	b.n	8001d2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4a78      	ldr	r2, [pc, #480]	@ (8001d40 <HAL_I2C_Init+0x280>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	0c9b      	lsrs	r3, r3, #18
 8001b64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4a6a      	ldr	r2, [pc, #424]	@ (8001d34 <HAL_I2C_Init+0x274>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d802      	bhi.n	8001b94 <HAL_I2C_Init+0xd4>
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3301      	adds	r3, #1
 8001b92:	e009      	b.n	8001ba8 <HAL_I2C_Init+0xe8>
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	4a69      	ldr	r2, [pc, #420]	@ (8001d44 <HAL_I2C_Init+0x284>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	099b      	lsrs	r3, r3, #6
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	430b      	orrs	r3, r1
 8001bae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001bba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	495c      	ldr	r1, [pc, #368]	@ (8001d34 <HAL_I2C_Init+0x274>)
 8001bc4:	428b      	cmp	r3, r1
 8001bc6:	d819      	bhi.n	8001bfc <HAL_I2C_Init+0x13c>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1e59      	subs	r1, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bd6:	1c59      	adds	r1, r3, #1
 8001bd8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001bdc:	400b      	ands	r3, r1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00a      	beq.n	8001bf8 <HAL_I2C_Init+0x138>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1e59      	subs	r1, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf6:	e051      	b.n	8001c9c <HAL_I2C_Init+0x1dc>
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	e04f      	b.n	8001c9c <HAL_I2C_Init+0x1dc>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d111      	bne.n	8001c28 <HAL_I2C_Init+0x168>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1e58      	subs	r0, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	440b      	add	r3, r1
 8001c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	e012      	b.n	8001c4e <HAL_I2C_Init+0x18e>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1e58      	subs	r0, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6859      	ldr	r1, [r3, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	0099      	lsls	r1, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf0c      	ite	eq
 8001c48:	2301      	moveq	r3, #1
 8001c4a:	2300      	movne	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_Init+0x196>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e022      	b.n	8001c9c <HAL_I2C_Init+0x1dc>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10e      	bne.n	8001c7c <HAL_I2C_Init+0x1bc>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1e58      	subs	r0, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6859      	ldr	r1, [r3, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	440b      	add	r3, r1
 8001c6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c70:	3301      	adds	r3, #1
 8001c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c7a:	e00f      	b.n	8001c9c <HAL_I2C_Init+0x1dc>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1e58      	subs	r0, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	0099      	lsls	r1, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	6809      	ldr	r1, [r1, #0]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69da      	ldr	r2, [r3, #28]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001cca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6911      	ldr	r1, [r2, #16]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68d2      	ldr	r2, [r2, #12]
 8001cd6:	4311      	orrs	r1, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	000186a0 	.word	0x000186a0
 8001d38:	001e847f 	.word	0x001e847f
 8001d3c:	003d08ff 	.word	0x003d08ff
 8001d40:	431bde83 	.word	0x431bde83
 8001d44:	10624dd3 	.word	0x10624dd3

08001d48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	4608      	mov	r0, r1
 8001d52:	4611      	mov	r1, r2
 8001d54:	461a      	mov	r2, r3
 8001d56:	4603      	mov	r3, r0
 8001d58:	817b      	strh	r3, [r7, #10]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	813b      	strh	r3, [r7, #8]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d62:	f7ff fbe1 	bl	8001528 <HAL_GetTick>
 8001d66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	f040 80d9 	bne.w	8001f28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2319      	movs	r3, #25
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	496d      	ldr	r1, [pc, #436]	@ (8001f34 <HAL_I2C_Mem_Write+0x1ec>)
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 f971 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e0cc      	b.n	8001f2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_I2C_Mem_Write+0x56>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e0c5      	b.n	8001f2a <HAL_I2C_Mem_Write+0x1e2>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d007      	beq.n	8001dc4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2221      	movs	r2, #33	@ 0x21
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2240      	movs	r2, #64	@ 0x40
 8001de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6a3a      	ldr	r2, [r7, #32]
 8001dee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001df4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4a4d      	ldr	r2, [pc, #308]	@ (8001f38 <HAL_I2C_Mem_Write+0x1f0>)
 8001e04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e06:	88f8      	ldrh	r0, [r7, #6]
 8001e08:	893a      	ldrh	r2, [r7, #8]
 8001e0a:	8979      	ldrh	r1, [r7, #10]
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	4603      	mov	r3, r0
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 f890 	bl	8001f3c <I2C_RequestMemoryWrite>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d052      	beq.n	8001ec8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e081      	b.n	8001f2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 fa36 	bl	800229c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00d      	beq.n	8001e52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d107      	bne.n	8001e4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e06b      	b.n	8001f2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d11b      	bne.n	8001ec8 <HAL_I2C_Mem_Write+0x180>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d017      	beq.n	8001ec8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1aa      	bne.n	8001e26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 fa29 	bl	800232c <I2C_WaitOnBTFFlagUntilTimeout>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00d      	beq.n	8001efc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d107      	bne.n	8001ef8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ef6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e016      	b.n	8001f2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	e000      	b.n	8001f2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f28:	2302      	movs	r3, #2
  }
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	00100002 	.word	0x00100002
 8001f38:	ffff0000 	.word	0xffff0000

08001f3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af02      	add	r7, sp, #8
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	4608      	mov	r0, r1
 8001f46:	4611      	mov	r1, r2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	817b      	strh	r3, [r7, #10]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	813b      	strh	r3, [r7, #8]
 8001f52:	4613      	mov	r3, r2
 8001f54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 f878 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00d      	beq.n	8001f9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f8c:	d103      	bne.n	8001f96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e05f      	b.n	800205a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f9a:	897b      	ldrh	r3, [r7, #10]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fa8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	6a3a      	ldr	r2, [r7, #32]
 8001fae:	492d      	ldr	r1, [pc, #180]	@ (8002064 <I2C_RequestMemoryWrite+0x128>)
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 f8d3 	bl	800215c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e04c      	b.n	800205a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fd8:	6a39      	ldr	r1, [r7, #32]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f95e 	bl	800229c <I2C_WaitOnTXEFlagUntilTimeout>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00d      	beq.n	8002002 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d107      	bne.n	8001ffe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ffc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e02b      	b.n	800205a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d105      	bne.n	8002014 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002008:	893b      	ldrh	r3, [r7, #8]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	611a      	str	r2, [r3, #16]
 8002012:	e021      	b.n	8002058 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002014:	893b      	ldrh	r3, [r7, #8]
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	b29b      	uxth	r3, r3
 800201a:	b2da      	uxtb	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002024:	6a39      	ldr	r1, [r7, #32]
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f938 	bl	800229c <I2C_WaitOnTXEFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00d      	beq.n	800204e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	2b04      	cmp	r3, #4
 8002038:	d107      	bne.n	800204a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002048:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e005      	b.n	800205a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800204e:	893b      	ldrh	r3, [r7, #8]
 8002050:	b2da      	uxtb	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	00010002 	.word	0x00010002

08002068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	4613      	mov	r3, r2
 8002076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002078:	e048      	b.n	800210c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002080:	d044      	beq.n	800210c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002082:	f7ff fa51 	bl	8001528 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d302      	bcc.n	8002098 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d139      	bne.n	800210c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	0c1b      	lsrs	r3, r3, #16
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d10d      	bne.n	80020be <I2C_WaitOnFlagUntilTimeout+0x56>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	43da      	mvns	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	4013      	ands	r3, r2
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	e00c      	b.n	80020d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	43da      	mvns	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4013      	ands	r3, r2
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d116      	bne.n	800210c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e023      	b.n	8002154 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	0c1b      	lsrs	r3, r3, #16
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10d      	bne.n	8002132 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	43da      	mvns	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	4013      	ands	r3, r2
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf0c      	ite	eq
 8002128:	2301      	moveq	r3, #1
 800212a:	2300      	movne	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	e00c      	b.n	800214c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	43da      	mvns	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	4013      	ands	r3, r2
 800213e:	b29b      	uxth	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	429a      	cmp	r2, r3
 8002150:	d093      	beq.n	800207a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800216a:	e071      	b.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800217a:	d123      	bne.n	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800218a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002194:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	f043 0204 	orr.w	r2, r3, #4
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e067      	b.n	8002294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021ca:	d041      	beq.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021cc:	f7ff f9ac 	bl	8001528 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d302      	bcc.n	80021e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d136      	bne.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	0c1b      	lsrs	r3, r3, #16
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d10c      	bne.n	8002206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4013      	ands	r3, r2
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf14      	ite	ne
 80021fe:	2301      	movne	r3, #1
 8002200:	2300      	moveq	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	e00b      	b.n	800221e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	43da      	mvns	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	4013      	ands	r3, r2
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	bf14      	ite	ne
 8002218:	2301      	movne	r3, #1
 800221a:	2300      	moveq	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d016      	beq.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2220      	movs	r2, #32
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	f043 0220 	orr.w	r2, r3, #32
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e021      	b.n	8002294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	0c1b      	lsrs	r3, r3, #16
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d10c      	bne.n	8002274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	43da      	mvns	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	4013      	ands	r3, r2
 8002266:	b29b      	uxth	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf14      	ite	ne
 800226c:	2301      	movne	r3, #1
 800226e:	2300      	moveq	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	e00b      	b.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	43da      	mvns	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4013      	ands	r3, r2
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	f47f af6d 	bne.w	800216c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022a8:	e034      	b.n	8002314 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f886 	bl	80023bc <I2C_IsAcknowledgeFailed>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e034      	b.n	8002324 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022c0:	d028      	beq.n	8002314 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c2:	f7ff f931 	bl	8001528 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d302      	bcc.n	80022d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d11d      	bne.n	8002314 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e2:	2b80      	cmp	r3, #128	@ 0x80
 80022e4:	d016      	beq.n	8002314 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002300:	f043 0220 	orr.w	r2, r3, #32
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e007      	b.n	8002324 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800231e:	2b80      	cmp	r3, #128	@ 0x80
 8002320:	d1c3      	bne.n	80022aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002338:	e034      	b.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f83e 	bl	80023bc <I2C_IsAcknowledgeFailed>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e034      	b.n	80023b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002350:	d028      	beq.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002352:	f7ff f8e9 	bl	8001528 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	429a      	cmp	r2, r3
 8002360:	d302      	bcc.n	8002368 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d11d      	bne.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b04      	cmp	r3, #4
 8002374:	d016      	beq.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002390:	f043 0220 	orr.w	r2, r3, #32
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e007      	b.n	80023b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d1c3      	bne.n	800233a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023d2:	d11b      	bne.n	800240c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	f043 0204 	orr.w	r2, r3, #4
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e267      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d075      	beq.n	8002526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800243a:	4b88      	ldr	r3, [pc, #544]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b04      	cmp	r3, #4
 8002444:	d00c      	beq.n	8002460 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002446:	4b85      	ldr	r3, [pc, #532]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800244e:	2b08      	cmp	r3, #8
 8002450:	d112      	bne.n	8002478 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002452:	4b82      	ldr	r3, [pc, #520]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800245a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800245e:	d10b      	bne.n	8002478 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	4b7e      	ldr	r3, [pc, #504]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d05b      	beq.n	8002524 <HAL_RCC_OscConfig+0x108>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d157      	bne.n	8002524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e242      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002480:	d106      	bne.n	8002490 <HAL_RCC_OscConfig+0x74>
 8002482:	4b76      	ldr	r3, [pc, #472]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a75      	ldr	r2, [pc, #468]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e01d      	b.n	80024cc <HAL_RCC_OscConfig+0xb0>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x98>
 800249a:	4b70      	ldr	r3, [pc, #448]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a6f      	ldr	r2, [pc, #444]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 80024a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b6d      	ldr	r3, [pc, #436]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6c      	ldr	r2, [pc, #432]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0xb0>
 80024b4:	4b69      	ldr	r3, [pc, #420]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a68      	ldr	r2, [pc, #416]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 80024ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b66      	ldr	r3, [pc, #408]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a65      	ldr	r2, [pc, #404]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 80024c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7ff f828 	bl	8001528 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024dc:	f7ff f824 	bl	8001528 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	@ 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e207      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b5b      	ldr	r3, [pc, #364]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0xc0>
 80024fa:	e014      	b.n	8002526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7ff f814 	bl	8001528 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002504:	f7ff f810 	bl	8001528 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	@ 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e1f3      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	4b51      	ldr	r3, [pc, #324]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0xe8>
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d063      	beq.n	80025fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002532:	4b4a      	ldr	r3, [pc, #296]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253e:	4b47      	ldr	r3, [pc, #284]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002546:	2b08      	cmp	r3, #8
 8002548:	d11c      	bne.n	8002584 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254a:	4b44      	ldr	r3, [pc, #272]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d116      	bne.n	8002584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	4b41      	ldr	r3, [pc, #260]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x152>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d001      	beq.n	800256e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e1c7      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256e:	4b3b      	ldr	r3, [pc, #236]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4937      	ldr	r1, [pc, #220]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	e03a      	b.n	80025fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d020      	beq.n	80025ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258c:	4b34      	ldr	r3, [pc, #208]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7fe ffc9 	bl	8001528 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259a:	f7fe ffc5 	bl	8001528 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e1a8      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ac:	4b2b      	ldr	r3, [pc, #172]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b28      	ldr	r3, [pc, #160]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4925      	ldr	r1, [pc, #148]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]
 80025cc:	e015      	b.n	80025fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ce:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe ffa8 	bl	8001528 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025dc:	f7fe ffa4 	bl	8001528 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e187      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ee:	4b1b      	ldr	r3, [pc, #108]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d036      	beq.n	8002674 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d016      	beq.n	800263c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260e:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <HAL_RCC_OscConfig+0x248>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002614:	f7fe ff88 	bl	8001528 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261c:	f7fe ff84 	bl	8001528 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e167      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262e:	4b0b      	ldr	r3, [pc, #44]	@ (800265c <HAL_RCC_OscConfig+0x240>)
 8002630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x200>
 800263a:	e01b      	b.n	8002674 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263c:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <HAL_RCC_OscConfig+0x248>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002642:	f7fe ff71 	bl	8001528 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002648:	e00e      	b.n	8002668 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264a:	f7fe ff6d 	bl	8001528 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d907      	bls.n	8002668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e150      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
 800265c:	40023800 	.word	0x40023800
 8002660:	42470000 	.word	0x42470000
 8002664:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002668:	4b88      	ldr	r3, [pc, #544]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 800266a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1ea      	bne.n	800264a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8097 	beq.w	80027b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002686:	4b81      	ldr	r3, [pc, #516]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10f      	bne.n	80026b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	4b7d      	ldr	r3, [pc, #500]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	4a7c      	ldr	r2, [pc, #496]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026a2:	4b7a      	ldr	r3, [pc, #488]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ae:	2301      	movs	r3, #1
 80026b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b2:	4b77      	ldr	r3, [pc, #476]	@ (8002890 <HAL_RCC_OscConfig+0x474>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026be:	4b74      	ldr	r3, [pc, #464]	@ (8002890 <HAL_RCC_OscConfig+0x474>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a73      	ldr	r2, [pc, #460]	@ (8002890 <HAL_RCC_OscConfig+0x474>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ca:	f7fe ff2d 	bl	8001528 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d2:	f7fe ff29 	bl	8001528 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e10c      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002890 <HAL_RCC_OscConfig+0x474>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x2ea>
 80026f8:	4b64      	ldr	r3, [pc, #400]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fc:	4a63      	ldr	r2, [pc, #396]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6713      	str	r3, [r2, #112]	@ 0x70
 8002704:	e01c      	b.n	8002740 <HAL_RCC_OscConfig+0x324>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b05      	cmp	r3, #5
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0x30c>
 800270e:	4b5f      	ldr	r3, [pc, #380]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002712:	4a5e      	ldr	r2, [pc, #376]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	6713      	str	r3, [r2, #112]	@ 0x70
 800271a:	4b5c      	ldr	r3, [pc, #368]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271e:	4a5b      	ldr	r2, [pc, #364]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6713      	str	r3, [r2, #112]	@ 0x70
 8002726:	e00b      	b.n	8002740 <HAL_RCC_OscConfig+0x324>
 8002728:	4b58      	ldr	r3, [pc, #352]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272c:	4a57      	ldr	r2, [pc, #348]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	6713      	str	r3, [r2, #112]	@ 0x70
 8002734:	4b55      	ldr	r3, [pc, #340]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002738:	4a54      	ldr	r2, [pc, #336]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 800273a:	f023 0304 	bic.w	r3, r3, #4
 800273e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d015      	beq.n	8002774 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7fe feee 	bl	8001528 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7fe feea 	bl	8001528 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0cb      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002766:	4b49      	ldr	r3, [pc, #292]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ee      	beq.n	8002750 <HAL_RCC_OscConfig+0x334>
 8002772:	e014      	b.n	800279e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002774:	f7fe fed8 	bl	8001528 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277a:	e00a      	b.n	8002792 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7fe fed4 	bl	8001528 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e0b5      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002792:	4b3e      	ldr	r3, [pc, #248]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1ee      	bne.n	800277c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d105      	bne.n	80027b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a4:	4b39      	ldr	r3, [pc, #228]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	4a38      	ldr	r2, [pc, #224]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 80027aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80a1 	beq.w	80028fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ba:	4b34      	ldr	r3, [pc, #208]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d05c      	beq.n	8002880 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d141      	bne.n	8002852 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ce:	4b31      	ldr	r3, [pc, #196]	@ (8002894 <HAL_RCC_OscConfig+0x478>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7fe fea8 	bl	8001528 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027dc:	f7fe fea4 	bl	8001528 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e087      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	4b27      	ldr	r3, [pc, #156]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	019b      	lsls	r3, r3, #6
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002810:	085b      	lsrs	r3, r3, #1
 8002812:	3b01      	subs	r3, #1
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	491b      	ldr	r1, [pc, #108]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002824:	4b1b      	ldr	r3, [pc, #108]	@ (8002894 <HAL_RCC_OscConfig+0x478>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7fe fe7d 	bl	8001528 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002832:	f7fe fe79 	bl	8001528 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e05c      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002844:	4b11      	ldr	r3, [pc, #68]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x416>
 8002850:	e054      	b.n	80028fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002852:	4b10      	ldr	r3, [pc, #64]	@ (8002894 <HAL_RCC_OscConfig+0x478>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fe fe66 	bl	8001528 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002860:	f7fe fe62 	bl	8001528 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e045      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	4b06      	ldr	r3, [pc, #24]	@ (800288c <HAL_RCC_OscConfig+0x470>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x444>
 800287e:	e03d      	b.n	80028fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d107      	bne.n	8002898 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e038      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
 800288c:	40023800 	.word	0x40023800
 8002890:	40007000 	.word	0x40007000
 8002894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002898:	4b1b      	ldr	r3, [pc, #108]	@ (8002908 <HAL_RCC_OscConfig+0x4ec>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d028      	beq.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d121      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d11a      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028c8:	4013      	ands	r3, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d111      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028de:	085b      	lsrs	r3, r3, #1
 80028e0:	3b01      	subs	r3, #1
 80028e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d107      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800

0800290c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0cc      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002920:	4b68      	ldr	r3, [pc, #416]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d90c      	bls.n	8002948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b65      	ldr	r3, [pc, #404]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b63      	ldr	r3, [pc, #396]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0b8      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002960:	4b59      	ldr	r3, [pc, #356]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	4a58      	ldr	r2, [pc, #352]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800296a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002978:	4b53      	ldr	r3, [pc, #332]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a52      	ldr	r2, [pc, #328]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002984:	4b50      	ldr	r3, [pc, #320]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	494d      	ldr	r1, [pc, #308]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d044      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b47      	ldr	r3, [pc, #284]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d119      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e07f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d003      	beq.n	80029ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ca:	4b3f      	ldr	r3, [pc, #252]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e06f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029da:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e067      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ea:	4b37      	ldr	r3, [pc, #220]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f023 0203 	bic.w	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4934      	ldr	r1, [pc, #208]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029fc:	f7fe fd94 	bl	8001528 <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a04:	f7fe fd90 	bl	8001528 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e04f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 020c 	and.w	r2, r3, #12
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d1eb      	bne.n	8002a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b25      	ldr	r3, [pc, #148]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d20c      	bcs.n	8002a54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b22      	ldr	r3, [pc, #136]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b20      	ldr	r3, [pc, #128]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e032      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a60:	4b19      	ldr	r3, [pc, #100]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4916      	ldr	r1, [pc, #88]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a7e:	4b12      	ldr	r3, [pc, #72]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	490e      	ldr	r1, [pc, #56]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a92:	f000 f821 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002a96:	4602      	mov	r2, r0
 8002a98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	490a      	ldr	r1, [pc, #40]	@ (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002aa4:	5ccb      	ldrb	r3, [r1, r3]
 8002aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aaa:	4a09      	ldr	r2, [pc, #36]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002aae:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe fcf4 	bl	80014a0 <HAL_InitTick>

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023c00 	.word	0x40023c00
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	08003c4c 	.word	0x08003c4c
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000004 	.word	0x20000004

08002ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002adc:	b094      	sub	sp, #80	@ 0x50
 8002ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002af0:	4b79      	ldr	r3, [pc, #484]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d00d      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x40>
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	f200 80e1 	bhi.w	8002cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x34>
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d003      	beq.n	8002b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b0a:	e0db      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b0c:	4b73      	ldr	r3, [pc, #460]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8002b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b10:	e0db      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b12:	4b73      	ldr	r3, [pc, #460]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b16:	e0d8      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b18:	4b6f      	ldr	r3, [pc, #444]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b20:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b22:	4b6d      	ldr	r3, [pc, #436]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d063      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	099b      	lsrs	r3, r3, #6
 8002b34:	2200      	movs	r2, #0
 8002b36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b38:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b40:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b42:	2300      	movs	r3, #0
 8002b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b4a:	4622      	mov	r2, r4
 8002b4c:	462b      	mov	r3, r5
 8002b4e:	f04f 0000 	mov.w	r0, #0
 8002b52:	f04f 0100 	mov.w	r1, #0
 8002b56:	0159      	lsls	r1, r3, #5
 8002b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b5c:	0150      	lsls	r0, r2, #5
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4621      	mov	r1, r4
 8002b64:	1a51      	subs	r1, r2, r1
 8002b66:	6139      	str	r1, [r7, #16]
 8002b68:	4629      	mov	r1, r5
 8002b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b7c:	4659      	mov	r1, fp
 8002b7e:	018b      	lsls	r3, r1, #6
 8002b80:	4651      	mov	r1, sl
 8002b82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b86:	4651      	mov	r1, sl
 8002b88:	018a      	lsls	r2, r1, #6
 8002b8a:	4651      	mov	r1, sl
 8002b8c:	ebb2 0801 	subs.w	r8, r2, r1
 8002b90:	4659      	mov	r1, fp
 8002b92:	eb63 0901 	sbc.w	r9, r3, r1
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002baa:	4690      	mov	r8, r2
 8002bac:	4699      	mov	r9, r3
 8002bae:	4623      	mov	r3, r4
 8002bb0:	eb18 0303 	adds.w	r3, r8, r3
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	462b      	mov	r3, r5
 8002bb8:	eb49 0303 	adc.w	r3, r9, r3
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bca:	4629      	mov	r1, r5
 8002bcc:	024b      	lsls	r3, r1, #9
 8002bce:	4621      	mov	r1, r4
 8002bd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	024a      	lsls	r2, r1, #9
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bde:	2200      	movs	r2, #0
 8002be0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002be2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002be4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002be8:	f7fd faf4 	bl	80001d4 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bf4:	e058      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf6:	4b38      	ldr	r3, [pc, #224]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	099b      	lsrs	r3, r3, #6
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	4611      	mov	r1, r2
 8002c02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c06:	623b      	str	r3, [r7, #32]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c10:	4642      	mov	r2, r8
 8002c12:	464b      	mov	r3, r9
 8002c14:	f04f 0000 	mov.w	r0, #0
 8002c18:	f04f 0100 	mov.w	r1, #0
 8002c1c:	0159      	lsls	r1, r3, #5
 8002c1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c22:	0150      	lsls	r0, r2, #5
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4641      	mov	r1, r8
 8002c2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c2e:	4649      	mov	r1, r9
 8002c30:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c48:	ebb2 040a 	subs.w	r4, r2, sl
 8002c4c:	eb63 050b 	sbc.w	r5, r3, fp
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	00eb      	lsls	r3, r5, #3
 8002c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c5e:	00e2      	lsls	r2, r4, #3
 8002c60:	4614      	mov	r4, r2
 8002c62:	461d      	mov	r5, r3
 8002c64:	4643      	mov	r3, r8
 8002c66:	18e3      	adds	r3, r4, r3
 8002c68:	603b      	str	r3, [r7, #0]
 8002c6a:	464b      	mov	r3, r9
 8002c6c:	eb45 0303 	adc.w	r3, r5, r3
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c7e:	4629      	mov	r1, r5
 8002c80:	028b      	lsls	r3, r1, #10
 8002c82:	4621      	mov	r1, r4
 8002c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c88:	4621      	mov	r1, r4
 8002c8a:	028a      	lsls	r2, r1, #10
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c92:	2200      	movs	r2, #0
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	61fa      	str	r2, [r7, #28]
 8002c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c9c:	f7fd fa9a 	bl	80001d4 <__aeabi_uldivmod>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	0c1b      	lsrs	r3, r3, #16
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002cb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cc2:	e002      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc4:	4b05      	ldr	r3, [pc, #20]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8002cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3750      	adds	r7, #80	@ 0x50
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	00f42400 	.word	0x00f42400
 8002ce0:	007a1200 	.word	0x007a1200

08002ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	@ (8002cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	20000000 	.word	0x20000000

08002cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d00:	f7ff fff0 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b05      	ldr	r3, [pc, #20]	@ (8002d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	0a9b      	lsrs	r3, r3, #10
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	4903      	ldr	r1, [pc, #12]	@ (8002d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d12:	5ccb      	ldrb	r3, [r1, r3]
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	08003c5c 	.word	0x08003c5c

08002d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d28:	f7ff ffdc 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	0b5b      	lsrs	r3, r3, #13
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	4903      	ldr	r1, [pc, #12]	@ (8002d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d3a:	5ccb      	ldrb	r3, [r1, r3]
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40023800 	.word	0x40023800
 8002d48:	08003c5c 	.word	0x08003c5c

08002d4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e042      	b.n	8002de4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fe f80c 	bl	8000d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2224      	movs	r2, #36	@ 0x24
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f82b 	bl	8002dec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002db4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df0:	b0c0      	sub	sp, #256	@ 0x100
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e08:	68d9      	ldr	r1, [r3, #12]
 8002e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	ea40 0301 	orr.w	r3, r0, r1
 8002e14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e44:	f021 010c 	bic.w	r1, r1, #12
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e52:	430b      	orrs	r3, r1
 8002e54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e66:	6999      	ldr	r1, [r3, #24]
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	ea40 0301 	orr.w	r3, r0, r1
 8002e72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	4b8f      	ldr	r3, [pc, #572]	@ (80030b8 <UART_SetConfig+0x2cc>)
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d005      	beq.n	8002e8c <UART_SetConfig+0xa0>
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4b8d      	ldr	r3, [pc, #564]	@ (80030bc <UART_SetConfig+0x2d0>)
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d104      	bne.n	8002e96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e8c:	f7ff ff4a 	bl	8002d24 <HAL_RCC_GetPCLK2Freq>
 8002e90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e94:	e003      	b.n	8002e9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e96:	f7ff ff31 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 8002e9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ea8:	f040 810c 	bne.w	80030c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002eb6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002eba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ebe:	4622      	mov	r2, r4
 8002ec0:	462b      	mov	r3, r5
 8002ec2:	1891      	adds	r1, r2, r2
 8002ec4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ec6:	415b      	adcs	r3, r3
 8002ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002eca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ece:	4621      	mov	r1, r4
 8002ed0:	eb12 0801 	adds.w	r8, r2, r1
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	eb43 0901 	adc.w	r9, r3, r1
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ee6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eee:	4690      	mov	r8, r2
 8002ef0:	4699      	mov	r9, r3
 8002ef2:	4623      	mov	r3, r4
 8002ef4:	eb18 0303 	adds.w	r3, r8, r3
 8002ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002efc:	462b      	mov	r3, r5
 8002efe:	eb49 0303 	adc.w	r3, r9, r3
 8002f02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f12:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	18db      	adds	r3, r3, r3
 8002f1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f20:	4613      	mov	r3, r2
 8002f22:	eb42 0303 	adc.w	r3, r2, r3
 8002f26:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f30:	f7fd f950 	bl	80001d4 <__aeabi_uldivmod>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4b61      	ldr	r3, [pc, #388]	@ (80030c0 <UART_SetConfig+0x2d4>)
 8002f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	011c      	lsls	r4, r3, #4
 8002f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f46:	2200      	movs	r2, #0
 8002f48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f4c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f54:	4642      	mov	r2, r8
 8002f56:	464b      	mov	r3, r9
 8002f58:	1891      	adds	r1, r2, r2
 8002f5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f5c:	415b      	adcs	r3, r3
 8002f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f64:	4641      	mov	r1, r8
 8002f66:	eb12 0a01 	adds.w	sl, r2, r1
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	eb43 0b01 	adc.w	fp, r3, r1
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f84:	4692      	mov	sl, r2
 8002f86:	469b      	mov	fp, r3
 8002f88:	4643      	mov	r3, r8
 8002f8a:	eb1a 0303 	adds.w	r3, sl, r3
 8002f8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f92:	464b      	mov	r3, r9
 8002f94:	eb4b 0303 	adc.w	r3, fp, r3
 8002f98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fa8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002fac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	18db      	adds	r3, r3, r3
 8002fb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	eb42 0303 	adc.w	r3, r2, r3
 8002fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fc6:	f7fd f905 	bl	80001d4 <__aeabi_uldivmod>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80030c0 <UART_SetConfig+0x2d4>)
 8002fd2:	fba3 2301 	umull	r2, r3, r3, r1
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2264      	movs	r2, #100	@ 0x64
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	1acb      	subs	r3, r1, r3
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002fe6:	4b36      	ldr	r3, [pc, #216]	@ (80030c0 <UART_SetConfig+0x2d4>)
 8002fe8:	fba3 2302 	umull	r2, r3, r3, r2
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ff4:	441c      	add	r4, r3
 8002ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003000:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003004:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003008:	4642      	mov	r2, r8
 800300a:	464b      	mov	r3, r9
 800300c:	1891      	adds	r1, r2, r2
 800300e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003010:	415b      	adcs	r3, r3
 8003012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003014:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003018:	4641      	mov	r1, r8
 800301a:	1851      	adds	r1, r2, r1
 800301c:	6339      	str	r1, [r7, #48]	@ 0x30
 800301e:	4649      	mov	r1, r9
 8003020:	414b      	adcs	r3, r1
 8003022:	637b      	str	r3, [r7, #52]	@ 0x34
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003030:	4659      	mov	r1, fp
 8003032:	00cb      	lsls	r3, r1, #3
 8003034:	4651      	mov	r1, sl
 8003036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800303a:	4651      	mov	r1, sl
 800303c:	00ca      	lsls	r2, r1, #3
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	4603      	mov	r3, r0
 8003044:	4642      	mov	r2, r8
 8003046:	189b      	adds	r3, r3, r2
 8003048:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800304c:	464b      	mov	r3, r9
 800304e:	460a      	mov	r2, r1
 8003050:	eb42 0303 	adc.w	r3, r2, r3
 8003054:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003064:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003068:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800306c:	460b      	mov	r3, r1
 800306e:	18db      	adds	r3, r3, r3
 8003070:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003072:	4613      	mov	r3, r2
 8003074:	eb42 0303 	adc.w	r3, r2, r3
 8003078:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800307a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800307e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003082:	f7fd f8a7 	bl	80001d4 <__aeabi_uldivmod>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4b0d      	ldr	r3, [pc, #52]	@ (80030c0 <UART_SetConfig+0x2d4>)
 800308c:	fba3 1302 	umull	r1, r3, r3, r2
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	2164      	movs	r1, #100	@ 0x64
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	3332      	adds	r3, #50	@ 0x32
 800309e:	4a08      	ldr	r2, [pc, #32]	@ (80030c0 <UART_SetConfig+0x2d4>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	f003 0207 	and.w	r2, r3, #7
 80030aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4422      	add	r2, r4
 80030b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030b4:	e106      	b.n	80032c4 <UART_SetConfig+0x4d8>
 80030b6:	bf00      	nop
 80030b8:	40011000 	.word	0x40011000
 80030bc:	40011400 	.word	0x40011400
 80030c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030c8:	2200      	movs	r2, #0
 80030ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030d6:	4642      	mov	r2, r8
 80030d8:	464b      	mov	r3, r9
 80030da:	1891      	adds	r1, r2, r2
 80030dc:	6239      	str	r1, [r7, #32]
 80030de:	415b      	adcs	r3, r3
 80030e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030e6:	4641      	mov	r1, r8
 80030e8:	1854      	adds	r4, r2, r1
 80030ea:	4649      	mov	r1, r9
 80030ec:	eb43 0501 	adc.w	r5, r3, r1
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	00eb      	lsls	r3, r5, #3
 80030fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030fe:	00e2      	lsls	r2, r4, #3
 8003100:	4614      	mov	r4, r2
 8003102:	461d      	mov	r5, r3
 8003104:	4643      	mov	r3, r8
 8003106:	18e3      	adds	r3, r4, r3
 8003108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800310c:	464b      	mov	r3, r9
 800310e:	eb45 0303 	adc.w	r3, r5, r3
 8003112:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003122:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003132:	4629      	mov	r1, r5
 8003134:	008b      	lsls	r3, r1, #2
 8003136:	4621      	mov	r1, r4
 8003138:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800313c:	4621      	mov	r1, r4
 800313e:	008a      	lsls	r2, r1, #2
 8003140:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003144:	f7fd f846 	bl	80001d4 <__aeabi_uldivmod>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4b60      	ldr	r3, [pc, #384]	@ (80032d0 <UART_SetConfig+0x4e4>)
 800314e:	fba3 2302 	umull	r2, r3, r3, r2
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	011c      	lsls	r4, r3, #4
 8003156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800315a:	2200      	movs	r2, #0
 800315c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003160:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003164:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003168:	4642      	mov	r2, r8
 800316a:	464b      	mov	r3, r9
 800316c:	1891      	adds	r1, r2, r2
 800316e:	61b9      	str	r1, [r7, #24]
 8003170:	415b      	adcs	r3, r3
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003178:	4641      	mov	r1, r8
 800317a:	1851      	adds	r1, r2, r1
 800317c:	6139      	str	r1, [r7, #16]
 800317e:	4649      	mov	r1, r9
 8003180:	414b      	adcs	r3, r1
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003190:	4659      	mov	r1, fp
 8003192:	00cb      	lsls	r3, r1, #3
 8003194:	4651      	mov	r1, sl
 8003196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800319a:	4651      	mov	r1, sl
 800319c:	00ca      	lsls	r2, r1, #3
 800319e:	4610      	mov	r0, r2
 80031a0:	4619      	mov	r1, r3
 80031a2:	4603      	mov	r3, r0
 80031a4:	4642      	mov	r2, r8
 80031a6:	189b      	adds	r3, r3, r2
 80031a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031ac:	464b      	mov	r3, r9
 80031ae:	460a      	mov	r2, r1
 80031b0:	eb42 0303 	adc.w	r3, r2, r3
 80031b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031d0:	4649      	mov	r1, r9
 80031d2:	008b      	lsls	r3, r1, #2
 80031d4:	4641      	mov	r1, r8
 80031d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031da:	4641      	mov	r1, r8
 80031dc:	008a      	lsls	r2, r1, #2
 80031de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031e2:	f7fc fff7 	bl	80001d4 <__aeabi_uldivmod>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4611      	mov	r1, r2
 80031ec:	4b38      	ldr	r3, [pc, #224]	@ (80032d0 <UART_SetConfig+0x4e4>)
 80031ee:	fba3 2301 	umull	r2, r3, r3, r1
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	2264      	movs	r2, #100	@ 0x64
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	1acb      	subs	r3, r1, r3
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	3332      	adds	r3, #50	@ 0x32
 8003200:	4a33      	ldr	r2, [pc, #204]	@ (80032d0 <UART_SetConfig+0x4e4>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800320c:	441c      	add	r4, r3
 800320e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003212:	2200      	movs	r2, #0
 8003214:	673b      	str	r3, [r7, #112]	@ 0x70
 8003216:	677a      	str	r2, [r7, #116]	@ 0x74
 8003218:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800321c:	4642      	mov	r2, r8
 800321e:	464b      	mov	r3, r9
 8003220:	1891      	adds	r1, r2, r2
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	415b      	adcs	r3, r3
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800322c:	4641      	mov	r1, r8
 800322e:	1851      	adds	r1, r2, r1
 8003230:	6039      	str	r1, [r7, #0]
 8003232:	4649      	mov	r1, r9
 8003234:	414b      	adcs	r3, r1
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003244:	4659      	mov	r1, fp
 8003246:	00cb      	lsls	r3, r1, #3
 8003248:	4651      	mov	r1, sl
 800324a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800324e:	4651      	mov	r1, sl
 8003250:	00ca      	lsls	r2, r1, #3
 8003252:	4610      	mov	r0, r2
 8003254:	4619      	mov	r1, r3
 8003256:	4603      	mov	r3, r0
 8003258:	4642      	mov	r2, r8
 800325a:	189b      	adds	r3, r3, r2
 800325c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800325e:	464b      	mov	r3, r9
 8003260:	460a      	mov	r2, r1
 8003262:	eb42 0303 	adc.w	r3, r2, r3
 8003266:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	663b      	str	r3, [r7, #96]	@ 0x60
 8003272:	667a      	str	r2, [r7, #100]	@ 0x64
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003280:	4649      	mov	r1, r9
 8003282:	008b      	lsls	r3, r1, #2
 8003284:	4641      	mov	r1, r8
 8003286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800328a:	4641      	mov	r1, r8
 800328c:	008a      	lsls	r2, r1, #2
 800328e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003292:	f7fc ff9f 	bl	80001d4 <__aeabi_uldivmod>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	4b0d      	ldr	r3, [pc, #52]	@ (80032d0 <UART_SetConfig+0x4e4>)
 800329c:	fba3 1302 	umull	r1, r3, r3, r2
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	2164      	movs	r1, #100	@ 0x64
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	3332      	adds	r3, #50	@ 0x32
 80032ae:	4a08      	ldr	r2, [pc, #32]	@ (80032d0 <UART_SetConfig+0x4e4>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	f003 020f 	and.w	r2, r3, #15
 80032ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4422      	add	r2, r4
 80032c2:	609a      	str	r2, [r3, #8]
}
 80032c4:	bf00      	nop
 80032c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032ca:	46bd      	mov	sp, r7
 80032cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032d0:	51eb851f 	.word	0x51eb851f

080032d4 <std>:
 80032d4:	2300      	movs	r3, #0
 80032d6:	b510      	push	{r4, lr}
 80032d8:	4604      	mov	r4, r0
 80032da:	e9c0 3300 	strd	r3, r3, [r0]
 80032de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032e2:	6083      	str	r3, [r0, #8]
 80032e4:	8181      	strh	r1, [r0, #12]
 80032e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80032e8:	81c2      	strh	r2, [r0, #14]
 80032ea:	6183      	str	r3, [r0, #24]
 80032ec:	4619      	mov	r1, r3
 80032ee:	2208      	movs	r2, #8
 80032f0:	305c      	adds	r0, #92	@ 0x5c
 80032f2:	f000 f9e7 	bl	80036c4 <memset>
 80032f6:	4b0d      	ldr	r3, [pc, #52]	@ (800332c <std+0x58>)
 80032f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80032fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003330 <std+0x5c>)
 80032fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80032fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003334 <std+0x60>)
 8003300:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003302:	4b0d      	ldr	r3, [pc, #52]	@ (8003338 <std+0x64>)
 8003304:	6323      	str	r3, [r4, #48]	@ 0x30
 8003306:	4b0d      	ldr	r3, [pc, #52]	@ (800333c <std+0x68>)
 8003308:	6224      	str	r4, [r4, #32]
 800330a:	429c      	cmp	r4, r3
 800330c:	d006      	beq.n	800331c <std+0x48>
 800330e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003312:	4294      	cmp	r4, r2
 8003314:	d002      	beq.n	800331c <std+0x48>
 8003316:	33d0      	adds	r3, #208	@ 0xd0
 8003318:	429c      	cmp	r4, r3
 800331a:	d105      	bne.n	8003328 <std+0x54>
 800331c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003324:	f000 ba46 	b.w	80037b4 <__retarget_lock_init_recursive>
 8003328:	bd10      	pop	{r4, pc}
 800332a:	bf00      	nop
 800332c:	08003515 	.word	0x08003515
 8003330:	08003537 	.word	0x08003537
 8003334:	0800356f 	.word	0x0800356f
 8003338:	08003593 	.word	0x08003593
 800333c:	20000530 	.word	0x20000530

08003340 <stdio_exit_handler>:
 8003340:	4a02      	ldr	r2, [pc, #8]	@ (800334c <stdio_exit_handler+0xc>)
 8003342:	4903      	ldr	r1, [pc, #12]	@ (8003350 <stdio_exit_handler+0x10>)
 8003344:	4803      	ldr	r0, [pc, #12]	@ (8003354 <stdio_exit_handler+0x14>)
 8003346:	f000 b869 	b.w	800341c <_fwalk_sglue>
 800334a:	bf00      	nop
 800334c:	2000000c 	.word	0x2000000c
 8003350:	08003ab5 	.word	0x08003ab5
 8003354:	2000001c 	.word	0x2000001c

08003358 <cleanup_stdio>:
 8003358:	6841      	ldr	r1, [r0, #4]
 800335a:	4b0c      	ldr	r3, [pc, #48]	@ (800338c <cleanup_stdio+0x34>)
 800335c:	4299      	cmp	r1, r3
 800335e:	b510      	push	{r4, lr}
 8003360:	4604      	mov	r4, r0
 8003362:	d001      	beq.n	8003368 <cleanup_stdio+0x10>
 8003364:	f000 fba6 	bl	8003ab4 <_fflush_r>
 8003368:	68a1      	ldr	r1, [r4, #8]
 800336a:	4b09      	ldr	r3, [pc, #36]	@ (8003390 <cleanup_stdio+0x38>)
 800336c:	4299      	cmp	r1, r3
 800336e:	d002      	beq.n	8003376 <cleanup_stdio+0x1e>
 8003370:	4620      	mov	r0, r4
 8003372:	f000 fb9f 	bl	8003ab4 <_fflush_r>
 8003376:	68e1      	ldr	r1, [r4, #12]
 8003378:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <cleanup_stdio+0x3c>)
 800337a:	4299      	cmp	r1, r3
 800337c:	d004      	beq.n	8003388 <cleanup_stdio+0x30>
 800337e:	4620      	mov	r0, r4
 8003380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003384:	f000 bb96 	b.w	8003ab4 <_fflush_r>
 8003388:	bd10      	pop	{r4, pc}
 800338a:	bf00      	nop
 800338c:	20000530 	.word	0x20000530
 8003390:	20000598 	.word	0x20000598
 8003394:	20000600 	.word	0x20000600

08003398 <global_stdio_init.part.0>:
 8003398:	b510      	push	{r4, lr}
 800339a:	4b0b      	ldr	r3, [pc, #44]	@ (80033c8 <global_stdio_init.part.0+0x30>)
 800339c:	4c0b      	ldr	r4, [pc, #44]	@ (80033cc <global_stdio_init.part.0+0x34>)
 800339e:	4a0c      	ldr	r2, [pc, #48]	@ (80033d0 <global_stdio_init.part.0+0x38>)
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	4620      	mov	r0, r4
 80033a4:	2200      	movs	r2, #0
 80033a6:	2104      	movs	r1, #4
 80033a8:	f7ff ff94 	bl	80032d4 <std>
 80033ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80033b0:	2201      	movs	r2, #1
 80033b2:	2109      	movs	r1, #9
 80033b4:	f7ff ff8e 	bl	80032d4 <std>
 80033b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80033bc:	2202      	movs	r2, #2
 80033be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c2:	2112      	movs	r1, #18
 80033c4:	f7ff bf86 	b.w	80032d4 <std>
 80033c8:	20000668 	.word	0x20000668
 80033cc:	20000530 	.word	0x20000530
 80033d0:	08003341 	.word	0x08003341

080033d4 <__sfp_lock_acquire>:
 80033d4:	4801      	ldr	r0, [pc, #4]	@ (80033dc <__sfp_lock_acquire+0x8>)
 80033d6:	f000 b9ee 	b.w	80037b6 <__retarget_lock_acquire_recursive>
 80033da:	bf00      	nop
 80033dc:	20000671 	.word	0x20000671

080033e0 <__sfp_lock_release>:
 80033e0:	4801      	ldr	r0, [pc, #4]	@ (80033e8 <__sfp_lock_release+0x8>)
 80033e2:	f000 b9e9 	b.w	80037b8 <__retarget_lock_release_recursive>
 80033e6:	bf00      	nop
 80033e8:	20000671 	.word	0x20000671

080033ec <__sinit>:
 80033ec:	b510      	push	{r4, lr}
 80033ee:	4604      	mov	r4, r0
 80033f0:	f7ff fff0 	bl	80033d4 <__sfp_lock_acquire>
 80033f4:	6a23      	ldr	r3, [r4, #32]
 80033f6:	b11b      	cbz	r3, 8003400 <__sinit+0x14>
 80033f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033fc:	f7ff bff0 	b.w	80033e0 <__sfp_lock_release>
 8003400:	4b04      	ldr	r3, [pc, #16]	@ (8003414 <__sinit+0x28>)
 8003402:	6223      	str	r3, [r4, #32]
 8003404:	4b04      	ldr	r3, [pc, #16]	@ (8003418 <__sinit+0x2c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f5      	bne.n	80033f8 <__sinit+0xc>
 800340c:	f7ff ffc4 	bl	8003398 <global_stdio_init.part.0>
 8003410:	e7f2      	b.n	80033f8 <__sinit+0xc>
 8003412:	bf00      	nop
 8003414:	08003359 	.word	0x08003359
 8003418:	20000668 	.word	0x20000668

0800341c <_fwalk_sglue>:
 800341c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003420:	4607      	mov	r7, r0
 8003422:	4688      	mov	r8, r1
 8003424:	4614      	mov	r4, r2
 8003426:	2600      	movs	r6, #0
 8003428:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800342c:	f1b9 0901 	subs.w	r9, r9, #1
 8003430:	d505      	bpl.n	800343e <_fwalk_sglue+0x22>
 8003432:	6824      	ldr	r4, [r4, #0]
 8003434:	2c00      	cmp	r4, #0
 8003436:	d1f7      	bne.n	8003428 <_fwalk_sglue+0xc>
 8003438:	4630      	mov	r0, r6
 800343a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800343e:	89ab      	ldrh	r3, [r5, #12]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d907      	bls.n	8003454 <_fwalk_sglue+0x38>
 8003444:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003448:	3301      	adds	r3, #1
 800344a:	d003      	beq.n	8003454 <_fwalk_sglue+0x38>
 800344c:	4629      	mov	r1, r5
 800344e:	4638      	mov	r0, r7
 8003450:	47c0      	blx	r8
 8003452:	4306      	orrs	r6, r0
 8003454:	3568      	adds	r5, #104	@ 0x68
 8003456:	e7e9      	b.n	800342c <_fwalk_sglue+0x10>

08003458 <_puts_r>:
 8003458:	6a03      	ldr	r3, [r0, #32]
 800345a:	b570      	push	{r4, r5, r6, lr}
 800345c:	6884      	ldr	r4, [r0, #8]
 800345e:	4605      	mov	r5, r0
 8003460:	460e      	mov	r6, r1
 8003462:	b90b      	cbnz	r3, 8003468 <_puts_r+0x10>
 8003464:	f7ff ffc2 	bl	80033ec <__sinit>
 8003468:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800346a:	07db      	lsls	r3, r3, #31
 800346c:	d405      	bmi.n	800347a <_puts_r+0x22>
 800346e:	89a3      	ldrh	r3, [r4, #12]
 8003470:	0598      	lsls	r0, r3, #22
 8003472:	d402      	bmi.n	800347a <_puts_r+0x22>
 8003474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003476:	f000 f99e 	bl	80037b6 <__retarget_lock_acquire_recursive>
 800347a:	89a3      	ldrh	r3, [r4, #12]
 800347c:	0719      	lsls	r1, r3, #28
 800347e:	d502      	bpl.n	8003486 <_puts_r+0x2e>
 8003480:	6923      	ldr	r3, [r4, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d135      	bne.n	80034f2 <_puts_r+0x9a>
 8003486:	4621      	mov	r1, r4
 8003488:	4628      	mov	r0, r5
 800348a:	f000 f8c5 	bl	8003618 <__swsetup_r>
 800348e:	b380      	cbz	r0, 80034f2 <_puts_r+0x9a>
 8003490:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003494:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003496:	07da      	lsls	r2, r3, #31
 8003498:	d405      	bmi.n	80034a6 <_puts_r+0x4e>
 800349a:	89a3      	ldrh	r3, [r4, #12]
 800349c:	059b      	lsls	r3, r3, #22
 800349e:	d402      	bmi.n	80034a6 <_puts_r+0x4e>
 80034a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034a2:	f000 f989 	bl	80037b8 <__retarget_lock_release_recursive>
 80034a6:	4628      	mov	r0, r5
 80034a8:	bd70      	pop	{r4, r5, r6, pc}
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	da04      	bge.n	80034b8 <_puts_r+0x60>
 80034ae:	69a2      	ldr	r2, [r4, #24]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	dc17      	bgt.n	80034e4 <_puts_r+0x8c>
 80034b4:	290a      	cmp	r1, #10
 80034b6:	d015      	beq.n	80034e4 <_puts_r+0x8c>
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	6022      	str	r2, [r4, #0]
 80034be:	7019      	strb	r1, [r3, #0]
 80034c0:	68a3      	ldr	r3, [r4, #8]
 80034c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034c6:	3b01      	subs	r3, #1
 80034c8:	60a3      	str	r3, [r4, #8]
 80034ca:	2900      	cmp	r1, #0
 80034cc:	d1ed      	bne.n	80034aa <_puts_r+0x52>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	da11      	bge.n	80034f6 <_puts_r+0x9e>
 80034d2:	4622      	mov	r2, r4
 80034d4:	210a      	movs	r1, #10
 80034d6:	4628      	mov	r0, r5
 80034d8:	f000 f85f 	bl	800359a <__swbuf_r>
 80034dc:	3001      	adds	r0, #1
 80034de:	d0d7      	beq.n	8003490 <_puts_r+0x38>
 80034e0:	250a      	movs	r5, #10
 80034e2:	e7d7      	b.n	8003494 <_puts_r+0x3c>
 80034e4:	4622      	mov	r2, r4
 80034e6:	4628      	mov	r0, r5
 80034e8:	f000 f857 	bl	800359a <__swbuf_r>
 80034ec:	3001      	adds	r0, #1
 80034ee:	d1e7      	bne.n	80034c0 <_puts_r+0x68>
 80034f0:	e7ce      	b.n	8003490 <_puts_r+0x38>
 80034f2:	3e01      	subs	r6, #1
 80034f4:	e7e4      	b.n	80034c0 <_puts_r+0x68>
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	6022      	str	r2, [r4, #0]
 80034fc:	220a      	movs	r2, #10
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	e7ee      	b.n	80034e0 <_puts_r+0x88>
	...

08003504 <puts>:
 8003504:	4b02      	ldr	r3, [pc, #8]	@ (8003510 <puts+0xc>)
 8003506:	4601      	mov	r1, r0
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	f7ff bfa5 	b.w	8003458 <_puts_r>
 800350e:	bf00      	nop
 8003510:	20000018 	.word	0x20000018

08003514 <__sread>:
 8003514:	b510      	push	{r4, lr}
 8003516:	460c      	mov	r4, r1
 8003518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800351c:	f000 f8fc 	bl	8003718 <_read_r>
 8003520:	2800      	cmp	r0, #0
 8003522:	bfab      	itete	ge
 8003524:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003526:	89a3      	ldrhlt	r3, [r4, #12]
 8003528:	181b      	addge	r3, r3, r0
 800352a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800352e:	bfac      	ite	ge
 8003530:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003532:	81a3      	strhlt	r3, [r4, #12]
 8003534:	bd10      	pop	{r4, pc}

08003536 <__swrite>:
 8003536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800353a:	461f      	mov	r7, r3
 800353c:	898b      	ldrh	r3, [r1, #12]
 800353e:	05db      	lsls	r3, r3, #23
 8003540:	4605      	mov	r5, r0
 8003542:	460c      	mov	r4, r1
 8003544:	4616      	mov	r6, r2
 8003546:	d505      	bpl.n	8003554 <__swrite+0x1e>
 8003548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800354c:	2302      	movs	r3, #2
 800354e:	2200      	movs	r2, #0
 8003550:	f000 f8d0 	bl	80036f4 <_lseek_r>
 8003554:	89a3      	ldrh	r3, [r4, #12]
 8003556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800355a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800355e:	81a3      	strh	r3, [r4, #12]
 8003560:	4632      	mov	r2, r6
 8003562:	463b      	mov	r3, r7
 8003564:	4628      	mov	r0, r5
 8003566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800356a:	f000 b8e7 	b.w	800373c <_write_r>

0800356e <__sseek>:
 800356e:	b510      	push	{r4, lr}
 8003570:	460c      	mov	r4, r1
 8003572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003576:	f000 f8bd 	bl	80036f4 <_lseek_r>
 800357a:	1c43      	adds	r3, r0, #1
 800357c:	89a3      	ldrh	r3, [r4, #12]
 800357e:	bf15      	itete	ne
 8003580:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003582:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003586:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800358a:	81a3      	strheq	r3, [r4, #12]
 800358c:	bf18      	it	ne
 800358e:	81a3      	strhne	r3, [r4, #12]
 8003590:	bd10      	pop	{r4, pc}

08003592 <__sclose>:
 8003592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003596:	f000 b89d 	b.w	80036d4 <_close_r>

0800359a <__swbuf_r>:
 800359a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359c:	460e      	mov	r6, r1
 800359e:	4614      	mov	r4, r2
 80035a0:	4605      	mov	r5, r0
 80035a2:	b118      	cbz	r0, 80035ac <__swbuf_r+0x12>
 80035a4:	6a03      	ldr	r3, [r0, #32]
 80035a6:	b90b      	cbnz	r3, 80035ac <__swbuf_r+0x12>
 80035a8:	f7ff ff20 	bl	80033ec <__sinit>
 80035ac:	69a3      	ldr	r3, [r4, #24]
 80035ae:	60a3      	str	r3, [r4, #8]
 80035b0:	89a3      	ldrh	r3, [r4, #12]
 80035b2:	071a      	lsls	r2, r3, #28
 80035b4:	d501      	bpl.n	80035ba <__swbuf_r+0x20>
 80035b6:	6923      	ldr	r3, [r4, #16]
 80035b8:	b943      	cbnz	r3, 80035cc <__swbuf_r+0x32>
 80035ba:	4621      	mov	r1, r4
 80035bc:	4628      	mov	r0, r5
 80035be:	f000 f82b 	bl	8003618 <__swsetup_r>
 80035c2:	b118      	cbz	r0, 80035cc <__swbuf_r+0x32>
 80035c4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80035c8:	4638      	mov	r0, r7
 80035ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	6922      	ldr	r2, [r4, #16]
 80035d0:	1a98      	subs	r0, r3, r2
 80035d2:	6963      	ldr	r3, [r4, #20]
 80035d4:	b2f6      	uxtb	r6, r6
 80035d6:	4283      	cmp	r3, r0
 80035d8:	4637      	mov	r7, r6
 80035da:	dc05      	bgt.n	80035e8 <__swbuf_r+0x4e>
 80035dc:	4621      	mov	r1, r4
 80035de:	4628      	mov	r0, r5
 80035e0:	f000 fa68 	bl	8003ab4 <_fflush_r>
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d1ed      	bne.n	80035c4 <__swbuf_r+0x2a>
 80035e8:	68a3      	ldr	r3, [r4, #8]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	60a3      	str	r3, [r4, #8]
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	6022      	str	r2, [r4, #0]
 80035f4:	701e      	strb	r6, [r3, #0]
 80035f6:	6962      	ldr	r2, [r4, #20]
 80035f8:	1c43      	adds	r3, r0, #1
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d004      	beq.n	8003608 <__swbuf_r+0x6e>
 80035fe:	89a3      	ldrh	r3, [r4, #12]
 8003600:	07db      	lsls	r3, r3, #31
 8003602:	d5e1      	bpl.n	80035c8 <__swbuf_r+0x2e>
 8003604:	2e0a      	cmp	r6, #10
 8003606:	d1df      	bne.n	80035c8 <__swbuf_r+0x2e>
 8003608:	4621      	mov	r1, r4
 800360a:	4628      	mov	r0, r5
 800360c:	f000 fa52 	bl	8003ab4 <_fflush_r>
 8003610:	2800      	cmp	r0, #0
 8003612:	d0d9      	beq.n	80035c8 <__swbuf_r+0x2e>
 8003614:	e7d6      	b.n	80035c4 <__swbuf_r+0x2a>
	...

08003618 <__swsetup_r>:
 8003618:	b538      	push	{r3, r4, r5, lr}
 800361a:	4b29      	ldr	r3, [pc, #164]	@ (80036c0 <__swsetup_r+0xa8>)
 800361c:	4605      	mov	r5, r0
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	460c      	mov	r4, r1
 8003622:	b118      	cbz	r0, 800362c <__swsetup_r+0x14>
 8003624:	6a03      	ldr	r3, [r0, #32]
 8003626:	b90b      	cbnz	r3, 800362c <__swsetup_r+0x14>
 8003628:	f7ff fee0 	bl	80033ec <__sinit>
 800362c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003630:	0719      	lsls	r1, r3, #28
 8003632:	d422      	bmi.n	800367a <__swsetup_r+0x62>
 8003634:	06da      	lsls	r2, r3, #27
 8003636:	d407      	bmi.n	8003648 <__swsetup_r+0x30>
 8003638:	2209      	movs	r2, #9
 800363a:	602a      	str	r2, [r5, #0]
 800363c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003640:	81a3      	strh	r3, [r4, #12]
 8003642:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003646:	e033      	b.n	80036b0 <__swsetup_r+0x98>
 8003648:	0758      	lsls	r0, r3, #29
 800364a:	d512      	bpl.n	8003672 <__swsetup_r+0x5a>
 800364c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800364e:	b141      	cbz	r1, 8003662 <__swsetup_r+0x4a>
 8003650:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003654:	4299      	cmp	r1, r3
 8003656:	d002      	beq.n	800365e <__swsetup_r+0x46>
 8003658:	4628      	mov	r0, r5
 800365a:	f000 f8af 	bl	80037bc <_free_r>
 800365e:	2300      	movs	r3, #0
 8003660:	6363      	str	r3, [r4, #52]	@ 0x34
 8003662:	89a3      	ldrh	r3, [r4, #12]
 8003664:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003668:	81a3      	strh	r3, [r4, #12]
 800366a:	2300      	movs	r3, #0
 800366c:	6063      	str	r3, [r4, #4]
 800366e:	6923      	ldr	r3, [r4, #16]
 8003670:	6023      	str	r3, [r4, #0]
 8003672:	89a3      	ldrh	r3, [r4, #12]
 8003674:	f043 0308 	orr.w	r3, r3, #8
 8003678:	81a3      	strh	r3, [r4, #12]
 800367a:	6923      	ldr	r3, [r4, #16]
 800367c:	b94b      	cbnz	r3, 8003692 <__swsetup_r+0x7a>
 800367e:	89a3      	ldrh	r3, [r4, #12]
 8003680:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003688:	d003      	beq.n	8003692 <__swsetup_r+0x7a>
 800368a:	4621      	mov	r1, r4
 800368c:	4628      	mov	r0, r5
 800368e:	f000 fa5f 	bl	8003b50 <__smakebuf_r>
 8003692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003696:	f013 0201 	ands.w	r2, r3, #1
 800369a:	d00a      	beq.n	80036b2 <__swsetup_r+0x9a>
 800369c:	2200      	movs	r2, #0
 800369e:	60a2      	str	r2, [r4, #8]
 80036a0:	6962      	ldr	r2, [r4, #20]
 80036a2:	4252      	negs	r2, r2
 80036a4:	61a2      	str	r2, [r4, #24]
 80036a6:	6922      	ldr	r2, [r4, #16]
 80036a8:	b942      	cbnz	r2, 80036bc <__swsetup_r+0xa4>
 80036aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80036ae:	d1c5      	bne.n	800363c <__swsetup_r+0x24>
 80036b0:	bd38      	pop	{r3, r4, r5, pc}
 80036b2:	0799      	lsls	r1, r3, #30
 80036b4:	bf58      	it	pl
 80036b6:	6962      	ldrpl	r2, [r4, #20]
 80036b8:	60a2      	str	r2, [r4, #8]
 80036ba:	e7f4      	b.n	80036a6 <__swsetup_r+0x8e>
 80036bc:	2000      	movs	r0, #0
 80036be:	e7f7      	b.n	80036b0 <__swsetup_r+0x98>
 80036c0:	20000018 	.word	0x20000018

080036c4 <memset>:
 80036c4:	4402      	add	r2, r0
 80036c6:	4603      	mov	r3, r0
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d100      	bne.n	80036ce <memset+0xa>
 80036cc:	4770      	bx	lr
 80036ce:	f803 1b01 	strb.w	r1, [r3], #1
 80036d2:	e7f9      	b.n	80036c8 <memset+0x4>

080036d4 <_close_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	4d06      	ldr	r5, [pc, #24]	@ (80036f0 <_close_r+0x1c>)
 80036d8:	2300      	movs	r3, #0
 80036da:	4604      	mov	r4, r0
 80036dc:	4608      	mov	r0, r1
 80036de:	602b      	str	r3, [r5, #0]
 80036e0:	f7fd fc06 	bl	8000ef0 <_close>
 80036e4:	1c43      	adds	r3, r0, #1
 80036e6:	d102      	bne.n	80036ee <_close_r+0x1a>
 80036e8:	682b      	ldr	r3, [r5, #0]
 80036ea:	b103      	cbz	r3, 80036ee <_close_r+0x1a>
 80036ec:	6023      	str	r3, [r4, #0]
 80036ee:	bd38      	pop	{r3, r4, r5, pc}
 80036f0:	2000066c 	.word	0x2000066c

080036f4 <_lseek_r>:
 80036f4:	b538      	push	{r3, r4, r5, lr}
 80036f6:	4d07      	ldr	r5, [pc, #28]	@ (8003714 <_lseek_r+0x20>)
 80036f8:	4604      	mov	r4, r0
 80036fa:	4608      	mov	r0, r1
 80036fc:	4611      	mov	r1, r2
 80036fe:	2200      	movs	r2, #0
 8003700:	602a      	str	r2, [r5, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	f7fd fc1b 	bl	8000f3e <_lseek>
 8003708:	1c43      	adds	r3, r0, #1
 800370a:	d102      	bne.n	8003712 <_lseek_r+0x1e>
 800370c:	682b      	ldr	r3, [r5, #0]
 800370e:	b103      	cbz	r3, 8003712 <_lseek_r+0x1e>
 8003710:	6023      	str	r3, [r4, #0]
 8003712:	bd38      	pop	{r3, r4, r5, pc}
 8003714:	2000066c 	.word	0x2000066c

08003718 <_read_r>:
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	4d07      	ldr	r5, [pc, #28]	@ (8003738 <_read_r+0x20>)
 800371c:	4604      	mov	r4, r0
 800371e:	4608      	mov	r0, r1
 8003720:	4611      	mov	r1, r2
 8003722:	2200      	movs	r2, #0
 8003724:	602a      	str	r2, [r5, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	f7fd fba9 	bl	8000e7e <_read>
 800372c:	1c43      	adds	r3, r0, #1
 800372e:	d102      	bne.n	8003736 <_read_r+0x1e>
 8003730:	682b      	ldr	r3, [r5, #0]
 8003732:	b103      	cbz	r3, 8003736 <_read_r+0x1e>
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	bd38      	pop	{r3, r4, r5, pc}
 8003738:	2000066c 	.word	0x2000066c

0800373c <_write_r>:
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	4d07      	ldr	r5, [pc, #28]	@ (800375c <_write_r+0x20>)
 8003740:	4604      	mov	r4, r0
 8003742:	4608      	mov	r0, r1
 8003744:	4611      	mov	r1, r2
 8003746:	2200      	movs	r2, #0
 8003748:	602a      	str	r2, [r5, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	f7fd fbb4 	bl	8000eb8 <_write>
 8003750:	1c43      	adds	r3, r0, #1
 8003752:	d102      	bne.n	800375a <_write_r+0x1e>
 8003754:	682b      	ldr	r3, [r5, #0]
 8003756:	b103      	cbz	r3, 800375a <_write_r+0x1e>
 8003758:	6023      	str	r3, [r4, #0]
 800375a:	bd38      	pop	{r3, r4, r5, pc}
 800375c:	2000066c 	.word	0x2000066c

08003760 <__errno>:
 8003760:	4b01      	ldr	r3, [pc, #4]	@ (8003768 <__errno+0x8>)
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	20000018 	.word	0x20000018

0800376c <__libc_init_array>:
 800376c:	b570      	push	{r4, r5, r6, lr}
 800376e:	4d0d      	ldr	r5, [pc, #52]	@ (80037a4 <__libc_init_array+0x38>)
 8003770:	4c0d      	ldr	r4, [pc, #52]	@ (80037a8 <__libc_init_array+0x3c>)
 8003772:	1b64      	subs	r4, r4, r5
 8003774:	10a4      	asrs	r4, r4, #2
 8003776:	2600      	movs	r6, #0
 8003778:	42a6      	cmp	r6, r4
 800377a:	d109      	bne.n	8003790 <__libc_init_array+0x24>
 800377c:	4d0b      	ldr	r5, [pc, #44]	@ (80037ac <__libc_init_array+0x40>)
 800377e:	4c0c      	ldr	r4, [pc, #48]	@ (80037b0 <__libc_init_array+0x44>)
 8003780:	f000 fa54 	bl	8003c2c <_init>
 8003784:	1b64      	subs	r4, r4, r5
 8003786:	10a4      	asrs	r4, r4, #2
 8003788:	2600      	movs	r6, #0
 800378a:	42a6      	cmp	r6, r4
 800378c:	d105      	bne.n	800379a <__libc_init_array+0x2e>
 800378e:	bd70      	pop	{r4, r5, r6, pc}
 8003790:	f855 3b04 	ldr.w	r3, [r5], #4
 8003794:	4798      	blx	r3
 8003796:	3601      	adds	r6, #1
 8003798:	e7ee      	b.n	8003778 <__libc_init_array+0xc>
 800379a:	f855 3b04 	ldr.w	r3, [r5], #4
 800379e:	4798      	blx	r3
 80037a0:	3601      	adds	r6, #1
 80037a2:	e7f2      	b.n	800378a <__libc_init_array+0x1e>
 80037a4:	08004c6c 	.word	0x08004c6c
 80037a8:	08004c6c 	.word	0x08004c6c
 80037ac:	08004c6c 	.word	0x08004c6c
 80037b0:	08004c70 	.word	0x08004c70

080037b4 <__retarget_lock_init_recursive>:
 80037b4:	4770      	bx	lr

080037b6 <__retarget_lock_acquire_recursive>:
 80037b6:	4770      	bx	lr

080037b8 <__retarget_lock_release_recursive>:
 80037b8:	4770      	bx	lr
	...

080037bc <_free_r>:
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	4605      	mov	r5, r0
 80037c0:	2900      	cmp	r1, #0
 80037c2:	d041      	beq.n	8003848 <_free_r+0x8c>
 80037c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037c8:	1f0c      	subs	r4, r1, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	bfb8      	it	lt
 80037ce:	18e4      	addlt	r4, r4, r3
 80037d0:	f000 f8e0 	bl	8003994 <__malloc_lock>
 80037d4:	4a1d      	ldr	r2, [pc, #116]	@ (800384c <_free_r+0x90>)
 80037d6:	6813      	ldr	r3, [r2, #0]
 80037d8:	b933      	cbnz	r3, 80037e8 <_free_r+0x2c>
 80037da:	6063      	str	r3, [r4, #4]
 80037dc:	6014      	str	r4, [r2, #0]
 80037de:	4628      	mov	r0, r5
 80037e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037e4:	f000 b8dc 	b.w	80039a0 <__malloc_unlock>
 80037e8:	42a3      	cmp	r3, r4
 80037ea:	d908      	bls.n	80037fe <_free_r+0x42>
 80037ec:	6820      	ldr	r0, [r4, #0]
 80037ee:	1821      	adds	r1, r4, r0
 80037f0:	428b      	cmp	r3, r1
 80037f2:	bf01      	itttt	eq
 80037f4:	6819      	ldreq	r1, [r3, #0]
 80037f6:	685b      	ldreq	r3, [r3, #4]
 80037f8:	1809      	addeq	r1, r1, r0
 80037fa:	6021      	streq	r1, [r4, #0]
 80037fc:	e7ed      	b.n	80037da <_free_r+0x1e>
 80037fe:	461a      	mov	r2, r3
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	b10b      	cbz	r3, 8003808 <_free_r+0x4c>
 8003804:	42a3      	cmp	r3, r4
 8003806:	d9fa      	bls.n	80037fe <_free_r+0x42>
 8003808:	6811      	ldr	r1, [r2, #0]
 800380a:	1850      	adds	r0, r2, r1
 800380c:	42a0      	cmp	r0, r4
 800380e:	d10b      	bne.n	8003828 <_free_r+0x6c>
 8003810:	6820      	ldr	r0, [r4, #0]
 8003812:	4401      	add	r1, r0
 8003814:	1850      	adds	r0, r2, r1
 8003816:	4283      	cmp	r3, r0
 8003818:	6011      	str	r1, [r2, #0]
 800381a:	d1e0      	bne.n	80037de <_free_r+0x22>
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	6053      	str	r3, [r2, #4]
 8003822:	4408      	add	r0, r1
 8003824:	6010      	str	r0, [r2, #0]
 8003826:	e7da      	b.n	80037de <_free_r+0x22>
 8003828:	d902      	bls.n	8003830 <_free_r+0x74>
 800382a:	230c      	movs	r3, #12
 800382c:	602b      	str	r3, [r5, #0]
 800382e:	e7d6      	b.n	80037de <_free_r+0x22>
 8003830:	6820      	ldr	r0, [r4, #0]
 8003832:	1821      	adds	r1, r4, r0
 8003834:	428b      	cmp	r3, r1
 8003836:	bf04      	itt	eq
 8003838:	6819      	ldreq	r1, [r3, #0]
 800383a:	685b      	ldreq	r3, [r3, #4]
 800383c:	6063      	str	r3, [r4, #4]
 800383e:	bf04      	itt	eq
 8003840:	1809      	addeq	r1, r1, r0
 8003842:	6021      	streq	r1, [r4, #0]
 8003844:	6054      	str	r4, [r2, #4]
 8003846:	e7ca      	b.n	80037de <_free_r+0x22>
 8003848:	bd38      	pop	{r3, r4, r5, pc}
 800384a:	bf00      	nop
 800384c:	20000678 	.word	0x20000678

08003850 <sbrk_aligned>:
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	4e0f      	ldr	r6, [pc, #60]	@ (8003890 <sbrk_aligned+0x40>)
 8003854:	460c      	mov	r4, r1
 8003856:	6831      	ldr	r1, [r6, #0]
 8003858:	4605      	mov	r5, r0
 800385a:	b911      	cbnz	r1, 8003862 <sbrk_aligned+0x12>
 800385c:	f000 f9d6 	bl	8003c0c <_sbrk_r>
 8003860:	6030      	str	r0, [r6, #0]
 8003862:	4621      	mov	r1, r4
 8003864:	4628      	mov	r0, r5
 8003866:	f000 f9d1 	bl	8003c0c <_sbrk_r>
 800386a:	1c43      	adds	r3, r0, #1
 800386c:	d103      	bne.n	8003876 <sbrk_aligned+0x26>
 800386e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003872:	4620      	mov	r0, r4
 8003874:	bd70      	pop	{r4, r5, r6, pc}
 8003876:	1cc4      	adds	r4, r0, #3
 8003878:	f024 0403 	bic.w	r4, r4, #3
 800387c:	42a0      	cmp	r0, r4
 800387e:	d0f8      	beq.n	8003872 <sbrk_aligned+0x22>
 8003880:	1a21      	subs	r1, r4, r0
 8003882:	4628      	mov	r0, r5
 8003884:	f000 f9c2 	bl	8003c0c <_sbrk_r>
 8003888:	3001      	adds	r0, #1
 800388a:	d1f2      	bne.n	8003872 <sbrk_aligned+0x22>
 800388c:	e7ef      	b.n	800386e <sbrk_aligned+0x1e>
 800388e:	bf00      	nop
 8003890:	20000674 	.word	0x20000674

08003894 <_malloc_r>:
 8003894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003898:	1ccd      	adds	r5, r1, #3
 800389a:	f025 0503 	bic.w	r5, r5, #3
 800389e:	3508      	adds	r5, #8
 80038a0:	2d0c      	cmp	r5, #12
 80038a2:	bf38      	it	cc
 80038a4:	250c      	movcc	r5, #12
 80038a6:	2d00      	cmp	r5, #0
 80038a8:	4606      	mov	r6, r0
 80038aa:	db01      	blt.n	80038b0 <_malloc_r+0x1c>
 80038ac:	42a9      	cmp	r1, r5
 80038ae:	d904      	bls.n	80038ba <_malloc_r+0x26>
 80038b0:	230c      	movs	r3, #12
 80038b2:	6033      	str	r3, [r6, #0]
 80038b4:	2000      	movs	r0, #0
 80038b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003990 <_malloc_r+0xfc>
 80038be:	f000 f869 	bl	8003994 <__malloc_lock>
 80038c2:	f8d8 3000 	ldr.w	r3, [r8]
 80038c6:	461c      	mov	r4, r3
 80038c8:	bb44      	cbnz	r4, 800391c <_malloc_r+0x88>
 80038ca:	4629      	mov	r1, r5
 80038cc:	4630      	mov	r0, r6
 80038ce:	f7ff ffbf 	bl	8003850 <sbrk_aligned>
 80038d2:	1c43      	adds	r3, r0, #1
 80038d4:	4604      	mov	r4, r0
 80038d6:	d158      	bne.n	800398a <_malloc_r+0xf6>
 80038d8:	f8d8 4000 	ldr.w	r4, [r8]
 80038dc:	4627      	mov	r7, r4
 80038de:	2f00      	cmp	r7, #0
 80038e0:	d143      	bne.n	800396a <_malloc_r+0xd6>
 80038e2:	2c00      	cmp	r4, #0
 80038e4:	d04b      	beq.n	800397e <_malloc_r+0xea>
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	4639      	mov	r1, r7
 80038ea:	4630      	mov	r0, r6
 80038ec:	eb04 0903 	add.w	r9, r4, r3
 80038f0:	f000 f98c 	bl	8003c0c <_sbrk_r>
 80038f4:	4581      	cmp	r9, r0
 80038f6:	d142      	bne.n	800397e <_malloc_r+0xea>
 80038f8:	6821      	ldr	r1, [r4, #0]
 80038fa:	1a6d      	subs	r5, r5, r1
 80038fc:	4629      	mov	r1, r5
 80038fe:	4630      	mov	r0, r6
 8003900:	f7ff ffa6 	bl	8003850 <sbrk_aligned>
 8003904:	3001      	adds	r0, #1
 8003906:	d03a      	beq.n	800397e <_malloc_r+0xea>
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	442b      	add	r3, r5
 800390c:	6023      	str	r3, [r4, #0]
 800390e:	f8d8 3000 	ldr.w	r3, [r8]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	bb62      	cbnz	r2, 8003970 <_malloc_r+0xdc>
 8003916:	f8c8 7000 	str.w	r7, [r8]
 800391a:	e00f      	b.n	800393c <_malloc_r+0xa8>
 800391c:	6822      	ldr	r2, [r4, #0]
 800391e:	1b52      	subs	r2, r2, r5
 8003920:	d420      	bmi.n	8003964 <_malloc_r+0xd0>
 8003922:	2a0b      	cmp	r2, #11
 8003924:	d917      	bls.n	8003956 <_malloc_r+0xc2>
 8003926:	1961      	adds	r1, r4, r5
 8003928:	42a3      	cmp	r3, r4
 800392a:	6025      	str	r5, [r4, #0]
 800392c:	bf18      	it	ne
 800392e:	6059      	strne	r1, [r3, #4]
 8003930:	6863      	ldr	r3, [r4, #4]
 8003932:	bf08      	it	eq
 8003934:	f8c8 1000 	streq.w	r1, [r8]
 8003938:	5162      	str	r2, [r4, r5]
 800393a:	604b      	str	r3, [r1, #4]
 800393c:	4630      	mov	r0, r6
 800393e:	f000 f82f 	bl	80039a0 <__malloc_unlock>
 8003942:	f104 000b 	add.w	r0, r4, #11
 8003946:	1d23      	adds	r3, r4, #4
 8003948:	f020 0007 	bic.w	r0, r0, #7
 800394c:	1ac2      	subs	r2, r0, r3
 800394e:	bf1c      	itt	ne
 8003950:	1a1b      	subne	r3, r3, r0
 8003952:	50a3      	strne	r3, [r4, r2]
 8003954:	e7af      	b.n	80038b6 <_malloc_r+0x22>
 8003956:	6862      	ldr	r2, [r4, #4]
 8003958:	42a3      	cmp	r3, r4
 800395a:	bf0c      	ite	eq
 800395c:	f8c8 2000 	streq.w	r2, [r8]
 8003960:	605a      	strne	r2, [r3, #4]
 8003962:	e7eb      	b.n	800393c <_malloc_r+0xa8>
 8003964:	4623      	mov	r3, r4
 8003966:	6864      	ldr	r4, [r4, #4]
 8003968:	e7ae      	b.n	80038c8 <_malloc_r+0x34>
 800396a:	463c      	mov	r4, r7
 800396c:	687f      	ldr	r7, [r7, #4]
 800396e:	e7b6      	b.n	80038de <_malloc_r+0x4a>
 8003970:	461a      	mov	r2, r3
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	42a3      	cmp	r3, r4
 8003976:	d1fb      	bne.n	8003970 <_malloc_r+0xdc>
 8003978:	2300      	movs	r3, #0
 800397a:	6053      	str	r3, [r2, #4]
 800397c:	e7de      	b.n	800393c <_malloc_r+0xa8>
 800397e:	230c      	movs	r3, #12
 8003980:	6033      	str	r3, [r6, #0]
 8003982:	4630      	mov	r0, r6
 8003984:	f000 f80c 	bl	80039a0 <__malloc_unlock>
 8003988:	e794      	b.n	80038b4 <_malloc_r+0x20>
 800398a:	6005      	str	r5, [r0, #0]
 800398c:	e7d6      	b.n	800393c <_malloc_r+0xa8>
 800398e:	bf00      	nop
 8003990:	20000678 	.word	0x20000678

08003994 <__malloc_lock>:
 8003994:	4801      	ldr	r0, [pc, #4]	@ (800399c <__malloc_lock+0x8>)
 8003996:	f7ff bf0e 	b.w	80037b6 <__retarget_lock_acquire_recursive>
 800399a:	bf00      	nop
 800399c:	20000670 	.word	0x20000670

080039a0 <__malloc_unlock>:
 80039a0:	4801      	ldr	r0, [pc, #4]	@ (80039a8 <__malloc_unlock+0x8>)
 80039a2:	f7ff bf09 	b.w	80037b8 <__retarget_lock_release_recursive>
 80039a6:	bf00      	nop
 80039a8:	20000670 	.word	0x20000670

080039ac <__sflush_r>:
 80039ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b4:	0716      	lsls	r6, r2, #28
 80039b6:	4605      	mov	r5, r0
 80039b8:	460c      	mov	r4, r1
 80039ba:	d454      	bmi.n	8003a66 <__sflush_r+0xba>
 80039bc:	684b      	ldr	r3, [r1, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	dc02      	bgt.n	80039c8 <__sflush_r+0x1c>
 80039c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	dd48      	ble.n	8003a5a <__sflush_r+0xae>
 80039c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039ca:	2e00      	cmp	r6, #0
 80039cc:	d045      	beq.n	8003a5a <__sflush_r+0xae>
 80039ce:	2300      	movs	r3, #0
 80039d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80039d4:	682f      	ldr	r7, [r5, #0]
 80039d6:	6a21      	ldr	r1, [r4, #32]
 80039d8:	602b      	str	r3, [r5, #0]
 80039da:	d030      	beq.n	8003a3e <__sflush_r+0x92>
 80039dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80039de:	89a3      	ldrh	r3, [r4, #12]
 80039e0:	0759      	lsls	r1, r3, #29
 80039e2:	d505      	bpl.n	80039f0 <__sflush_r+0x44>
 80039e4:	6863      	ldr	r3, [r4, #4]
 80039e6:	1ad2      	subs	r2, r2, r3
 80039e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80039ea:	b10b      	cbz	r3, 80039f0 <__sflush_r+0x44>
 80039ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80039ee:	1ad2      	subs	r2, r2, r3
 80039f0:	2300      	movs	r3, #0
 80039f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039f4:	6a21      	ldr	r1, [r4, #32]
 80039f6:	4628      	mov	r0, r5
 80039f8:	47b0      	blx	r6
 80039fa:	1c43      	adds	r3, r0, #1
 80039fc:	89a3      	ldrh	r3, [r4, #12]
 80039fe:	d106      	bne.n	8003a0e <__sflush_r+0x62>
 8003a00:	6829      	ldr	r1, [r5, #0]
 8003a02:	291d      	cmp	r1, #29
 8003a04:	d82b      	bhi.n	8003a5e <__sflush_r+0xb2>
 8003a06:	4a2a      	ldr	r2, [pc, #168]	@ (8003ab0 <__sflush_r+0x104>)
 8003a08:	410a      	asrs	r2, r1
 8003a0a:	07d6      	lsls	r6, r2, #31
 8003a0c:	d427      	bmi.n	8003a5e <__sflush_r+0xb2>
 8003a0e:	2200      	movs	r2, #0
 8003a10:	6062      	str	r2, [r4, #4]
 8003a12:	04d9      	lsls	r1, r3, #19
 8003a14:	6922      	ldr	r2, [r4, #16]
 8003a16:	6022      	str	r2, [r4, #0]
 8003a18:	d504      	bpl.n	8003a24 <__sflush_r+0x78>
 8003a1a:	1c42      	adds	r2, r0, #1
 8003a1c:	d101      	bne.n	8003a22 <__sflush_r+0x76>
 8003a1e:	682b      	ldr	r3, [r5, #0]
 8003a20:	b903      	cbnz	r3, 8003a24 <__sflush_r+0x78>
 8003a22:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a26:	602f      	str	r7, [r5, #0]
 8003a28:	b1b9      	cbz	r1, 8003a5a <__sflush_r+0xae>
 8003a2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a2e:	4299      	cmp	r1, r3
 8003a30:	d002      	beq.n	8003a38 <__sflush_r+0x8c>
 8003a32:	4628      	mov	r0, r5
 8003a34:	f7ff fec2 	bl	80037bc <_free_r>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a3c:	e00d      	b.n	8003a5a <__sflush_r+0xae>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	4628      	mov	r0, r5
 8003a42:	47b0      	blx	r6
 8003a44:	4602      	mov	r2, r0
 8003a46:	1c50      	adds	r0, r2, #1
 8003a48:	d1c9      	bne.n	80039de <__sflush_r+0x32>
 8003a4a:	682b      	ldr	r3, [r5, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0c6      	beq.n	80039de <__sflush_r+0x32>
 8003a50:	2b1d      	cmp	r3, #29
 8003a52:	d001      	beq.n	8003a58 <__sflush_r+0xac>
 8003a54:	2b16      	cmp	r3, #22
 8003a56:	d11e      	bne.n	8003a96 <__sflush_r+0xea>
 8003a58:	602f      	str	r7, [r5, #0]
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	e022      	b.n	8003aa4 <__sflush_r+0xf8>
 8003a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a62:	b21b      	sxth	r3, r3
 8003a64:	e01b      	b.n	8003a9e <__sflush_r+0xf2>
 8003a66:	690f      	ldr	r7, [r1, #16]
 8003a68:	2f00      	cmp	r7, #0
 8003a6a:	d0f6      	beq.n	8003a5a <__sflush_r+0xae>
 8003a6c:	0793      	lsls	r3, r2, #30
 8003a6e:	680e      	ldr	r6, [r1, #0]
 8003a70:	bf08      	it	eq
 8003a72:	694b      	ldreq	r3, [r1, #20]
 8003a74:	600f      	str	r7, [r1, #0]
 8003a76:	bf18      	it	ne
 8003a78:	2300      	movne	r3, #0
 8003a7a:	eba6 0807 	sub.w	r8, r6, r7
 8003a7e:	608b      	str	r3, [r1, #8]
 8003a80:	f1b8 0f00 	cmp.w	r8, #0
 8003a84:	dde9      	ble.n	8003a5a <__sflush_r+0xae>
 8003a86:	6a21      	ldr	r1, [r4, #32]
 8003a88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003a8a:	4643      	mov	r3, r8
 8003a8c:	463a      	mov	r2, r7
 8003a8e:	4628      	mov	r0, r5
 8003a90:	47b0      	blx	r6
 8003a92:	2800      	cmp	r0, #0
 8003a94:	dc08      	bgt.n	8003aa8 <__sflush_r+0xfc>
 8003a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a9e:	81a3      	strh	r3, [r4, #12]
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aa8:	4407      	add	r7, r0
 8003aaa:	eba8 0800 	sub.w	r8, r8, r0
 8003aae:	e7e7      	b.n	8003a80 <__sflush_r+0xd4>
 8003ab0:	dfbffffe 	.word	0xdfbffffe

08003ab4 <_fflush_r>:
 8003ab4:	b538      	push	{r3, r4, r5, lr}
 8003ab6:	690b      	ldr	r3, [r1, #16]
 8003ab8:	4605      	mov	r5, r0
 8003aba:	460c      	mov	r4, r1
 8003abc:	b913      	cbnz	r3, 8003ac4 <_fflush_r+0x10>
 8003abe:	2500      	movs	r5, #0
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	bd38      	pop	{r3, r4, r5, pc}
 8003ac4:	b118      	cbz	r0, 8003ace <_fflush_r+0x1a>
 8003ac6:	6a03      	ldr	r3, [r0, #32]
 8003ac8:	b90b      	cbnz	r3, 8003ace <_fflush_r+0x1a>
 8003aca:	f7ff fc8f 	bl	80033ec <__sinit>
 8003ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f3      	beq.n	8003abe <_fflush_r+0xa>
 8003ad6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003ad8:	07d0      	lsls	r0, r2, #31
 8003ada:	d404      	bmi.n	8003ae6 <_fflush_r+0x32>
 8003adc:	0599      	lsls	r1, r3, #22
 8003ade:	d402      	bmi.n	8003ae6 <_fflush_r+0x32>
 8003ae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ae2:	f7ff fe68 	bl	80037b6 <__retarget_lock_acquire_recursive>
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	4621      	mov	r1, r4
 8003aea:	f7ff ff5f 	bl	80039ac <__sflush_r>
 8003aee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003af0:	07da      	lsls	r2, r3, #31
 8003af2:	4605      	mov	r5, r0
 8003af4:	d4e4      	bmi.n	8003ac0 <_fflush_r+0xc>
 8003af6:	89a3      	ldrh	r3, [r4, #12]
 8003af8:	059b      	lsls	r3, r3, #22
 8003afa:	d4e1      	bmi.n	8003ac0 <_fflush_r+0xc>
 8003afc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003afe:	f7ff fe5b 	bl	80037b8 <__retarget_lock_release_recursive>
 8003b02:	e7dd      	b.n	8003ac0 <_fflush_r+0xc>

08003b04 <__swhatbuf_r>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	460c      	mov	r4, r1
 8003b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b0c:	2900      	cmp	r1, #0
 8003b0e:	b096      	sub	sp, #88	@ 0x58
 8003b10:	4615      	mov	r5, r2
 8003b12:	461e      	mov	r6, r3
 8003b14:	da0d      	bge.n	8003b32 <__swhatbuf_r+0x2e>
 8003b16:	89a3      	ldrh	r3, [r4, #12]
 8003b18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b1c:	f04f 0100 	mov.w	r1, #0
 8003b20:	bf14      	ite	ne
 8003b22:	2340      	movne	r3, #64	@ 0x40
 8003b24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b28:	2000      	movs	r0, #0
 8003b2a:	6031      	str	r1, [r6, #0]
 8003b2c:	602b      	str	r3, [r5, #0]
 8003b2e:	b016      	add	sp, #88	@ 0x58
 8003b30:	bd70      	pop	{r4, r5, r6, pc}
 8003b32:	466a      	mov	r2, sp
 8003b34:	f000 f848 	bl	8003bc8 <_fstat_r>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	dbec      	blt.n	8003b16 <__swhatbuf_r+0x12>
 8003b3c:	9901      	ldr	r1, [sp, #4]
 8003b3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003b42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003b46:	4259      	negs	r1, r3
 8003b48:	4159      	adcs	r1, r3
 8003b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b4e:	e7eb      	b.n	8003b28 <__swhatbuf_r+0x24>

08003b50 <__smakebuf_r>:
 8003b50:	898b      	ldrh	r3, [r1, #12]
 8003b52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b54:	079d      	lsls	r5, r3, #30
 8003b56:	4606      	mov	r6, r0
 8003b58:	460c      	mov	r4, r1
 8003b5a:	d507      	bpl.n	8003b6c <__smakebuf_r+0x1c>
 8003b5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	6123      	str	r3, [r4, #16]
 8003b64:	2301      	movs	r3, #1
 8003b66:	6163      	str	r3, [r4, #20]
 8003b68:	b003      	add	sp, #12
 8003b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b6c:	ab01      	add	r3, sp, #4
 8003b6e:	466a      	mov	r2, sp
 8003b70:	f7ff ffc8 	bl	8003b04 <__swhatbuf_r>
 8003b74:	9f00      	ldr	r7, [sp, #0]
 8003b76:	4605      	mov	r5, r0
 8003b78:	4639      	mov	r1, r7
 8003b7a:	4630      	mov	r0, r6
 8003b7c:	f7ff fe8a 	bl	8003894 <_malloc_r>
 8003b80:	b948      	cbnz	r0, 8003b96 <__smakebuf_r+0x46>
 8003b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b86:	059a      	lsls	r2, r3, #22
 8003b88:	d4ee      	bmi.n	8003b68 <__smakebuf_r+0x18>
 8003b8a:	f023 0303 	bic.w	r3, r3, #3
 8003b8e:	f043 0302 	orr.w	r3, r3, #2
 8003b92:	81a3      	strh	r3, [r4, #12]
 8003b94:	e7e2      	b.n	8003b5c <__smakebuf_r+0xc>
 8003b96:	89a3      	ldrh	r3, [r4, #12]
 8003b98:	6020      	str	r0, [r4, #0]
 8003b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b9e:	81a3      	strh	r3, [r4, #12]
 8003ba0:	9b01      	ldr	r3, [sp, #4]
 8003ba2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003ba6:	b15b      	cbz	r3, 8003bc0 <__smakebuf_r+0x70>
 8003ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bac:	4630      	mov	r0, r6
 8003bae:	f000 f81d 	bl	8003bec <_isatty_r>
 8003bb2:	b128      	cbz	r0, 8003bc0 <__smakebuf_r+0x70>
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	f023 0303 	bic.w	r3, r3, #3
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	81a3      	strh	r3, [r4, #12]
 8003bc0:	89a3      	ldrh	r3, [r4, #12]
 8003bc2:	431d      	orrs	r5, r3
 8003bc4:	81a5      	strh	r5, [r4, #12]
 8003bc6:	e7cf      	b.n	8003b68 <__smakebuf_r+0x18>

08003bc8 <_fstat_r>:
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	4d07      	ldr	r5, [pc, #28]	@ (8003be8 <_fstat_r+0x20>)
 8003bcc:	2300      	movs	r3, #0
 8003bce:	4604      	mov	r4, r0
 8003bd0:	4608      	mov	r0, r1
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	602b      	str	r3, [r5, #0]
 8003bd6:	f7fd f997 	bl	8000f08 <_fstat>
 8003bda:	1c43      	adds	r3, r0, #1
 8003bdc:	d102      	bne.n	8003be4 <_fstat_r+0x1c>
 8003bde:	682b      	ldr	r3, [r5, #0]
 8003be0:	b103      	cbz	r3, 8003be4 <_fstat_r+0x1c>
 8003be2:	6023      	str	r3, [r4, #0]
 8003be4:	bd38      	pop	{r3, r4, r5, pc}
 8003be6:	bf00      	nop
 8003be8:	2000066c 	.word	0x2000066c

08003bec <_isatty_r>:
 8003bec:	b538      	push	{r3, r4, r5, lr}
 8003bee:	4d06      	ldr	r5, [pc, #24]	@ (8003c08 <_isatty_r+0x1c>)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	602b      	str	r3, [r5, #0]
 8003bf8:	f7fd f996 	bl	8000f28 <_isatty>
 8003bfc:	1c43      	adds	r3, r0, #1
 8003bfe:	d102      	bne.n	8003c06 <_isatty_r+0x1a>
 8003c00:	682b      	ldr	r3, [r5, #0]
 8003c02:	b103      	cbz	r3, 8003c06 <_isatty_r+0x1a>
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	bd38      	pop	{r3, r4, r5, pc}
 8003c08:	2000066c 	.word	0x2000066c

08003c0c <_sbrk_r>:
 8003c0c:	b538      	push	{r3, r4, r5, lr}
 8003c0e:	4d06      	ldr	r5, [pc, #24]	@ (8003c28 <_sbrk_r+0x1c>)
 8003c10:	2300      	movs	r3, #0
 8003c12:	4604      	mov	r4, r0
 8003c14:	4608      	mov	r0, r1
 8003c16:	602b      	str	r3, [r5, #0]
 8003c18:	f7fd f99e 	bl	8000f58 <_sbrk>
 8003c1c:	1c43      	adds	r3, r0, #1
 8003c1e:	d102      	bne.n	8003c26 <_sbrk_r+0x1a>
 8003c20:	682b      	ldr	r3, [r5, #0]
 8003c22:	b103      	cbz	r3, 8003c26 <_sbrk_r+0x1a>
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	bd38      	pop	{r3, r4, r5, pc}
 8003c28:	2000066c 	.word	0x2000066c

08003c2c <_init>:
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2e:	bf00      	nop
 8003c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c32:	bc08      	pop	{r3}
 8003c34:	469e      	mov	lr, r3
 8003c36:	4770      	bx	lr

08003c38 <_fini>:
 8003c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3a:	bf00      	nop
 8003c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3e:	bc08      	pop	{r3}
 8003c40:	469e      	mov	lr, r3
 8003c42:	4770      	bx	lr
