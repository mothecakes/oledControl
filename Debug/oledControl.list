
oledControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d10  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000162c  08003ea4  08003ea4  00004ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054d0  080054d0  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080054d0  080054d0  000064d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054d8  080054d8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054d8  080054d8  000064d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054dc  080054dc  000064dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080054e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  20000068  08005548  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08005548  0000767c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3b2  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd8  00000000  00000000  0001344a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00015428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d6  00000000  00000000  00015fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001710a  00000000  00000000  00016896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec93  00000000  00000000  0002d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a4b9  00000000  00000000  0003c633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6aec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003560  00000000  00000000  000c6b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000ca090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003e8c 	.word	0x08003e8c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	08003e8c 	.word	0x08003e8c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <hurt>:

//
// Negative Actions
//

static void hurt(game* game, int amount) {
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
	if (game->health >= amount) {
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	683a      	ldr	r2, [r7, #0]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	dc06      	bgt.n	80004e6 <hurt+0x22>
		game->health -= amount;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	1ad2      	subs	r2, r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	601a      	str	r2, [r3, #0]
	}
	else {
		game->health = 0;
	}
}
 80004e4:	e002      	b.n	80004ec <hurt+0x28>
		game->health = 0;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <bore>:

static void bore(game* game, int amount) {
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
	if (game->happiness >= amount) {
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	683a      	ldr	r2, [r7, #0]
 8000508:	429a      	cmp	r2, r3
 800050a:	dc06      	bgt.n	800051a <bore+0x22>
		game->happiness -= amount;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	689a      	ldr	r2, [r3, #8]
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	1ad2      	subs	r2, r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	609a      	str	r2, [r3, #8]
	}
	else {
		game->happiness = 0;
	}
}
 8000518:	e002      	b.n	8000520 <bore+0x28>
		game->happiness = 0;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <starve>:

static void starve(game* game, int amount) {
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
	if (game->hunger >= amount) {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	683a      	ldr	r2, [r7, #0]
 800053c:	429a      	cmp	r2, r3
 800053e:	dc06      	bgt.n	800054e <starve+0x22>
		game->hunger -= amount;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	685a      	ldr	r2, [r3, #4]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	1ad2      	subs	r2, r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	605a      	str	r2, [r3, #4]
	}
	else {
		game->hunger = 0;
	}
}
 800054c:	e002      	b.n	8000554 <starve+0x28>
		game->hunger = 0;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2200      	movs	r2, #0
 8000552:	605a      	str	r2, [r3, #4]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <heal>:

//
// Positive Actions
//

static void heal(game* game, int amount) {
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	if ((game->health + amount) > HEALTH_MAX) {
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	4413      	add	r3, r2
 8000572:	2b3c      	cmp	r3, #60	@ 0x3c
 8000574:	dd03      	ble.n	800057e <heal+0x1e>
		game->health = HEALTH_MAX;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	223c      	movs	r2, #60	@ 0x3c
 800057a:	601a      	str	r2, [r3, #0]
	}
	else {
		game->health += amount;
	}
}
 800057c:	e005      	b.n	800058a <heal+0x2a>
		game->health += amount;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	441a      	add	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	601a      	str	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <eat>:

static void eat(game* game, int amount) {
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	6039      	str	r1, [r7, #0]
	if ((game->hunger + amount) > HUNGER_MAX) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	4413      	add	r3, r2
 80005a8:	2b3c      	cmp	r3, #60	@ 0x3c
 80005aa:	dd03      	ble.n	80005b4 <eat+0x1e>
		game->hunger = HUNGER_MAX;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	223c      	movs	r2, #60	@ 0x3c
 80005b0:	605a      	str	r2, [r3, #4]
	}
	else {
		game->hunger += amount;
	}
}
 80005b2:	e005      	b.n	80005c0 <eat+0x2a>
		game->hunger += amount;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	685a      	ldr	r2, [r3, #4]
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	441a      	add	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	605a      	str	r2, [r3, #4]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <play>:

static void play(game* game, int amount) {
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
	if ((game->happiness + amount) > HAPPINESS_MAX) {
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	689a      	ldr	r2, [r3, #8]
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	4413      	add	r3, r2
 80005de:	2b3c      	cmp	r3, #60	@ 0x3c
 80005e0:	dd03      	ble.n	80005ea <play+0x1e>
		game->happiness = HAPPINESS_MAX;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	223c      	movs	r2, #60	@ 0x3c
 80005e6:	609a      	str	r2, [r3, #8]
	}
	else {
		game->happiness += amount;
	}
}
 80005e8:	e005      	b.n	80005f6 <play+0x2a>
		game->happiness += amount;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689a      	ldr	r2, [r3, #8]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	441a      	add	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	609a      	str	r2, [r3, #8]
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <checkMood>:

//
//  Returns current mood of the mon
//

static Mood checkMood(struct game* self) {
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    int overall = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
    overall += self->health;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
    overall += self->hunger;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	4413      	add	r3, r2
 8000622:	60fb      	str	r3, [r7, #12]
    overall += self->happiness;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	4413      	add	r3, r2
 800062c:	60fb      	str	r3, [r7, #12]
    overall /= 3;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	4a0d      	ldr	r2, [pc, #52]	@ (8000668 <checkMood+0x64>)
 8000632:	fb82 1203 	smull	r1, r2, r2, r3
 8000636:	17db      	asrs	r3, r3, #31
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	60fb      	str	r3, [r7, #12]

    if (overall <= 15){
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	2b0f      	cmp	r3, #15
 8000640:	dc01      	bgt.n	8000646 <checkMood+0x42>
        return MOOD_SERIOUS;
 8000642:	2300      	movs	r3, #0
 8000644:	e00a      	b.n	800065c <checkMood+0x58>
    }
    if (overall <= 30){
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2b1e      	cmp	r3, #30
 800064a:	dc01      	bgt.n	8000650 <checkMood+0x4c>
        return MOOD_UNHAPPY;
 800064c:	2301      	movs	r3, #1
 800064e:	e005      	b.n	800065c <checkMood+0x58>
    }
    if (overall <= 45){
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	2b2d      	cmp	r3, #45	@ 0x2d
 8000654:	dc01      	bgt.n	800065a <checkMood+0x56>
        return MOOD_HAPPY;
 8000656:	2302      	movs	r3, #2
 8000658:	e000      	b.n	800065c <checkMood+0x58>
    }
    else{
        return MOOD_CUTE;
 800065a:	2303      	movs	r3, #3
    }
}
 800065c:	4618      	mov	r0, r3
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	55555556 	.word	0x55555556

0800066c <switchAction>:

void switchAction(struct game* self) {
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	if (self->actionType == ACTION_GOOD) {
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d103      	bne.n	8000684 <switchAction+0x18>
		self->actionType = ACTION_EVIL;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2201      	movs	r2, #1
 8000680:	60da      	str	r2, [r3, #12]
	}
	else
		self->actionType = ACTION_GOOD;
}
 8000682:	e002      	b.n	800068a <switchAction+0x1e>
		self->actionType = ACTION_GOOD;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <resolveHunger>:

void resolveHunger(game* self) {
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
	self->actionType == ACTION_GOOD ? eat(self, ACTION_AMT) : starve(self, ACTION_AMT);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	68db      	ldr	r3, [r3, #12]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d104      	bne.n	80006b0 <resolveHunger+0x1a>
 80006a6:	210a      	movs	r1, #10
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff ff74 	bl	8000596 <eat>
}
 80006ae:	e003      	b.n	80006b8 <resolveHunger+0x22>
	self->actionType == ACTION_GOOD ? eat(self, ACTION_AMT) : starve(self, ACTION_AMT);
 80006b0:	210a      	movs	r1, #10
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff ff3a 	bl	800052c <starve>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <resolveHealth>:

void resolveHealth(game* self) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	self->actionType == ACTION_GOOD ? heal(self, ACTION_AMT) : hurt(self, ACTION_AMT);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d104      	bne.n	80006da <resolveHealth+0x1a>
 80006d0:	210a      	movs	r1, #10
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff ff44 	bl	8000560 <heal>
}
 80006d8:	e003      	b.n	80006e2 <resolveHealth+0x22>
	self->actionType == ACTION_GOOD ? heal(self, ACTION_AMT) : hurt(self, ACTION_AMT);
 80006da:	210a      	movs	r1, #10
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff fef1 	bl	80004c4 <hurt>
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <resolveHappiness>:

void resolveHappiness(game* self) {
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
	self->actionType == ACTION_GOOD ? play(self, ACTION_AMT) : bore(self, ACTION_AMT);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	68db      	ldr	r3, [r3, #12]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d104      	bne.n	8000704 <resolveHappiness+0x1a>
 80006fa:	210a      	movs	r1, #10
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff ff65 	bl	80005cc <play>
}
 8000702:	e003      	b.n	800070c <resolveHappiness+0x22>
	self->actionType == ACTION_GOOD ? play(self, ACTION_AMT) : bore(self, ACTION_AMT);
 8000704:	210a      	movs	r1, #10
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff fef6 	bl	80004f8 <bore>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <game_init>:




void game_init(game* game, int health, int hunger, int happiness) {
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	603b      	str	r3, [r7, #0]
	game->health = health;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	68ba      	ldr	r2, [r7, #8]
 8000726:	601a      	str	r2, [r3, #0]
	game->hunger = hunger;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	605a      	str	r2, [r3, #4]
	game->happiness = happiness;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	609a      	str	r2, [r3, #8]

	game->actionType = ACTION_EVIL;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2201      	movs	r2, #1
 8000738:	60da      	str	r2, [r3, #12]
	game->switchAction = switchAction;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	4a09      	ldr	r2, [pc, #36]	@ (8000764 <game_init+0x50>)
 800073e:	611a      	str	r2, [r3, #16]

	game->resolveHunger = resolveHunger;
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	4a09      	ldr	r2, [pc, #36]	@ (8000768 <game_init+0x54>)
 8000744:	619a      	str	r2, [r3, #24]
	game->resolveHappiness = resolveHappiness;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4a08      	ldr	r2, [pc, #32]	@ (800076c <game_init+0x58>)
 800074a:	621a      	str	r2, [r3, #32]
	game->resolveHealth = resolveHealth;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	4a08      	ldr	r2, [pc, #32]	@ (8000770 <game_init+0x5c>)
 8000750:	61da      	str	r2, [r3, #28]

	game->checkMood = checkMood;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	4a07      	ldr	r2, [pc, #28]	@ (8000774 <game_init+0x60>)
 8000756:	615a      	str	r2, [r3, #20]

}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	0800066d 	.word	0x0800066d
 8000768:	08000697 	.word	0x08000697
 800076c:	080006eb 	.word	0x080006eb
 8000770:	080006c1 	.word	0x080006c1
 8000774:	08000605 	.word	0x08000605

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	@ 0x50
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077e:	f000 ff9d 	bl	80016bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000782:	f000 f88b 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000786:	f000 f94d 	bl	8000a24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800078a:	f000 f921 	bl	80009d0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800078e:	f000 f8f1 	bl	8000974 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  game Game;
  game_init(&Game, 60,60,60);
 8000792:	f107 001c 	add.w	r0, r7, #28
 8000796:	233c      	movs	r3, #60	@ 0x3c
 8000798:	223c      	movs	r2, #60	@ 0x3c
 800079a:	213c      	movs	r1, #60	@ 0x3c
 800079c:	f7ff ffba 	bl	8000714 <game_init>

  render Render;
  render_init(&Render);
 80007a0:	463b      	mov	r3, r7
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fab6 	bl	8000d14 <render_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      state1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80007a8:	2120      	movs	r1, #32
 80007aa:	4839      	ldr	r0, [pc, #228]	@ (8000890 <main+0x118>)
 80007ac:	f001 fa86 	bl	8001cbc <HAL_GPIO_ReadPin>
 80007b0:	4603      	mov	r3, r0
 80007b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      state2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 80007b4:	2140      	movs	r1, #64	@ 0x40
 80007b6:	4836      	ldr	r0, [pc, #216]	@ (8000890 <main+0x118>)
 80007b8:	f001 fa80 	bl	8001cbc <HAL_GPIO_ReadPin>
 80007bc:	4603      	mov	r3, r0
 80007be:	64bb      	str	r3, [r7, #72]	@ 0x48
      state3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 80007c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007c4:	4832      	ldr	r0, [pc, #200]	@ (8000890 <main+0x118>)
 80007c6:	f001 fa79 	bl	8001cbc <HAL_GPIO_ReadPin>
 80007ca:	4603      	mov	r3, r0
 80007cc:	647b      	str	r3, [r7, #68]	@ 0x44
      state4 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 80007ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007d2:	482f      	ldr	r0, [pc, #188]	@ (8000890 <main+0x118>)
 80007d4:	f001 fa72 	bl	8001cbc <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	643b      	str	r3, [r7, #64]	@ 0x40


      if (state1) {
 80007dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d007      	beq.n	80007f2 <main+0x7a>
    	  Game.resolveHappiness(&Game);
 80007e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007e4:	f107 021c 	add.w	r2, r7, #28
 80007e8:	4610      	mov	r0, r2
 80007ea:	4798      	blx	r3
    	  printf("called\n");
 80007ec:	4829      	ldr	r0, [pc, #164]	@ (8000894 <main+0x11c>)
 80007ee:	f002 ffb9 	bl	8003764 <puts>
      }
      if (state2) {
 80007f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d007      	beq.n	8000808 <main+0x90>
    	  Game.resolveHunger(&Game);
 80007f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007fa:	f107 021c 	add.w	r2, r7, #28
 80007fe:	4610      	mov	r0, r2
 8000800:	4798      	blx	r3
    	  printf("called\n");
 8000802:	4824      	ldr	r0, [pc, #144]	@ (8000894 <main+0x11c>)
 8000804:	f002 ffae 	bl	8003764 <puts>
      }
      if (state3) {
 8000808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800080a:	2b00      	cmp	r3, #0
 800080c:	d007      	beq.n	800081e <main+0xa6>
    	  Game.resolveHealth(&Game);
 800080e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000810:	f107 021c 	add.w	r2, r7, #28
 8000814:	4610      	mov	r0, r2
 8000816:	4798      	blx	r3
    	  printf("called\n");
 8000818:	481e      	ldr	r0, [pc, #120]	@ (8000894 <main+0x11c>)
 800081a:	f002 ffa3 	bl	8003764 <puts>
      }
      if (state4) {
 800081e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000820:	2b00      	cmp	r3, #0
 8000822:	d007      	beq.n	8000834 <main+0xbc>
          Game.switchAction(&Game);
 8000824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000826:	f107 021c 	add.w	r2, r7, #28
 800082a:	4610      	mov	r0, r2
 800082c:	4798      	blx	r3
    	  printf("called\n");
 800082e:	4819      	ldr	r0, [pc, #100]	@ (8000894 <main+0x11c>)
 8000830:	f002 ff98 	bl	8003764 <puts>
      }
      if (state1 || state2 || state3 || state4)
 8000834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000836:	2b00      	cmp	r3, #0
 8000838:	d108      	bne.n	800084c <main+0xd4>
 800083a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800083c:	2b00      	cmp	r3, #0
 800083e:	d105      	bne.n	800084c <main+0xd4>
 8000840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000842:	2b00      	cmp	r3, #0
 8000844:	d102      	bne.n	800084c <main+0xd4>
 8000846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00e      	beq.n	800086a <main+0xf2>
          if (Game.actionType == ACTION_EVIL)
 800084c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800084e:	2b01      	cmp	r3, #1
 8000850:	d105      	bne.n	800085e <main+0xe6>
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2140      	movs	r1, #64	@ 0x40
 8000856:	4810      	ldr	r0, [pc, #64]	@ (8000898 <main+0x120>)
 8000858:	f001 fa48 	bl	8001cec <HAL_GPIO_WritePin>
          if (Game.actionType == ACTION_EVIL)
 800085c:	e00f      	b.n	800087e <main+0x106>
          else
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800085e:	2201      	movs	r2, #1
 8000860:	2120      	movs	r1, #32
 8000862:	480d      	ldr	r0, [pc, #52]	@ (8000898 <main+0x120>)
 8000864:	f001 fa42 	bl	8001cec <HAL_GPIO_WritePin>
          if (Game.actionType == ACTION_EVIL)
 8000868:	e009      	b.n	800087e <main+0x106>
      else
      {
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2120      	movs	r1, #32
 800086e:	480a      	ldr	r0, [pc, #40]	@ (8000898 <main+0x120>)
 8000870:	f001 fa3c 	bl	8001cec <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	2140      	movs	r1, #64	@ 0x40
 8000878:	4807      	ldr	r0, [pc, #28]	@ (8000898 <main+0x120>)
 800087a:	f001 fa37 	bl	8001cec <HAL_GPIO_WritePin>
      }


      Render.displayScreen(&Game);
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	f107 021c 	add.w	r2, r7, #28
 8000884:	4610      	mov	r0, r2
 8000886:	4798      	blx	r3
      HAL_Delay(50);
 8000888:	2032      	movs	r0, #50	@ 0x32
 800088a:	f000 ff89 	bl	80017a0 <HAL_Delay>
      state1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 800088e:	e78b      	b.n	80007a8 <main+0x30>
 8000890:	40020800 	.word	0x40020800
 8000894:	08003ea4 	.word	0x08003ea4
 8000898:	40020000 	.word	0x40020000

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b094      	sub	sp, #80	@ 0x50
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0320 	add.w	r3, r7, #32
 80008a6:	2230      	movs	r2, #48	@ 0x30
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f003 f83a 	bl	8003924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	4b29      	ldr	r3, [pc, #164]	@ (800096c <SystemClock_Config+0xd0>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c8:	4a28      	ldr	r2, [pc, #160]	@ (800096c <SystemClock_Config+0xd0>)
 80008ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d0:	4b26      	ldr	r3, [pc, #152]	@ (800096c <SystemClock_Config+0xd0>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <SystemClock_Config+0xd4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008e8:	4a21      	ldr	r2, [pc, #132]	@ (8000970 <SystemClock_Config+0xd4>)
 80008ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <SystemClock_Config+0xd4>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000900:	2301      	movs	r3, #1
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000904:	2310      	movs	r3, #16
 8000906:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000908:	2302      	movs	r3, #2
 800090a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800090c:	2300      	movs	r3, #0
 800090e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000910:	2310      	movs	r3, #16
 8000912:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000914:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000918:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800091a:	2304      	movs	r3, #4
 800091c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800091e:	2307      	movs	r3, #7
 8000920:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	4618      	mov	r0, r3
 8000928:	f001 fea8 	bl	800267c <HAL_RCC_OscConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000932:	f000 f8f3 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	230f      	movs	r3, #15
 8000938:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2302      	movs	r3, #2
 800093c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000942:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000946:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2102      	movs	r1, #2
 8000952:	4618      	mov	r0, r3
 8000954:	f002 f90a 	bl	8002b6c <HAL_RCC_ClockConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800095e:	f000 f8dd 	bl	8000b1c <Error_Handler>
  }
}
 8000962:	bf00      	nop
 8000964:	3750      	adds	r7, #80	@ 0x50
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800
 8000970:	40007000 	.word	0x40007000

08000974 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_I2C1_Init+0x50>)
 800097a:	4a13      	ldr	r2, [pc, #76]	@ (80009c8 <MX_I2C1_Init+0x54>)
 800097c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_I2C1_Init+0x50>)
 8000980:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <MX_I2C1_Init+0x58>)
 8000982:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000984:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_I2C1_Init+0x50>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_I2C1_Init+0x50>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_I2C1_Init+0x50>)
 8000992:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000996:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000998:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <MX_I2C1_Init+0x50>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_I2C1_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a4:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <MX_I2C1_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_I2C1_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <MX_I2C1_Init+0x50>)
 80009b2:	f001 f9b5 	bl	8001d20 <HAL_I2C_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009bc:	f000 f8ae 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000084 	.word	0x20000084
 80009c8:	40005400 	.word	0x40005400
 80009cc:	000186a0 	.word	0x000186a0

080009d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <MX_USART2_UART_Init+0x50>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 8000a08:	f002 fad0 	bl	8002fac <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a12:	f000 f883 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200000d8 	.word	0x200000d8
 8000a20:	40004400 	.word	0x40004400

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	@ 0x28
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b34      	ldr	r3, [pc, #208]	@ (8000b10 <MX_GPIO_Init+0xec>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a33      	ldr	r2, [pc, #204]	@ (8000b10 <MX_GPIO_Init+0xec>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b31      	ldr	r3, [pc, #196]	@ (8000b10 <MX_GPIO_Init+0xec>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b10 <MX_GPIO_Init+0xec>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8000b10 <MX_GPIO_Init+0xec>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b2a      	ldr	r3, [pc, #168]	@ (8000b10 <MX_GPIO_Init+0xec>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b26      	ldr	r3, [pc, #152]	@ (8000b10 <MX_GPIO_Init+0xec>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a25      	ldr	r2, [pc, #148]	@ (8000b10 <MX_GPIO_Init+0xec>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b23      	ldr	r3, [pc, #140]	@ (8000b10 <MX_GPIO_Init+0xec>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <MX_GPIO_Init+0xec>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a1e      	ldr	r2, [pc, #120]	@ (8000b10 <MX_GPIO_Init+0xec>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <MX_GPIO_Init+0xec>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2160      	movs	r1, #96	@ 0x60
 8000aae:	4819      	ldr	r0, [pc, #100]	@ (8000b14 <MX_GPIO_Init+0xf0>)
 8000ab0:	f001 f91c 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ab4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4813      	ldr	r0, [pc, #76]	@ (8000b18 <MX_GPIO_Init+0xf4>)
 8000acc:	f000 ff72 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8000ad0:	2360      	movs	r3, #96	@ 0x60
 8000ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480b      	ldr	r0, [pc, #44]	@ (8000b14 <MX_GPIO_Init+0xf0>)
 8000ae8:	f000 ff64 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 Button_Pin PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|Button_Pin|GPIO_PIN_9;
 8000aec:	f44f 7358 	mov.w	r3, #864	@ 0x360
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <MX_GPIO_Init+0xf4>)
 8000b02:	f000 ff57 	bl	80019b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	@ 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020800 	.word	0x40020800

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <Error_Handler+0x8>

08000b28 <displayHealth>:
 */
#include "render.h"

const int STARTING_Y = 2;

void displayHealth(const game* game) {
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	6078      	str	r0, [r7, #4]
	const int STARTING_X = 2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	60fb      	str	r3, [r7, #12]
	ssd1306_FillRectangle(STARTING_X, STARTING_Y, STARTING_X + 1, game->health + STARTING_Y, Black);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	b2d8      	uxtb	r0, r3
 8000b38:	2302      	movs	r3, #2
 8000b3a:	b2d9      	uxtb	r1, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	3301      	adds	r3, #1
 8000b42:	b2dc      	uxtb	r4, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	4413      	add	r3, r2
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2200      	movs	r2, #0
 8000b54:	9200      	str	r2, [sp, #0]
 8000b56:	4622      	mov	r2, r4
 8000b58:	f000 fcd6 	bl	8001508 <ssd1306_FillRectangle>
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd90      	pop	{r4, r7, pc}

08000b64 <displayHunger>:

void displayHunger(const game* game) {
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b087      	sub	sp, #28
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	6078      	str	r0, [r7, #4]
	const int STARTING_X = 6;
 8000b6c:	2306      	movs	r3, #6
 8000b6e:	60fb      	str	r3, [r7, #12]
	ssd1306_FillRectangle(STARTING_X, STARTING_Y, STARTING_X + 1, game->hunger + STARTING_Y, Black);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	b2d8      	uxtb	r0, r3
 8000b74:	2302      	movs	r3, #2
 8000b76:	b2d9      	uxtb	r1, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	b2dc      	uxtb	r4, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	2302      	movs	r3, #2
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2200      	movs	r2, #0
 8000b90:	9200      	str	r2, [sp, #0]
 8000b92:	4622      	mov	r2, r4
 8000b94:	f000 fcb8 	bl	8001508 <ssd1306_FillRectangle>
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd90      	pop	{r4, r7, pc}

08000ba0 <displayHappiness>:

void displayHappiness(const game* game) {
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b087      	sub	sp, #28
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	6078      	str	r0, [r7, #4]
	const int STARTING_X = 10;
 8000ba8:	230a      	movs	r3, #10
 8000baa:	60fb      	str	r3, [r7, #12]
	ssd1306_FillRectangle(STARTING_X, STARTING_Y, STARTING_X + 1, game->happiness + STARTING_Y, Black);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	b2d8      	uxtb	r0, r3
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	b2d9      	uxtb	r1, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	3301      	adds	r3, #1
 8000bba:	b2dc      	uxtb	r4, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4413      	add	r3, r2
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2200      	movs	r2, #0
 8000bcc:	9200      	str	r2, [sp, #0]
 8000bce:	4622      	mov	r2, r4
 8000bd0:	f000 fc9a 	bl	8001508 <ssd1306_FillRectangle>
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd90      	pop	{r4, r7, pc}

08000bdc <displaySprite>:

void displaySprite(const game* game){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	6078      	str	r0, [r7, #4]
    Mood mood = game->checkMood(game);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	695b      	ldr	r3, [r3, #20]
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	4798      	blx	r3
 8000bec:	60f8      	str	r0, [r7, #12]
    switch (mood) {
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	d837      	bhi.n	8000c64 <displaySprite+0x88>
 8000bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8000bfc <displaySprite+0x20>)
 8000bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfa:	bf00      	nop
 8000bfc:	08000c0d 	.word	0x08000c0d
 8000c00:	08000c23 	.word	0x08000c23
 8000c04:	08000c39 	.word	0x08000c39
 8000c08:	08000c4f 	.word	0x08000c4f
    case MOOD_SERIOUS:
      ssd1306_DrawBitmap(0,0, epd_bitmap_spriteSerious, SSD1306_WIDTH, SSD1306_HEIGHT, White);
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	9301      	str	r3, [sp, #4]
 8000c10:	2340      	movs	r3, #64	@ 0x40
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	2380      	movs	r3, #128	@ 0x80
 8000c16:	4a15      	ldr	r2, [pc, #84]	@ (8000c6c <displaySprite+0x90>)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f000 fcc2 	bl	80015a4 <ssd1306_DrawBitmap>
      break;
 8000c20:	e020      	b.n	8000c64 <displaySprite+0x88>
    case MOOD_UNHAPPY:
      ssd1306_DrawBitmap(0,0, epd_bitmap_spriteUnhappy, SSD1306_WIDTH, SSD1306_HEIGHT, White);
 8000c22:	2301      	movs	r3, #1
 8000c24:	9301      	str	r3, [sp, #4]
 8000c26:	2340      	movs	r3, #64	@ 0x40
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2380      	movs	r3, #128	@ 0x80
 8000c2c:	4a10      	ldr	r2, [pc, #64]	@ (8000c70 <displaySprite+0x94>)
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2000      	movs	r0, #0
 8000c32:	f000 fcb7 	bl	80015a4 <ssd1306_DrawBitmap>
      break;
 8000c36:	e015      	b.n	8000c64 <displaySprite+0x88>
    case MOOD_HAPPY:
      ssd1306_DrawBitmap(0,0, epd_bitmap_spriteHappy, SSD1306_WIDTH, SSD1306_HEIGHT, White);
 8000c38:	2301      	movs	r3, #1
 8000c3a:	9301      	str	r3, [sp, #4]
 8000c3c:	2340      	movs	r3, #64	@ 0x40
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2380      	movs	r3, #128	@ 0x80
 8000c42:	4a0c      	ldr	r2, [pc, #48]	@ (8000c74 <displaySprite+0x98>)
 8000c44:	2100      	movs	r1, #0
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 fcac 	bl	80015a4 <ssd1306_DrawBitmap>
      break;
 8000c4c:	e00a      	b.n	8000c64 <displaySprite+0x88>
    case MOOD_CUTE:
      ssd1306_DrawBitmap(0,0, epd_bitmap_spriteCute, SSD1306_WIDTH, SSD1306_HEIGHT, White);
 8000c4e:	2301      	movs	r3, #1
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	2340      	movs	r3, #64	@ 0x40
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2380      	movs	r3, #128	@ 0x80
 8000c58:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <displaySprite+0x9c>)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f000 fca1 	bl	80015a4 <ssd1306_DrawBitmap>
      break;
 8000c62:	bf00      	nop
    }

}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	080046d4 	.word	0x080046d4
 8000c70:	080042d4 	.word	0x080042d4
 8000c74:	08003ed4 	.word	0x08003ed4
 8000c78:	08004ad4 	.word	0x08004ad4

08000c7c <writeText>:

void writeText(const char* str) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af02      	add	r7, sp, #8
 8000c82:	6078      	str	r0, [r7, #4]
	ssd1306_SetCursor(32, 5);
 8000c84:	2105      	movs	r1, #5
 8000c86:	2020      	movs	r0, #32
 8000c88:	f000 fc26 	bl	80014d8 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_6x8, Black);
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <writeText+0x28>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	9200      	str	r2, [sp, #0]
 8000c92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 fbf9 	bl	800148c <ssd1306_WriteString>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	080054c4 	.word	0x080054c4

08000ca8 <displayKarma>:

void displayKarma(const game* game) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    ActionType mood = game->actionType;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60fb      	str	r3, [r7, #12]
    const char* karma = mood ? "EVIL" : "GOOD";
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <displayKarma+0x18>
 8000cbc:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <displayKarma+0x2c>)
 8000cbe:	e000      	b.n	8000cc2 <displayKarma+0x1a>
 8000cc0:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <displayKarma+0x30>)
 8000cc2:	60bb      	str	r3, [r7, #8]
    writeText(karma);
 8000cc4:	68b8      	ldr	r0, [r7, #8]
 8000cc6:	f7ff ffd9 	bl	8000c7c <writeText>
}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	08003eac 	.word	0x08003eac
 8000cd8:	08003eb4 	.word	0x08003eb4

08000cdc <displayScreen>:

void displayScreen(const game* game){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
    ssd1306_Fill(Black);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f000 faad 	bl	8001244 <ssd1306_Fill>
    displaySprite(game);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ff76 	bl	8000bdc <displaySprite>
    displayHealth(game);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff19 	bl	8000b28 <displayHealth>
    displayHunger(game);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ff34 	bl	8000b64 <displayHunger>
    displayHappiness(game);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff4f 	bl	8000ba0 <displayHappiness>
    displayKarma(game);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ffd0 	bl	8000ca8 <displayKarma>
    ssd1306_UpdateScreen();
 8000d08:	f000 fab4 	bl	8001274 <ssd1306_UpdateScreen>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <render_init>:


void render_init(render* render) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
    ssd1306_Init();
 8000d1c:	f000 fa28 	bl	8001170 <ssd1306_Init>
    ssd1306_Fill(Black);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f000 fa8f 	bl	8001244 <ssd1306_Fill>
	render->displayHealth = displayHealth;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a0b      	ldr	r2, [pc, #44]	@ (8000d58 <render_init+0x44>)
 8000d2a:	601a      	str	r2, [r3, #0]
	render->displayHunger = displayHunger;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d5c <render_init+0x48>)
 8000d30:	605a      	str	r2, [r3, #4]
	render->displayHappiness = displayHappiness;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <render_init+0x4c>)
 8000d36:	609a      	str	r2, [r3, #8]
	render->displaySprite = displaySprite;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <render_init+0x50>)
 8000d3c:	60da      	str	r2, [r3, #12]
	render->displayScreen = displayScreen;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a09      	ldr	r2, [pc, #36]	@ (8000d68 <render_init+0x54>)
 8000d42:	611a      	str	r2, [r3, #16]
	render->displayKarma = displayKarma;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a09      	ldr	r2, [pc, #36]	@ (8000d6c <render_init+0x58>)
 8000d48:	615a      	str	r2, [r3, #20]

	render->writeText = writeText;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a08      	ldr	r2, [pc, #32]	@ (8000d70 <render_init+0x5c>)
 8000d4e:	619a      	str	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	08000b29 	.word	0x08000b29
 8000d5c:	08000b65 	.word	0x08000b65
 8000d60:	08000ba1 	.word	0x08000ba1
 8000d64:	08000bdd 	.word	0x08000bdd
 8000d68:	08000cdd 	.word	0x08000cdd
 8000d6c:	08000ca9 	.word	0x08000ca9
 8000d70:	08000c7d 	.word	0x08000c7d

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <HAL_MspInit+0x4c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d82:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc0 <HAL_MspInit+0x4c>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <HAL_MspInit+0x4c>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	4a08      	ldr	r2, [pc, #32]	@ (8000dc0 <HAL_MspInit+0x4c>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_MspInit+0x4c>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000db2:	2007      	movs	r0, #7
 8000db4:	f000 fdca 	bl	800194c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	@ 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a19      	ldr	r2, [pc, #100]	@ (8000e48 <HAL_I2C_MspInit+0x84>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d12c      	bne.n	8000e40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <HAL_I2C_MspInit+0x88>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	4a17      	ldr	r2, [pc, #92]	@ (8000e4c <HAL_I2C_MspInit+0x88>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <HAL_I2C_MspInit+0x88>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e08:	2312      	movs	r3, #18
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e14:	2304      	movs	r3, #4
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480c      	ldr	r0, [pc, #48]	@ (8000e50 <HAL_I2C_MspInit+0x8c>)
 8000e20:	f000 fdc8 	bl	80019b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <HAL_I2C_MspInit+0x88>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	4a07      	ldr	r2, [pc, #28]	@ (8000e4c <HAL_I2C_MspInit+0x88>)
 8000e2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e34:	4b05      	ldr	r3, [pc, #20]	@ (8000e4c <HAL_I2C_MspInit+0x88>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	@ 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40005400 	.word	0x40005400
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020400 	.word	0x40020400

08000e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	@ 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a19      	ldr	r2, [pc, #100]	@ (8000ed8 <HAL_UART_MspInit+0x84>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d12b      	bne.n	8000ece <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <HAL_UART_MspInit+0x88>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7e:	4a17      	ldr	r2, [pc, #92]	@ (8000edc <HAL_UART_MspInit+0x88>)
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <HAL_UART_MspInit+0x88>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <HAL_UART_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a10      	ldr	r2, [pc, #64]	@ (8000edc <HAL_UART_MspInit+0x88>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <HAL_UART_MspInit+0x88>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eae:	230c      	movs	r3, #12
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <HAL_UART_MspInit+0x8c>)
 8000eca:	f000 fd73 	bl	80019b4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	@ 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40004400 	.word	0x40004400
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <NMI_Handler+0x4>

08000eec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3a:	f000 fc11 	bl	8001760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	e00a      	b.n	8000f6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f54:	f3af 8000 	nop.w
 8000f58:	4601      	mov	r1, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	60ba      	str	r2, [r7, #8]
 8000f60:	b2ca      	uxtb	r2, r1
 8000f62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3301      	adds	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	dbf0      	blt.n	8000f54 <_read+0x12>
  }

  return len;
 8000f72:	687b      	ldr	r3, [r7, #4]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e009      	b.n	8000fa2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	60ba      	str	r2, [r7, #8]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	dbf1      	blt.n	8000f8e <_write+0x12>
  }
  return len;
 8000faa:	687b      	ldr	r3, [r7, #4]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_close>:

int _close(int file)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fdc:	605a      	str	r2, [r3, #4]
  return 0;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_isatty>:

int _isatty(int file)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ff4:	2301      	movs	r3, #1
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001002:	b480      	push	{r7}
 8001004:	b085      	sub	sp, #20
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001024:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <_sbrk+0x5c>)
 8001026:	4b15      	ldr	r3, [pc, #84]	@ (800107c <_sbrk+0x60>)
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001030:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <_sbrk+0x64>)
 800103a:	4a12      	ldr	r2, [pc, #72]	@ (8001084 <_sbrk+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	429a      	cmp	r2, r3
 800104a:	d207      	bcs.n	800105c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800104c:	f002 fcb8 	bl	80039c0 <__errno>
 8001050:	4603      	mov	r3, r0
 8001052:	220c      	movs	r2, #12
 8001054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e009      	b.n	8001070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	4a05      	ldr	r2, [pc, #20]	@ (8001080 <_sbrk+0x64>)
 800106c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20018000 	.word	0x20018000
 800107c:	00000400 	.word	0x00000400
 8001080:	20000120 	.word	0x20000120
 8001084:	20000680 	.word	0x20000680

08001088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <SystemInit+0x20>)
 800108e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001092:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <SystemInit+0x20>)
 8001094:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001098:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010b0:	f7ff ffea 	bl	8001088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b4:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010b6:	490d      	ldr	r1, [pc, #52]	@ (80010ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b8:	4a0d      	ldr	r2, [pc, #52]	@ (80010f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010cc:	4c0a      	ldr	r4, [pc, #40]	@ (80010f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80010da:	f002 fc77 	bl	80039cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010de:	f7ff fb4b 	bl	8000778 <main>
  bx  lr    
 80010e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010f0:	080054e0 	.word	0x080054e0
  ldr r2, =_sbss
 80010f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010f8:	2000067c 	.word	0x2000067c

080010fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC_IRQHandler>

080010fe <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af04      	add	r7, sp, #16
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	9302      	str	r3, [sp, #8]
 800111c:	2301      	movs	r3, #1
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	2200      	movs	r2, #0
 8001128:	2178      	movs	r1, #120	@ 0x78
 800112a:	4803      	ldr	r0, [pc, #12]	@ (8001138 <ssd1306_WriteCommand+0x2c>)
 800112c:	f000 ff3c 	bl	8001fa8 <HAL_I2C_Mem_Write>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000084 	.word	0x20000084

0800113c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af04      	add	r7, sp, #16
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b29b      	uxth	r3, r3
 800114a:	f04f 32ff 	mov.w	r2, #4294967295
 800114e:	9202      	str	r2, [sp, #8]
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2301      	movs	r3, #1
 8001158:	2240      	movs	r2, #64	@ 0x40
 800115a:	2178      	movs	r1, #120	@ 0x78
 800115c:	4803      	ldr	r0, [pc, #12]	@ (800116c <ssd1306_WriteData+0x30>)
 800115e:	f000 ff23 	bl	8001fa8 <HAL_I2C_Mem_Write>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000084 	.word	0x20000084

08001170 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001174:	f7ff ffc3 	bl	80010fe <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001178:	2064      	movs	r0, #100	@ 0x64
 800117a:	f000 fb11 	bl	80017a0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800117e:	2000      	movs	r0, #0
 8001180:	f000 fa7e 	bl	8001680 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001184:	2020      	movs	r0, #32
 8001186:	f7ff ffc1 	bl	800110c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff ffbe 	bl	800110c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001190:	20b0      	movs	r0, #176	@ 0xb0
 8001192:	f7ff ffbb 	bl	800110c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001196:	20c8      	movs	r0, #200	@ 0xc8
 8001198:	f7ff ffb8 	bl	800110c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff ffb5 	bl	800110c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80011a2:	2010      	movs	r0, #16
 80011a4:	f7ff ffb2 	bl	800110c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80011a8:	2040      	movs	r0, #64	@ 0x40
 80011aa:	f7ff ffaf 	bl	800110c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80011ae:	20ff      	movs	r0, #255	@ 0xff
 80011b0:	f000 fa53 	bl	800165a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80011b4:	20a1      	movs	r0, #161	@ 0xa1
 80011b6:	f7ff ffa9 	bl	800110c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80011ba:	20a6      	movs	r0, #166	@ 0xa6
 80011bc:	f7ff ffa6 	bl	800110c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80011c0:	20a8      	movs	r0, #168	@ 0xa8
 80011c2:	f7ff ffa3 	bl	800110c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80011c6:	203f      	movs	r0, #63	@ 0x3f
 80011c8:	f7ff ffa0 	bl	800110c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80011cc:	20a4      	movs	r0, #164	@ 0xa4
 80011ce:	f7ff ff9d 	bl	800110c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80011d2:	20d3      	movs	r0, #211	@ 0xd3
 80011d4:	f7ff ff9a 	bl	800110c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff ff97 	bl	800110c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80011de:	20d5      	movs	r0, #213	@ 0xd5
 80011e0:	f7ff ff94 	bl	800110c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80011e4:	20f0      	movs	r0, #240	@ 0xf0
 80011e6:	f7ff ff91 	bl	800110c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80011ea:	20d9      	movs	r0, #217	@ 0xd9
 80011ec:	f7ff ff8e 	bl	800110c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80011f0:	2022      	movs	r0, #34	@ 0x22
 80011f2:	f7ff ff8b 	bl	800110c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80011f6:	20da      	movs	r0, #218	@ 0xda
 80011f8:	f7ff ff88 	bl	800110c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80011fc:	2012      	movs	r0, #18
 80011fe:	f7ff ff85 	bl	800110c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001202:	20db      	movs	r0, #219	@ 0xdb
 8001204:	f7ff ff82 	bl	800110c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001208:	2020      	movs	r0, #32
 800120a:	f7ff ff7f 	bl	800110c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800120e:	208d      	movs	r0, #141	@ 0x8d
 8001210:	f7ff ff7c 	bl	800110c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001214:	2014      	movs	r0, #20
 8001216:	f7ff ff79 	bl	800110c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800121a:	2001      	movs	r0, #1
 800121c:	f000 fa30 	bl	8001680 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001220:	2000      	movs	r0, #0
 8001222:	f000 f80f 	bl	8001244 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001226:	f000 f825 	bl	8001274 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800122a:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <ssd1306_Init+0xd0>)
 800122c:	2200      	movs	r2, #0
 800122e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <ssd1306_Init+0xd0>)
 8001232:	2200      	movs	r2, #0
 8001234:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001236:	4b02      	ldr	r3, [pc, #8]	@ (8001240 <ssd1306_Init+0xd0>)
 8001238:	2201      	movs	r2, #1
 800123a:	711a      	strb	r2, [r3, #4]
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000524 	.word	0x20000524

08001244 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <ssd1306_Fill+0x14>
 8001254:	2300      	movs	r3, #0
 8001256:	e000      	b.n	800125a <ssd1306_Fill+0x16>
 8001258:	23ff      	movs	r3, #255	@ 0xff
 800125a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800125e:	4619      	mov	r1, r3
 8001260:	4803      	ldr	r0, [pc, #12]	@ (8001270 <ssd1306_Fill+0x2c>)
 8001262:	f002 fb5f 	bl	8003924 <memset>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000124 	.word	0x20000124

08001274 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800127a:	2300      	movs	r3, #0
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	e016      	b.n	80012ae <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	3b50      	subs	r3, #80	@ 0x50
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff40 	bl	800110c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff ff3d 	bl	800110c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001292:	2010      	movs	r0, #16
 8001294:	f7ff ff3a 	bl	800110c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	01db      	lsls	r3, r3, #7
 800129c:	4a08      	ldr	r2, [pc, #32]	@ (80012c0 <ssd1306_UpdateScreen+0x4c>)
 800129e:	4413      	add	r3, r2
 80012a0:	2180      	movs	r1, #128	@ 0x80
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff4a 	bl	800113c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	3301      	adds	r3, #1
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b07      	cmp	r3, #7
 80012b2:	d9e5      	bls.n	8001280 <ssd1306_UpdateScreen+0xc>
    }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000124 	.word	0x20000124

080012c4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
 80012ce:	460b      	mov	r3, r1
 80012d0:	71bb      	strb	r3, [r7, #6]
 80012d2:	4613      	mov	r3, r2
 80012d4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db3d      	blt.n	800135a <ssd1306_DrawPixel+0x96>
 80012de:	79bb      	ldrb	r3, [r7, #6]
 80012e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80012e2:	d83a      	bhi.n	800135a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80012e4:	797b      	ldrb	r3, [r7, #5]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d11a      	bne.n	8001320 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012ea:	79fa      	ldrb	r2, [r7, #7]
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	08db      	lsrs	r3, r3, #3
 80012f0:	b2d8      	uxtb	r0, r3
 80012f2:	4603      	mov	r3, r0
 80012f4:	01db      	lsls	r3, r3, #7
 80012f6:	4413      	add	r3, r2
 80012f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001368 <ssd1306_DrawPixel+0xa4>)
 80012fa:	5cd3      	ldrb	r3, [r2, r3]
 80012fc:	b25a      	sxtb	r2, r3
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	2101      	movs	r1, #1
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	b25b      	sxtb	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b259      	sxtb	r1, r3
 8001310:	79fa      	ldrb	r2, [r7, #7]
 8001312:	4603      	mov	r3, r0
 8001314:	01db      	lsls	r3, r3, #7
 8001316:	4413      	add	r3, r2
 8001318:	b2c9      	uxtb	r1, r1
 800131a:	4a13      	ldr	r2, [pc, #76]	@ (8001368 <ssd1306_DrawPixel+0xa4>)
 800131c:	54d1      	strb	r1, [r2, r3]
 800131e:	e01d      	b.n	800135c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001320:	79fa      	ldrb	r2, [r7, #7]
 8001322:	79bb      	ldrb	r3, [r7, #6]
 8001324:	08db      	lsrs	r3, r3, #3
 8001326:	b2d8      	uxtb	r0, r3
 8001328:	4603      	mov	r3, r0
 800132a:	01db      	lsls	r3, r3, #7
 800132c:	4413      	add	r3, r2
 800132e:	4a0e      	ldr	r2, [pc, #56]	@ (8001368 <ssd1306_DrawPixel+0xa4>)
 8001330:	5cd3      	ldrb	r3, [r2, r3]
 8001332:	b25a      	sxtb	r2, r3
 8001334:	79bb      	ldrb	r3, [r7, #6]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	2101      	movs	r1, #1
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	b25b      	sxtb	r3, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	b25b      	sxtb	r3, r3
 8001346:	4013      	ands	r3, r2
 8001348:	b259      	sxtb	r1, r3
 800134a:	79fa      	ldrb	r2, [r7, #7]
 800134c:	4603      	mov	r3, r0
 800134e:	01db      	lsls	r3, r3, #7
 8001350:	4413      	add	r3, r2
 8001352:	b2c9      	uxtb	r1, r1
 8001354:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <ssd1306_DrawPixel+0xa4>)
 8001356:	54d1      	strb	r1, [r2, r3]
 8001358:	e000      	b.n	800135c <ssd1306_DrawPixel+0x98>
        return;
 800135a:	bf00      	nop
    }
}
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000124 	.word	0x20000124

0800136c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b089      	sub	sp, #36	@ 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	4604      	mov	r4, r0
 8001374:	4638      	mov	r0, r7
 8001376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800137a:	4623      	mov	r3, r4
 800137c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	2b1f      	cmp	r3, #31
 8001382:	d902      	bls.n	800138a <ssd1306_WriteChar+0x1e>
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2b7e      	cmp	r3, #126	@ 0x7e
 8001388:	d901      	bls.n	800138e <ssd1306_WriteChar+0x22>
        return 0;
 800138a:	2300      	movs	r3, #0
 800138c:	e077      	b.n	800147e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800138e:	4b3e      	ldr	r3, [pc, #248]	@ (8001488 <ssd1306_WriteChar+0x11c>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	783b      	ldrb	r3, [r7, #0]
 8001396:	4413      	add	r3, r2
 8001398:	2b80      	cmp	r3, #128	@ 0x80
 800139a:	dc06      	bgt.n	80013aa <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800139c:	4b3a      	ldr	r3, [pc, #232]	@ (8001488 <ssd1306_WriteChar+0x11c>)
 800139e:	885b      	ldrh	r3, [r3, #2]
 80013a0:	461a      	mov	r2, r3
 80013a2:	787b      	ldrb	r3, [r7, #1]
 80013a4:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80013a6:	2b40      	cmp	r3, #64	@ 0x40
 80013a8:	dd01      	ble.n	80013ae <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e067      	b.n	800147e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e04e      	b.n	8001452 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	3b20      	subs	r3, #32
 80013ba:	7879      	ldrb	r1, [r7, #1]
 80013bc:	fb01 f303 	mul.w	r3, r1, r3
 80013c0:	4619      	mov	r1, r3
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	440b      	add	r3, r1
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4413      	add	r3, r2
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
 80013d2:	e036      	b.n	8001442 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d013      	beq.n	800140c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80013e4:	4b28      	ldr	r3, [pc, #160]	@ (8001488 <ssd1306_WriteChar+0x11c>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	b2d8      	uxtb	r0, r3
 80013f2:	4b25      	ldr	r3, [pc, #148]	@ (8001488 <ssd1306_WriteChar+0x11c>)
 80013f4:	885b      	ldrh	r3, [r3, #2]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4413      	add	r3, r2
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001404:	4619      	mov	r1, r3
 8001406:	f7ff ff5d 	bl	80012c4 <ssd1306_DrawPixel>
 800140a:	e017      	b.n	800143c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800140c:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <ssd1306_WriteChar+0x11c>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4413      	add	r3, r2
 8001418:	b2d8      	uxtb	r0, r3
 800141a:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <ssd1306_WriteChar+0x11c>)
 800141c:	885b      	ldrh	r3, [r3, #2]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	4413      	add	r3, r2
 8001426:	b2d9      	uxtb	r1, r3
 8001428:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800142c:	2b00      	cmp	r3, #0
 800142e:	bf0c      	ite	eq
 8001430:	2301      	moveq	r3, #1
 8001432:	2300      	movne	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	f7ff ff44 	bl	80012c4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	3301      	adds	r3, #1
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	783b      	ldrb	r3, [r7, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4293      	cmp	r3, r2
 800144a:	d3c3      	bcc.n	80013d4 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	3301      	adds	r3, #1
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	787b      	ldrb	r3, [r7, #1]
 8001454:	461a      	mov	r2, r3
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	4293      	cmp	r3, r2
 800145a:	d3ab      	bcc.n	80013b4 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 800145c:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <ssd1306_WriteChar+0x11c>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	2a00      	cmp	r2, #0
 8001464:	d005      	beq.n	8001472 <ssd1306_WriteChar+0x106>
 8001466:	68b9      	ldr	r1, [r7, #8]
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	3a20      	subs	r2, #32
 800146c:	440a      	add	r2, r1
 800146e:	7812      	ldrb	r2, [r2, #0]
 8001470:	e000      	b.n	8001474 <ssd1306_WriteChar+0x108>
 8001472:	783a      	ldrb	r2, [r7, #0]
 8001474:	4413      	add	r3, r2
 8001476:	b29a      	uxth	r2, r3
 8001478:	4b03      	ldr	r3, [pc, #12]	@ (8001488 <ssd1306_WriteChar+0x11c>)
 800147a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800147c:	7bfb      	ldrb	r3, [r7, #15]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3724      	adds	r7, #36	@ 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd90      	pop	{r4, r7, pc}
 8001486:	bf00      	nop
 8001488:	20000524 	.word	0x20000524

0800148c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af02      	add	r7, sp, #8
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	4638      	mov	r0, r7
 8001496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800149a:	e013      	b.n	80014c4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	7818      	ldrb	r0, [r3, #0]
 80014a0:	7e3b      	ldrb	r3, [r7, #24]
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	463b      	mov	r3, r7
 80014a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a8:	f7ff ff60 	bl	800136c <ssd1306_WriteChar>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d002      	beq.n	80014be <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	e008      	b.n	80014d0 <ssd1306_WriteString+0x44>
        }
        str++;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3301      	adds	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1e7      	bne.n	800149c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	781b      	ldrb	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	460a      	mov	r2, r1
 80014e2:	71fb      	strb	r3, [r7, #7]
 80014e4:	4613      	mov	r3, r2
 80014e6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <ssd1306_SetCursor+0x2c>)
 80014ee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4b03      	ldr	r3, [pc, #12]	@ (8001504 <ssd1306_SetCursor+0x2c>)
 80014f6:	805a      	strh	r2, [r3, #2]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	20000524 	.word	0x20000524

08001508 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	4604      	mov	r4, r0
 8001510:	4608      	mov	r0, r1
 8001512:	4611      	mov	r1, r2
 8001514:	461a      	mov	r2, r3
 8001516:	4623      	mov	r3, r4
 8001518:	71fb      	strb	r3, [r7, #7]
 800151a:	4603      	mov	r3, r0
 800151c:	71bb      	strb	r3, [r7, #6]
 800151e:	460b      	mov	r3, r1
 8001520:	717b      	strb	r3, [r7, #5]
 8001522:	4613      	mov	r3, r2
 8001524:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001526:	79fa      	ldrb	r2, [r7, #7]
 8001528:	797b      	ldrb	r3, [r7, #5]
 800152a:	4293      	cmp	r3, r2
 800152c:	bf28      	it	cs
 800152e:	4613      	movcs	r3, r2
 8001530:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001532:	797a      	ldrb	r2, [r7, #5]
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	4293      	cmp	r3, r2
 8001538:	bf38      	it	cc
 800153a:	4613      	movcc	r3, r2
 800153c:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800153e:	79ba      	ldrb	r2, [r7, #6]
 8001540:	793b      	ldrb	r3, [r7, #4]
 8001542:	4293      	cmp	r3, r2
 8001544:	bf28      	it	cs
 8001546:	4613      	movcs	r3, r2
 8001548:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 800154a:	793a      	ldrb	r2, [r7, #4]
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	4293      	cmp	r3, r2
 8001550:	bf38      	it	cc
 8001552:	4613      	movcc	r3, r2
 8001554:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001556:	7afb      	ldrb	r3, [r7, #11]
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	e017      	b.n	800158c <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800155c:	7b7b      	ldrb	r3, [r7, #13]
 800155e:	73bb      	strb	r3, [r7, #14]
 8001560:	e009      	b.n	8001576 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001562:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001566:	7bf9      	ldrb	r1, [r7, #15]
 8001568:	7bbb      	ldrb	r3, [r7, #14]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff feaa 	bl	80012c4 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001570:	7bbb      	ldrb	r3, [r7, #14]
 8001572:	3301      	adds	r3, #1
 8001574:	73bb      	strb	r3, [r7, #14]
 8001576:	7bba      	ldrb	r2, [r7, #14]
 8001578:	7b3b      	ldrb	r3, [r7, #12]
 800157a:	429a      	cmp	r2, r3
 800157c:	d803      	bhi.n	8001586 <ssd1306_FillRectangle+0x7e>
 800157e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001582:	2b00      	cmp	r3, #0
 8001584:	daed      	bge.n	8001562 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	3301      	adds	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	7abb      	ldrb	r3, [r7, #10]
 8001590:	429a      	cmp	r2, r3
 8001592:	d803      	bhi.n	800159c <ssd1306_FillRectangle+0x94>
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	2b3f      	cmp	r3, #63	@ 0x3f
 8001598:	d9e0      	bls.n	800155c <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 800159a:	bf00      	nop
 800159c:	bf00      	nop
}
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd90      	pop	{r4, r7, pc}

080015a4 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	603a      	str	r2, [r7, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
 80015b2:	460b      	mov	r3, r1
 80015b4:	71bb      	strb	r3, [r7, #6]
 80015b6:	4613      	mov	r3, r2
 80015b8:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80015ba:	797b      	ldrb	r3, [r7, #5]
 80015bc:	3307      	adds	r3, #7
 80015be:	2b00      	cmp	r3, #0
 80015c0:	da00      	bge.n	80015c4 <ssd1306_DrawBitmap+0x20>
 80015c2:	3307      	adds	r3, #7
 80015c4:	10db      	asrs	r3, r3, #3
 80015c6:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db3e      	blt.n	8001652 <ssd1306_DrawBitmap+0xae>
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80015d8:	d83b      	bhi.n	8001652 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80015da:	2300      	movs	r3, #0
 80015dc:	73bb      	strb	r3, [r7, #14]
 80015de:	e033      	b.n	8001648 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80015e0:	2300      	movs	r3, #0
 80015e2:	737b      	strb	r3, [r7, #13]
 80015e4:	e026      	b.n	8001634 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80015e6:	7b7b      	ldrb	r3, [r7, #13]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	e00d      	b.n	8001614 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80015f8:	7bbb      	ldrb	r3, [r7, #14]
 80015fa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	7b7a      	ldrb	r2, [r7, #13]
 8001604:	08d2      	lsrs	r2, r2, #3
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	4413      	add	r3, r2
 800160a:	461a      	mov	r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	4413      	add	r3, r2
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001618:	2b00      	cmp	r3, #0
 800161a:	da08      	bge.n	800162e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800161c:	79fa      	ldrb	r2, [r7, #7]
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	4413      	add	r3, r2
 8001622:	b2db      	uxtb	r3, r3
 8001624:	7f3a      	ldrb	r2, [r7, #28]
 8001626:	79b9      	ldrb	r1, [r7, #6]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fe4b 	bl	80012c4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	3301      	adds	r3, #1
 8001632:	737b      	strb	r3, [r7, #13]
 8001634:	7b7a      	ldrb	r2, [r7, #13]
 8001636:	797b      	ldrb	r3, [r7, #5]
 8001638:	429a      	cmp	r2, r3
 800163a:	d3d4      	bcc.n	80015e6 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	3301      	adds	r3, #1
 8001640:	73bb      	strb	r3, [r7, #14]
 8001642:	79bb      	ldrb	r3, [r7, #6]
 8001644:	3301      	adds	r3, #1
 8001646:	71bb      	strb	r3, [r7, #6]
 8001648:	7bba      	ldrb	r2, [r7, #14]
 800164a:	7e3b      	ldrb	r3, [r7, #24]
 800164c:	429a      	cmp	r2, r3
 800164e:	d3c7      	bcc.n	80015e0 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001650:	e000      	b.n	8001654 <ssd1306_DrawBitmap+0xb0>
        return;
 8001652:	bf00      	nop
}
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001664:	2381      	movs	r3, #129	@ 0x81
 8001666:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fd4e 	bl	800110c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fd4a 	bl	800110c <ssd1306_WriteCommand>
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001690:	23af      	movs	r3, #175	@ 0xaf
 8001692:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001694:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <ssd1306_SetDisplayOn+0x38>)
 8001696:	2201      	movs	r2, #1
 8001698:	715a      	strb	r2, [r3, #5]
 800169a:	e004      	b.n	80016a6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800169c:	23ae      	movs	r3, #174	@ 0xae
 800169e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <ssd1306_SetDisplayOn+0x38>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fd2f 	bl	800110c <ssd1306_WriteCommand>
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000524 	.word	0x20000524

080016bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c0:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0d      	ldr	r2, [pc, #52]	@ (80016fc <HAL_Init+0x40>)
 80016c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016cc:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0a      	ldr	r2, [pc, #40]	@ (80016fc <HAL_Init+0x40>)
 80016d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d8:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <HAL_Init+0x40>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a07      	ldr	r2, [pc, #28]	@ (80016fc <HAL_Init+0x40>)
 80016de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e4:	2003      	movs	r0, #3
 80016e6:	f000 f931 	bl	800194c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f000 f808 	bl	8001700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f0:	f7ff fb40 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023c00 	.word	0x40023c00

08001700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <HAL_InitTick+0x54>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_InitTick+0x58>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001716:	fbb3 f3f1 	udiv	r3, r3, r1
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f93b 	bl	800199a <HAL_SYSTICK_Config>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e00e      	b.n	800174c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d80a      	bhi.n	800174a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f000 f911 	bl	8001962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001740:	4a06      	ldr	r2, [pc, #24]	@ (800175c <HAL_InitTick+0x5c>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e000      	b.n	800174c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000000 	.word	0x20000000
 8001758:	20000008 	.word	0x20000008
 800175c:	20000004 	.word	0x20000004

08001760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_IncTick+0x20>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_IncTick+0x24>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <HAL_IncTick+0x24>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000008 	.word	0x20000008
 8001784:	2000052c 	.word	0x2000052c

08001788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTick;
 800178c:	4b03      	ldr	r3, [pc, #12]	@ (800179c <HAL_GetTick+0x14>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2000052c 	.word	0x2000052c

080017a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a8:	f7ff ffee 	bl	8001788 <HAL_GetTick>
 80017ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d005      	beq.n	80017c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <HAL_Delay+0x44>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017c6:	bf00      	nop
 80017c8:	f7ff ffde 	bl	8001788 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d8f7      	bhi.n	80017c8 <HAL_Delay+0x28>
  {
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	@ (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	@ (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	@ (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	@ 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	@ 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	@ (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f7ff ff8e 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	@ (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff47 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001974:	f7ff ff5c 	bl	8001830 <__NVIC_GetPriorityGrouping>
 8001978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff ff8e 	bl	80018a0 <NVIC_EncodePriority>
 8001984:	4602      	mov	r2, r0
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff5d 	bl	800184c <__NVIC_SetPriority>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffb0 	bl	8001908 <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	@ 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	e159      	b.n	8001c84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d0:	2201      	movs	r2, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	f040 8148 	bne.w	8001c7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d005      	beq.n	8001a06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d130      	bne.n	8001a68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 0201 	and.w	r2, r3, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d017      	beq.n	8001aa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d123      	bne.n	8001af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	08da      	lsrs	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3208      	adds	r2, #8
 8001ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	08da      	lsrs	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3208      	adds	r2, #8
 8001af2:	69b9      	ldr	r1, [r7, #24]
 8001af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0203 	and.w	r2, r3, #3
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80a2 	beq.w	8001c7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b57      	ldr	r3, [pc, #348]	@ (8001c9c <HAL_GPIO_Init+0x2e8>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b42:	4a56      	ldr	r2, [pc, #344]	@ (8001c9c <HAL_GPIO_Init+0x2e8>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b4a:	4b54      	ldr	r3, [pc, #336]	@ (8001c9c <HAL_GPIO_Init+0x2e8>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b56:	4a52      	ldr	r2, [pc, #328]	@ (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a49      	ldr	r2, [pc, #292]	@ (8001ca4 <HAL_GPIO_Init+0x2f0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d019      	beq.n	8001bb6 <HAL_GPIO_Init+0x202>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a48      	ldr	r2, [pc, #288]	@ (8001ca8 <HAL_GPIO_Init+0x2f4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_GPIO_Init+0x1fe>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a47      	ldr	r2, [pc, #284]	@ (8001cac <HAL_GPIO_Init+0x2f8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00d      	beq.n	8001bae <HAL_GPIO_Init+0x1fa>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a46      	ldr	r2, [pc, #280]	@ (8001cb0 <HAL_GPIO_Init+0x2fc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d007      	beq.n	8001baa <HAL_GPIO_Init+0x1f6>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a45      	ldr	r2, [pc, #276]	@ (8001cb4 <HAL_GPIO_Init+0x300>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_GPIO_Init+0x1f2>
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	e008      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e004      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	f002 0203 	and.w	r2, r2, #3
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc8:	4935      	ldr	r1, [pc, #212]	@ (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd6:	4b38      	ldr	r3, [pc, #224]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bfa:	4a2f      	ldr	r2, [pc, #188]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c00:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c24:	4a24      	ldr	r2, [pc, #144]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c2a:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c54:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c78:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3301      	adds	r3, #1
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b0f      	cmp	r3, #15
 8001c88:	f67f aea2 	bls.w	80019d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3724      	adds	r7, #36	@ 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40013800 	.word	0x40013800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020c00 	.word	0x40020c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40013c00 	.word	0x40013c00

08001cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	887b      	ldrh	r3, [r7, #2]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e001      	b.n	8001cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cfc:	787b      	ldrb	r3, [r7, #1]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d02:	887a      	ldrh	r2, [r7, #2]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d08:	e003      	b.n	8001d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d0a:	887b      	ldrh	r3, [r7, #2]
 8001d0c:	041a      	lsls	r2, r3, #16
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	619a      	str	r2, [r3, #24]
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e12b      	b.n	8001f8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d106      	bne.n	8001d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff f83c 	bl	8000dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2224      	movs	r2, #36	@ 0x24
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d84:	f001 f8ea 	bl	8002f5c <HAL_RCC_GetPCLK1Freq>
 8001d88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4a81      	ldr	r2, [pc, #516]	@ (8001f94 <HAL_I2C_Init+0x274>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d807      	bhi.n	8001da4 <HAL_I2C_Init+0x84>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4a80      	ldr	r2, [pc, #512]	@ (8001f98 <HAL_I2C_Init+0x278>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	bf94      	ite	ls
 8001d9c:	2301      	movls	r3, #1
 8001d9e:	2300      	movhi	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	e006      	b.n	8001db2 <HAL_I2C_Init+0x92>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4a7d      	ldr	r2, [pc, #500]	@ (8001f9c <HAL_I2C_Init+0x27c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	bf94      	ite	ls
 8001dac:	2301      	movls	r3, #1
 8001dae:	2300      	movhi	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e0e7      	b.n	8001f8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4a78      	ldr	r2, [pc, #480]	@ (8001fa0 <HAL_I2C_Init+0x280>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	0c9b      	lsrs	r3, r3, #18
 8001dc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4a6a      	ldr	r2, [pc, #424]	@ (8001f94 <HAL_I2C_Init+0x274>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d802      	bhi.n	8001df4 <HAL_I2C_Init+0xd4>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	3301      	adds	r3, #1
 8001df2:	e009      	b.n	8001e08 <HAL_I2C_Init+0xe8>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	4a69      	ldr	r2, [pc, #420]	@ (8001fa4 <HAL_I2C_Init+0x284>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	099b      	lsrs	r3, r3, #6
 8001e06:	3301      	adds	r3, #1
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	495c      	ldr	r1, [pc, #368]	@ (8001f94 <HAL_I2C_Init+0x274>)
 8001e24:	428b      	cmp	r3, r1
 8001e26:	d819      	bhi.n	8001e5c <HAL_I2C_Init+0x13c>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1e59      	subs	r1, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e36:	1c59      	adds	r1, r3, #1
 8001e38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e3c:	400b      	ands	r3, r1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00a      	beq.n	8001e58 <HAL_I2C_Init+0x138>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1e59      	subs	r1, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e50:	3301      	adds	r3, #1
 8001e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e56:	e051      	b.n	8001efc <HAL_I2C_Init+0x1dc>
 8001e58:	2304      	movs	r3, #4
 8001e5a:	e04f      	b.n	8001efc <HAL_I2C_Init+0x1dc>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d111      	bne.n	8001e88 <HAL_I2C_Init+0x168>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1e58      	subs	r0, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	440b      	add	r3, r1
 8001e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	e012      	b.n	8001eae <HAL_I2C_Init+0x18e>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1e58      	subs	r0, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	0099      	lsls	r1, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_I2C_Init+0x196>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e022      	b.n	8001efc <HAL_I2C_Init+0x1dc>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10e      	bne.n	8001edc <HAL_I2C_Init+0x1bc>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1e58      	subs	r0, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6859      	ldr	r1, [r3, #4]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	440b      	add	r3, r1
 8001ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001eda:	e00f      	b.n	8001efc <HAL_I2C_Init+0x1dc>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1e58      	subs	r0, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	0099      	lsls	r1, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	6809      	ldr	r1, [r1, #0]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69da      	ldr	r2, [r3, #28]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6911      	ldr	r1, [r2, #16]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68d2      	ldr	r2, [r2, #12]
 8001f36:	4311      	orrs	r1, r2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2220      	movs	r2, #32
 8001f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	000186a0 	.word	0x000186a0
 8001f98:	001e847f 	.word	0x001e847f
 8001f9c:	003d08ff 	.word	0x003d08ff
 8001fa0:	431bde83 	.word	0x431bde83
 8001fa4:	10624dd3 	.word	0x10624dd3

08001fa8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	817b      	strh	r3, [r7, #10]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	813b      	strh	r3, [r7, #8]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fc2:	f7ff fbe1 	bl	8001788 <HAL_GetTick>
 8001fc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	f040 80d9 	bne.w	8002188 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2319      	movs	r3, #25
 8001fdc:	2201      	movs	r2, #1
 8001fde:	496d      	ldr	r1, [pc, #436]	@ (8002194 <HAL_I2C_Mem_Write+0x1ec>)
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f971 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001fec:	2302      	movs	r3, #2
 8001fee:	e0cc      	b.n	800218a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_I2C_Mem_Write+0x56>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e0c5      	b.n	800218a <HAL_I2C_Mem_Write+0x1e2>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d007      	beq.n	8002024 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002032:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2221      	movs	r2, #33	@ 0x21
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2240      	movs	r2, #64	@ 0x40
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a3a      	ldr	r2, [r7, #32]
 800204e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002054:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4a4d      	ldr	r2, [pc, #308]	@ (8002198 <HAL_I2C_Mem_Write+0x1f0>)
 8002064:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002066:	88f8      	ldrh	r0, [r7, #6]
 8002068:	893a      	ldrh	r2, [r7, #8]
 800206a:	8979      	ldrh	r1, [r7, #10]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	4603      	mov	r3, r0
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f890 	bl	800219c <I2C_RequestMemoryWrite>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d052      	beq.n	8002128 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e081      	b.n	800218a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 fa36 	bl	80024fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00d      	beq.n	80020b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	2b04      	cmp	r3, #4
 800209c:	d107      	bne.n	80020ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e06b      	b.n	800218a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d11b      	bne.n	8002128 <HAL_I2C_Mem_Write+0x180>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d017      	beq.n	8002128 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1aa      	bne.n	8002086 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 fa29 	bl	800258c <I2C_WaitOnBTFFlagUntilTimeout>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00d      	beq.n	800215c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	2b04      	cmp	r3, #4
 8002146:	d107      	bne.n	8002158 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002156:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e016      	b.n	800218a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800216a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	e000      	b.n	800218a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002188:	2302      	movs	r3, #2
  }
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	00100002 	.word	0x00100002
 8002198:	ffff0000 	.word	0xffff0000

0800219c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	4608      	mov	r0, r1
 80021a6:	4611      	mov	r1, r2
 80021a8:	461a      	mov	r2, r3
 80021aa:	4603      	mov	r3, r0
 80021ac:	817b      	strh	r3, [r7, #10]
 80021ae:	460b      	mov	r3, r1
 80021b0:	813b      	strh	r3, [r7, #8]
 80021b2:	4613      	mov	r3, r2
 80021b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f878 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021ec:	d103      	bne.n	80021f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e05f      	b.n	80022ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021fa:	897b      	ldrh	r3, [r7, #10]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002208:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	6a3a      	ldr	r2, [r7, #32]
 800220e:	492d      	ldr	r1, [pc, #180]	@ (80022c4 <I2C_RequestMemoryWrite+0x128>)
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 f8d3 	bl	80023bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e04c      	b.n	80022ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002238:	6a39      	ldr	r1, [r7, #32]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f95e 	bl	80024fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00d      	beq.n	8002262 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	2b04      	cmp	r3, #4
 800224c:	d107      	bne.n	800225e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800225c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e02b      	b.n	80022ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002268:	893b      	ldrh	r3, [r7, #8]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	611a      	str	r2, [r3, #16]
 8002272:	e021      	b.n	80022b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002274:	893b      	ldrh	r3, [r7, #8]
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	b29b      	uxth	r3, r3
 800227a:	b2da      	uxtb	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002284:	6a39      	ldr	r1, [r7, #32]
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f938 	bl	80024fc <I2C_WaitOnTXEFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00d      	beq.n	80022ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	2b04      	cmp	r3, #4
 8002298:	d107      	bne.n	80022aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e005      	b.n	80022ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022ae:	893b      	ldrh	r3, [r7, #8]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	00010002 	.word	0x00010002

080022c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d8:	e048      	b.n	800236c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d044      	beq.n	800236c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e2:	f7ff fa51 	bl	8001788 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d302      	bcc.n	80022f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d139      	bne.n	800236c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	0c1b      	lsrs	r3, r3, #16
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d10d      	bne.n	800231e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	43da      	mvns	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	4013      	ands	r3, r2
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	e00c      	b.n	8002338 <I2C_WaitOnFlagUntilTimeout+0x70>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	43da      	mvns	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	4013      	ands	r3, r2
 800232a:	b29b      	uxth	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	429a      	cmp	r2, r3
 800233c:	d116      	bne.n	800236c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	f043 0220 	orr.w	r2, r3, #32
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e023      	b.n	80023b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	0c1b      	lsrs	r3, r3, #16
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d10d      	bne.n	8002392 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	43da      	mvns	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	4013      	ands	r3, r2
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	bf0c      	ite	eq
 8002388:	2301      	moveq	r3, #1
 800238a:	2300      	movne	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	e00c      	b.n	80023ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	43da      	mvns	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	4013      	ands	r3, r2
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf0c      	ite	eq
 80023a4:	2301      	moveq	r3, #1
 80023a6:	2300      	movne	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d093      	beq.n	80022da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023ca:	e071      	b.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023da:	d123      	bne.n	8002424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002410:	f043 0204 	orr.w	r2, r3, #4
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e067      	b.n	80024f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242a:	d041      	beq.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242c:	f7ff f9ac 	bl	8001788 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	429a      	cmp	r2, r3
 800243a:	d302      	bcc.n	8002442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d136      	bne.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	0c1b      	lsrs	r3, r3, #16
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b01      	cmp	r3, #1
 800244a:	d10c      	bne.n	8002466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	43da      	mvns	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4013      	ands	r3, r2
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	bf14      	ite	ne
 800245e:	2301      	movne	r3, #1
 8002460:	2300      	moveq	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	e00b      	b.n	800247e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	43da      	mvns	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4013      	ands	r3, r2
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf14      	ite	ne
 8002478:	2301      	movne	r3, #1
 800247a:	2300      	moveq	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d016      	beq.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249c:	f043 0220 	orr.w	r2, r3, #32
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e021      	b.n	80024f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	0c1b      	lsrs	r3, r3, #16
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d10c      	bne.n	80024d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	43da      	mvns	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	4013      	ands	r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf14      	ite	ne
 80024cc:	2301      	movne	r3, #1
 80024ce:	2300      	moveq	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	e00b      	b.n	80024ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	43da      	mvns	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4013      	ands	r3, r2
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	bf14      	ite	ne
 80024e6:	2301      	movne	r3, #1
 80024e8:	2300      	moveq	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f47f af6d 	bne.w	80023cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002508:	e034      	b.n	8002574 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f886 	bl	800261c <I2C_IsAcknowledgeFailed>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e034      	b.n	8002584 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d028      	beq.n	8002574 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002522:	f7ff f931 	bl	8001788 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	429a      	cmp	r2, r3
 8002530:	d302      	bcc.n	8002538 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d11d      	bne.n	8002574 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002542:	2b80      	cmp	r3, #128	@ 0x80
 8002544:	d016      	beq.n	8002574 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	f043 0220 	orr.w	r2, r3, #32
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e007      	b.n	8002584 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800257e:	2b80      	cmp	r3, #128	@ 0x80
 8002580:	d1c3      	bne.n	800250a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002598:	e034      	b.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f83e 	bl	800261c <I2C_IsAcknowledgeFailed>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e034      	b.n	8002614 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d028      	beq.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b2:	f7ff f8e9 	bl	8001788 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d302      	bcc.n	80025c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d11d      	bne.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d016      	beq.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f0:	f043 0220 	orr.w	r2, r3, #32
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e007      	b.n	8002614 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b04      	cmp	r3, #4
 8002610:	d1c3      	bne.n	800259a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002632:	d11b      	bne.n	800266c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800263c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f043 0204 	orr.w	r2, r3, #4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e267      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d075      	beq.n	8002786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800269a:	4b88      	ldr	r3, [pc, #544]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d00c      	beq.n	80026c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a6:	4b85      	ldr	r3, [pc, #532]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d112      	bne.n	80026d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b2:	4b82      	ldr	r3, [pc, #520]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026be:	d10b      	bne.n	80026d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c0:	4b7e      	ldr	r3, [pc, #504]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d05b      	beq.n	8002784 <HAL_RCC_OscConfig+0x108>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d157      	bne.n	8002784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e242      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026e0:	d106      	bne.n	80026f0 <HAL_RCC_OscConfig+0x74>
 80026e2:	4b76      	ldr	r3, [pc, #472]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a75      	ldr	r2, [pc, #468]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e01d      	b.n	800272c <HAL_RCC_OscConfig+0xb0>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x98>
 80026fa:	4b70      	ldr	r3, [pc, #448]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a6f      	ldr	r2, [pc, #444]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 8002700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b6d      	ldr	r3, [pc, #436]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a6c      	ldr	r2, [pc, #432]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e00b      	b.n	800272c <HAL_RCC_OscConfig+0xb0>
 8002714:	4b69      	ldr	r3, [pc, #420]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a68      	ldr	r2, [pc, #416]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 800271a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	4b66      	ldr	r3, [pc, #408]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a65      	ldr	r2, [pc, #404]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 8002726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800272a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d013      	beq.n	800275c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7ff f828 	bl	8001788 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800273c:	f7ff f824 	bl	8001788 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	@ 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e207      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b5b      	ldr	r3, [pc, #364]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0xc0>
 800275a:	e014      	b.n	8002786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7ff f814 	bl	8001788 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002764:	f7ff f810 	bl	8001788 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	@ 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e1f3      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	4b51      	ldr	r3, [pc, #324]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0xe8>
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d063      	beq.n	800285a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002792:	4b4a      	ldr	r3, [pc, #296]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279e:	4b47      	ldr	r3, [pc, #284]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d11c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027aa:	4b44      	ldr	r3, [pc, #272]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d116      	bne.n	80027e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	4b41      	ldr	r3, [pc, #260]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x152>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e1c7      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ce:	4b3b      	ldr	r3, [pc, #236]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4937      	ldr	r1, [pc, #220]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	e03a      	b.n	800285a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d020      	beq.n	800282e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ec:	4b34      	ldr	r3, [pc, #208]	@ (80028c0 <HAL_RCC_OscConfig+0x244>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f2:	f7fe ffc9 	bl	8001788 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fa:	f7fe ffc5 	bl	8001788 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e1a8      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280c:	4b2b      	ldr	r3, [pc, #172]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002818:	4b28      	ldr	r3, [pc, #160]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4925      	ldr	r1, [pc, #148]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]
 800282c:	e015      	b.n	800285a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282e:	4b24      	ldr	r3, [pc, #144]	@ (80028c0 <HAL_RCC_OscConfig+0x244>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe ffa8 	bl	8001788 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283c:	f7fe ffa4 	bl	8001788 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e187      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284e:	4b1b      	ldr	r3, [pc, #108]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d036      	beq.n	80028d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d016      	beq.n	800289c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800286e:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <HAL_RCC_OscConfig+0x248>)
 8002870:	2201      	movs	r2, #1
 8002872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002874:	f7fe ff88 	bl	8001788 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287c:	f7fe ff84 	bl	8001788 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e167      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288e:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <HAL_RCC_OscConfig+0x240>)
 8002890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x200>
 800289a:	e01b      	b.n	80028d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800289c:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <HAL_RCC_OscConfig+0x248>)
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a2:	f7fe ff71 	bl	8001788 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a8:	e00e      	b.n	80028c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028aa:	f7fe ff6d 	bl	8001788 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d907      	bls.n	80028c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e150      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
 80028bc:	40023800 	.word	0x40023800
 80028c0:	42470000 	.word	0x42470000
 80028c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c8:	4b88      	ldr	r3, [pc, #544]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 80028ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1ea      	bne.n	80028aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 8097 	beq.w	8002a10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e6:	4b81      	ldr	r3, [pc, #516]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10f      	bne.n	8002912 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	4b7d      	ldr	r3, [pc, #500]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	4a7c      	ldr	r2, [pc, #496]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 80028fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002900:	6413      	str	r3, [r2, #64]	@ 0x40
 8002902:	4b7a      	ldr	r3, [pc, #488]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290e:	2301      	movs	r3, #1
 8002910:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002912:	4b77      	ldr	r3, [pc, #476]	@ (8002af0 <HAL_RCC_OscConfig+0x474>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d118      	bne.n	8002950 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800291e:	4b74      	ldr	r3, [pc, #464]	@ (8002af0 <HAL_RCC_OscConfig+0x474>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a73      	ldr	r2, [pc, #460]	@ (8002af0 <HAL_RCC_OscConfig+0x474>)
 8002924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292a:	f7fe ff2d 	bl	8001788 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002932:	f7fe ff29 	bl	8001788 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e10c      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002944:	4b6a      	ldr	r3, [pc, #424]	@ (8002af0 <HAL_RCC_OscConfig+0x474>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d106      	bne.n	8002966 <HAL_RCC_OscConfig+0x2ea>
 8002958:	4b64      	ldr	r3, [pc, #400]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295c:	4a63      	ldr	r2, [pc, #396]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6713      	str	r3, [r2, #112]	@ 0x70
 8002964:	e01c      	b.n	80029a0 <HAL_RCC_OscConfig+0x324>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b05      	cmp	r3, #5
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0x30c>
 800296e:	4b5f      	ldr	r3, [pc, #380]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002972:	4a5e      	ldr	r2, [pc, #376]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	6713      	str	r3, [r2, #112]	@ 0x70
 800297a:	4b5c      	ldr	r3, [pc, #368]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297e:	4a5b      	ldr	r2, [pc, #364]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6713      	str	r3, [r2, #112]	@ 0x70
 8002986:	e00b      	b.n	80029a0 <HAL_RCC_OscConfig+0x324>
 8002988:	4b58      	ldr	r3, [pc, #352]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298c:	4a57      	ldr	r2, [pc, #348]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	6713      	str	r3, [r2, #112]	@ 0x70
 8002994:	4b55      	ldr	r3, [pc, #340]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002998:	4a54      	ldr	r2, [pc, #336]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 800299a:	f023 0304 	bic.w	r3, r3, #4
 800299e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d015      	beq.n	80029d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a8:	f7fe feee 	bl	8001788 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b0:	f7fe feea 	bl	8001788 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e0cb      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c6:	4b49      	ldr	r3, [pc, #292]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0ee      	beq.n	80029b0 <HAL_RCC_OscConfig+0x334>
 80029d2:	e014      	b.n	80029fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d4:	f7fe fed8 	bl	8001788 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7fe fed4 	bl	8001788 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e0b5      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f2:	4b3e      	ldr	r3, [pc, #248]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1ee      	bne.n	80029dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029fe:	7dfb      	ldrb	r3, [r7, #23]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a04:	4b39      	ldr	r3, [pc, #228]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	4a38      	ldr	r2, [pc, #224]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 8002a0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 80a1 	beq.w	8002b5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a1a:	4b34      	ldr	r3, [pc, #208]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d05c      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d141      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2e:	4b31      	ldr	r3, [pc, #196]	@ (8002af4 <HAL_RCC_OscConfig+0x478>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fe fea8 	bl	8001788 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe fea4 	bl	8001788 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e087      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	4b27      	ldr	r3, [pc, #156]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69da      	ldr	r2, [r3, #28]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	019b      	lsls	r3, r3, #6
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	3b01      	subs	r3, #1
 8002a74:	041b      	lsls	r3, r3, #16
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	061b      	lsls	r3, r3, #24
 8002a7e:	491b      	ldr	r1, [pc, #108]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a84:	4b1b      	ldr	r3, [pc, #108]	@ (8002af4 <HAL_RCC_OscConfig+0x478>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fe7d 	bl	8001788 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a92:	f7fe fe79 	bl	8001788 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e05c      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa4:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x416>
 8002ab0:	e054      	b.n	8002b5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab2:	4b10      	ldr	r3, [pc, #64]	@ (8002af4 <HAL_RCC_OscConfig+0x478>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fe66 	bl	8001788 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe fe62 	bl	8001788 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e045      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	4b06      	ldr	r3, [pc, #24]	@ (8002aec <HAL_RCC_OscConfig+0x470>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x444>
 8002ade:	e03d      	b.n	8002b5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e038      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40007000 	.word	0x40007000
 8002af4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002af8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b68 <HAL_RCC_OscConfig+0x4ec>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d028      	beq.n	8002b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d121      	bne.n	8002b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d11a      	bne.n	8002b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b28:	4013      	ands	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d111      	bne.n	8002b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3e:	085b      	lsrs	r3, r3, #1
 8002b40:	3b01      	subs	r3, #1
 8002b42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023800 	.word	0x40023800

08002b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0cc      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b80:	4b68      	ldr	r3, [pc, #416]	@ (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d90c      	bls.n	8002ba8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b65      	ldr	r3, [pc, #404]	@ (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b63      	ldr	r3, [pc, #396]	@ (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0b8      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc0:	4b59      	ldr	r3, [pc, #356]	@ (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4a58      	ldr	r2, [pc, #352]	@ (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd8:	4b53      	ldr	r3, [pc, #332]	@ (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	4a52      	ldr	r2, [pc, #328]	@ (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002be2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be4:	4b50      	ldr	r3, [pc, #320]	@ (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	494d      	ldr	r1, [pc, #308]	@ (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d044      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b47      	ldr	r3, [pc, #284]	@ (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d119      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e07f      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d003      	beq.n	8002c2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d107      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e06f      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e067      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c4a:	4b37      	ldr	r3, [pc, #220]	@ (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f023 0203 	bic.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4934      	ldr	r1, [pc, #208]	@ (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c5c:	f7fe fd94 	bl	8001788 <HAL_GetTick>
 8002c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c64:	f7fe fd90 	bl	8001788 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e04f      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 020c 	and.w	r2, r3, #12
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d1eb      	bne.n	8002c64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b25      	ldr	r3, [pc, #148]	@ (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d20c      	bcs.n	8002cb4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b22      	ldr	r3, [pc, #136]	@ (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b20      	ldr	r3, [pc, #128]	@ (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e032      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc0:	4b19      	ldr	r3, [pc, #100]	@ (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4916      	ldr	r1, [pc, #88]	@ (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cde:	4b12      	ldr	r3, [pc, #72]	@ (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	490e      	ldr	r1, [pc, #56]	@ (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cf2:	f000 f821 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	490a      	ldr	r1, [pc, #40]	@ (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	5ccb      	ldrb	r3, [r1, r3]
 8002d06:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0a:	4a09      	ldr	r2, [pc, #36]	@ (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d0e:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <HAL_RCC_ClockConfig+0x1c8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fcf4 	bl	8001700 <HAL_InitTick>

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40023c00 	.word	0x40023c00
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	08003ebc 	.word	0x08003ebc
 8002d30:	20000000 	.word	0x20000000
 8002d34:	20000004 	.word	0x20000004

08002d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d3c:	b094      	sub	sp, #80	@ 0x50
 8002d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d50:	4b79      	ldr	r3, [pc, #484]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 030c 	and.w	r3, r3, #12
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d00d      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0x40>
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	f200 80e1 	bhi.w	8002f24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x34>
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d003      	beq.n	8002d72 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d6a:	e0db      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d6c:	4b73      	ldr	r3, [pc, #460]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d70:	e0db      	b.n	8002f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d72:	4b73      	ldr	r3, [pc, #460]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d76:	e0d8      	b.n	8002f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d78:	4b6f      	ldr	r3, [pc, #444]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d80:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d82:	4b6d      	ldr	r3, [pc, #436]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d063      	beq.n	8002e56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	099b      	lsrs	r3, r3, #6
 8002d94:	2200      	movs	r2, #0
 8002d96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002da2:	2300      	movs	r3, #0
 8002da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002da6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002daa:	4622      	mov	r2, r4
 8002dac:	462b      	mov	r3, r5
 8002dae:	f04f 0000 	mov.w	r0, #0
 8002db2:	f04f 0100 	mov.w	r1, #0
 8002db6:	0159      	lsls	r1, r3, #5
 8002db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dbc:	0150      	lsls	r0, r2, #5
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	1a51      	subs	r1, r2, r1
 8002dc6:	6139      	str	r1, [r7, #16]
 8002dc8:	4629      	mov	r1, r5
 8002dca:	eb63 0301 	sbc.w	r3, r3, r1
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ddc:	4659      	mov	r1, fp
 8002dde:	018b      	lsls	r3, r1, #6
 8002de0:	4651      	mov	r1, sl
 8002de2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002de6:	4651      	mov	r1, sl
 8002de8:	018a      	lsls	r2, r1, #6
 8002dea:	4651      	mov	r1, sl
 8002dec:	ebb2 0801 	subs.w	r8, r2, r1
 8002df0:	4659      	mov	r1, fp
 8002df2:	eb63 0901 	sbc.w	r9, r3, r1
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e0a:	4690      	mov	r8, r2
 8002e0c:	4699      	mov	r9, r3
 8002e0e:	4623      	mov	r3, r4
 8002e10:	eb18 0303 	adds.w	r3, r8, r3
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	462b      	mov	r3, r5
 8002e18:	eb49 0303 	adc.w	r3, r9, r3
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	024b      	lsls	r3, r1, #9
 8002e2e:	4621      	mov	r1, r4
 8002e30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e34:	4621      	mov	r1, r4
 8002e36:	024a      	lsls	r2, r1, #9
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e3e:	2200      	movs	r2, #0
 8002e40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e48:	f7fd f9c4 	bl	80001d4 <__aeabi_uldivmod>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4613      	mov	r3, r2
 8002e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e54:	e058      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e56:	4b38      	ldr	r3, [pc, #224]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	099b      	lsrs	r3, r3, #6
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	4611      	mov	r1, r2
 8002e62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e66:	623b      	str	r3, [r7, #32]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e70:	4642      	mov	r2, r8
 8002e72:	464b      	mov	r3, r9
 8002e74:	f04f 0000 	mov.w	r0, #0
 8002e78:	f04f 0100 	mov.w	r1, #0
 8002e7c:	0159      	lsls	r1, r3, #5
 8002e7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e82:	0150      	lsls	r0, r2, #5
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4641      	mov	r1, r8
 8002e8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e8e:	4649      	mov	r1, r9
 8002e90:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ea0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ea4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ea8:	ebb2 040a 	subs.w	r4, r2, sl
 8002eac:	eb63 050b 	sbc.w	r5, r3, fp
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	00eb      	lsls	r3, r5, #3
 8002eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ebe:	00e2      	lsls	r2, r4, #3
 8002ec0:	4614      	mov	r4, r2
 8002ec2:	461d      	mov	r5, r3
 8002ec4:	4643      	mov	r3, r8
 8002ec6:	18e3      	adds	r3, r4, r3
 8002ec8:	603b      	str	r3, [r7, #0]
 8002eca:	464b      	mov	r3, r9
 8002ecc:	eb45 0303 	adc.w	r3, r5, r3
 8002ed0:	607b      	str	r3, [r7, #4]
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ede:	4629      	mov	r1, r5
 8002ee0:	028b      	lsls	r3, r1, #10
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ee8:	4621      	mov	r1, r4
 8002eea:	028a      	lsls	r2, r1, #10
 8002eec:	4610      	mov	r0, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	61fa      	str	r2, [r7, #28]
 8002ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002efc:	f7fd f96a 	bl	80001d4 <__aeabi_uldivmod>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4613      	mov	r3, r2
 8002f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f08:	4b0b      	ldr	r3, [pc, #44]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	0c1b      	lsrs	r3, r3, #16
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	3301      	adds	r3, #1
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f22:	e002      	b.n	8002f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f24:	4b05      	ldr	r3, [pc, #20]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3750      	adds	r7, #80	@ 0x50
 8002f30:	46bd      	mov	sp, r7
 8002f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	00f42400 	.word	0x00f42400
 8002f40:	007a1200 	.word	0x007a1200

08002f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f48:	4b03      	ldr	r3, [pc, #12]	@ (8002f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	20000000 	.word	0x20000000

08002f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f60:	f7ff fff0 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f64:	4602      	mov	r2, r0
 8002f66:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	0a9b      	lsrs	r3, r3, #10
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	4903      	ldr	r1, [pc, #12]	@ (8002f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f72:	5ccb      	ldrb	r3, [r1, r3]
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	08003ecc 	.word	0x08003ecc

08002f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f88:	f7ff ffdc 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	4b05      	ldr	r3, [pc, #20]	@ (8002fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	0b5b      	lsrs	r3, r3, #13
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	4903      	ldr	r1, [pc, #12]	@ (8002fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f9a:	5ccb      	ldrb	r3, [r1, r3]
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	08003ecc 	.word	0x08003ecc

08002fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e042      	b.n	8003044 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fd ff3e 	bl	8000e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2224      	movs	r2, #36	@ 0x24
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f82b 	bl	800304c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800304c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003050:	b0c0      	sub	sp, #256	@ 0x100
 8003052:	af00      	add	r7, sp, #0
 8003054:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003068:	68d9      	ldr	r1, [r3, #12]
 800306a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	ea40 0301 	orr.w	r3, r0, r1
 8003074:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	431a      	orrs	r2, r3
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	431a      	orrs	r2, r3
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80030a4:	f021 010c 	bic.w	r1, r1, #12
 80030a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80030b2:	430b      	orrs	r3, r1
 80030b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80030c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c6:	6999      	ldr	r1, [r3, #24]
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	ea40 0301 	orr.w	r3, r0, r1
 80030d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4b8f      	ldr	r3, [pc, #572]	@ (8003318 <UART_SetConfig+0x2cc>)
 80030dc:	429a      	cmp	r2, r3
 80030de:	d005      	beq.n	80030ec <UART_SetConfig+0xa0>
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	4b8d      	ldr	r3, [pc, #564]	@ (800331c <UART_SetConfig+0x2d0>)
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d104      	bne.n	80030f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030ec:	f7ff ff4a 	bl	8002f84 <HAL_RCC_GetPCLK2Freq>
 80030f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80030f4:	e003      	b.n	80030fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030f6:	f7ff ff31 	bl	8002f5c <HAL_RCC_GetPCLK1Freq>
 80030fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003108:	f040 810c 	bne.w	8003324 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800310c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003110:	2200      	movs	r2, #0
 8003112:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003116:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800311a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800311e:	4622      	mov	r2, r4
 8003120:	462b      	mov	r3, r5
 8003122:	1891      	adds	r1, r2, r2
 8003124:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003126:	415b      	adcs	r3, r3
 8003128:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800312a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800312e:	4621      	mov	r1, r4
 8003130:	eb12 0801 	adds.w	r8, r2, r1
 8003134:	4629      	mov	r1, r5
 8003136:	eb43 0901 	adc.w	r9, r3, r1
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003146:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800314a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800314e:	4690      	mov	r8, r2
 8003150:	4699      	mov	r9, r3
 8003152:	4623      	mov	r3, r4
 8003154:	eb18 0303 	adds.w	r3, r8, r3
 8003158:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800315c:	462b      	mov	r3, r5
 800315e:	eb49 0303 	adc.w	r3, r9, r3
 8003162:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003172:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003176:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800317a:	460b      	mov	r3, r1
 800317c:	18db      	adds	r3, r3, r3
 800317e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003180:	4613      	mov	r3, r2
 8003182:	eb42 0303 	adc.w	r3, r2, r3
 8003186:	657b      	str	r3, [r7, #84]	@ 0x54
 8003188:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800318c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003190:	f7fd f820 	bl	80001d4 <__aeabi_uldivmod>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4b61      	ldr	r3, [pc, #388]	@ (8003320 <UART_SetConfig+0x2d4>)
 800319a:	fba3 2302 	umull	r2, r3, r3, r2
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	011c      	lsls	r4, r3, #4
 80031a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80031b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80031b4:	4642      	mov	r2, r8
 80031b6:	464b      	mov	r3, r9
 80031b8:	1891      	adds	r1, r2, r2
 80031ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80031bc:	415b      	adcs	r3, r3
 80031be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031c4:	4641      	mov	r1, r8
 80031c6:	eb12 0a01 	adds.w	sl, r2, r1
 80031ca:	4649      	mov	r1, r9
 80031cc:	eb43 0b01 	adc.w	fp, r3, r1
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031e4:	4692      	mov	sl, r2
 80031e6:	469b      	mov	fp, r3
 80031e8:	4643      	mov	r3, r8
 80031ea:	eb1a 0303 	adds.w	r3, sl, r3
 80031ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031f2:	464b      	mov	r3, r9
 80031f4:	eb4b 0303 	adc.w	r3, fp, r3
 80031f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003208:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800320c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003210:	460b      	mov	r3, r1
 8003212:	18db      	adds	r3, r3, r3
 8003214:	643b      	str	r3, [r7, #64]	@ 0x40
 8003216:	4613      	mov	r3, r2
 8003218:	eb42 0303 	adc.w	r3, r2, r3
 800321c:	647b      	str	r3, [r7, #68]	@ 0x44
 800321e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003222:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003226:	f7fc ffd5 	bl	80001d4 <__aeabi_uldivmod>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4611      	mov	r1, r2
 8003230:	4b3b      	ldr	r3, [pc, #236]	@ (8003320 <UART_SetConfig+0x2d4>)
 8003232:	fba3 2301 	umull	r2, r3, r3, r1
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	2264      	movs	r2, #100	@ 0x64
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	1acb      	subs	r3, r1, r3
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003246:	4b36      	ldr	r3, [pc, #216]	@ (8003320 <UART_SetConfig+0x2d4>)
 8003248:	fba3 2302 	umull	r2, r3, r3, r2
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003254:	441c      	add	r4, r3
 8003256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800325a:	2200      	movs	r2, #0
 800325c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003260:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003264:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003268:	4642      	mov	r2, r8
 800326a:	464b      	mov	r3, r9
 800326c:	1891      	adds	r1, r2, r2
 800326e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003270:	415b      	adcs	r3, r3
 8003272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003274:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003278:	4641      	mov	r1, r8
 800327a:	1851      	adds	r1, r2, r1
 800327c:	6339      	str	r1, [r7, #48]	@ 0x30
 800327e:	4649      	mov	r1, r9
 8003280:	414b      	adcs	r3, r1
 8003282:	637b      	str	r3, [r7, #52]	@ 0x34
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003290:	4659      	mov	r1, fp
 8003292:	00cb      	lsls	r3, r1, #3
 8003294:	4651      	mov	r1, sl
 8003296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800329a:	4651      	mov	r1, sl
 800329c:	00ca      	lsls	r2, r1, #3
 800329e:	4610      	mov	r0, r2
 80032a0:	4619      	mov	r1, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	4642      	mov	r2, r8
 80032a6:	189b      	adds	r3, r3, r2
 80032a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032ac:	464b      	mov	r3, r9
 80032ae:	460a      	mov	r2, r1
 80032b0:	eb42 0303 	adc.w	r3, r2, r3
 80032b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80032c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80032cc:	460b      	mov	r3, r1
 80032ce:	18db      	adds	r3, r3, r3
 80032d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032d2:	4613      	mov	r3, r2
 80032d4:	eb42 0303 	adc.w	r3, r2, r3
 80032d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80032e2:	f7fc ff77 	bl	80001d4 <__aeabi_uldivmod>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003320 <UART_SetConfig+0x2d4>)
 80032ec:	fba3 1302 	umull	r1, r3, r3, r2
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	2164      	movs	r1, #100	@ 0x64
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	3332      	adds	r3, #50	@ 0x32
 80032fe:	4a08      	ldr	r2, [pc, #32]	@ (8003320 <UART_SetConfig+0x2d4>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	f003 0207 	and.w	r2, r3, #7
 800330a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4422      	add	r2, r4
 8003312:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003314:	e106      	b.n	8003524 <UART_SetConfig+0x4d8>
 8003316:	bf00      	nop
 8003318:	40011000 	.word	0x40011000
 800331c:	40011400 	.word	0x40011400
 8003320:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003328:	2200      	movs	r2, #0
 800332a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800332e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003332:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003336:	4642      	mov	r2, r8
 8003338:	464b      	mov	r3, r9
 800333a:	1891      	adds	r1, r2, r2
 800333c:	6239      	str	r1, [r7, #32]
 800333e:	415b      	adcs	r3, r3
 8003340:	627b      	str	r3, [r7, #36]	@ 0x24
 8003342:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003346:	4641      	mov	r1, r8
 8003348:	1854      	adds	r4, r2, r1
 800334a:	4649      	mov	r1, r9
 800334c:	eb43 0501 	adc.w	r5, r3, r1
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	00eb      	lsls	r3, r5, #3
 800335a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800335e:	00e2      	lsls	r2, r4, #3
 8003360:	4614      	mov	r4, r2
 8003362:	461d      	mov	r5, r3
 8003364:	4643      	mov	r3, r8
 8003366:	18e3      	adds	r3, r4, r3
 8003368:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800336c:	464b      	mov	r3, r9
 800336e:	eb45 0303 	adc.w	r3, r5, r3
 8003372:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003382:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003392:	4629      	mov	r1, r5
 8003394:	008b      	lsls	r3, r1, #2
 8003396:	4621      	mov	r1, r4
 8003398:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800339c:	4621      	mov	r1, r4
 800339e:	008a      	lsls	r2, r1, #2
 80033a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80033a4:	f7fc ff16 	bl	80001d4 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4b60      	ldr	r3, [pc, #384]	@ (8003530 <UART_SetConfig+0x4e4>)
 80033ae:	fba3 2302 	umull	r2, r3, r3, r2
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	011c      	lsls	r4, r3, #4
 80033b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033ba:	2200      	movs	r2, #0
 80033bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80033c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80033c8:	4642      	mov	r2, r8
 80033ca:	464b      	mov	r3, r9
 80033cc:	1891      	adds	r1, r2, r2
 80033ce:	61b9      	str	r1, [r7, #24]
 80033d0:	415b      	adcs	r3, r3
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033d8:	4641      	mov	r1, r8
 80033da:	1851      	adds	r1, r2, r1
 80033dc:	6139      	str	r1, [r7, #16]
 80033de:	4649      	mov	r1, r9
 80033e0:	414b      	adcs	r3, r1
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033f0:	4659      	mov	r1, fp
 80033f2:	00cb      	lsls	r3, r1, #3
 80033f4:	4651      	mov	r1, sl
 80033f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033fa:	4651      	mov	r1, sl
 80033fc:	00ca      	lsls	r2, r1, #3
 80033fe:	4610      	mov	r0, r2
 8003400:	4619      	mov	r1, r3
 8003402:	4603      	mov	r3, r0
 8003404:	4642      	mov	r2, r8
 8003406:	189b      	adds	r3, r3, r2
 8003408:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800340c:	464b      	mov	r3, r9
 800340e:	460a      	mov	r2, r1
 8003410:	eb42 0303 	adc.w	r3, r2, r3
 8003414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003422:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003430:	4649      	mov	r1, r9
 8003432:	008b      	lsls	r3, r1, #2
 8003434:	4641      	mov	r1, r8
 8003436:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800343a:	4641      	mov	r1, r8
 800343c:	008a      	lsls	r2, r1, #2
 800343e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003442:	f7fc fec7 	bl	80001d4 <__aeabi_uldivmod>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4611      	mov	r1, r2
 800344c:	4b38      	ldr	r3, [pc, #224]	@ (8003530 <UART_SetConfig+0x4e4>)
 800344e:	fba3 2301 	umull	r2, r3, r3, r1
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	2264      	movs	r2, #100	@ 0x64
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	1acb      	subs	r3, r1, r3
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	3332      	adds	r3, #50	@ 0x32
 8003460:	4a33      	ldr	r2, [pc, #204]	@ (8003530 <UART_SetConfig+0x4e4>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800346c:	441c      	add	r4, r3
 800346e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003472:	2200      	movs	r2, #0
 8003474:	673b      	str	r3, [r7, #112]	@ 0x70
 8003476:	677a      	str	r2, [r7, #116]	@ 0x74
 8003478:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800347c:	4642      	mov	r2, r8
 800347e:	464b      	mov	r3, r9
 8003480:	1891      	adds	r1, r2, r2
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	415b      	adcs	r3, r3
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800348c:	4641      	mov	r1, r8
 800348e:	1851      	adds	r1, r2, r1
 8003490:	6039      	str	r1, [r7, #0]
 8003492:	4649      	mov	r1, r9
 8003494:	414b      	adcs	r3, r1
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034a4:	4659      	mov	r1, fp
 80034a6:	00cb      	lsls	r3, r1, #3
 80034a8:	4651      	mov	r1, sl
 80034aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ae:	4651      	mov	r1, sl
 80034b0:	00ca      	lsls	r2, r1, #3
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	4603      	mov	r3, r0
 80034b8:	4642      	mov	r2, r8
 80034ba:	189b      	adds	r3, r3, r2
 80034bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034be:	464b      	mov	r3, r9
 80034c0:	460a      	mov	r2, r1
 80034c2:	eb42 0303 	adc.w	r3, r2, r3
 80034c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80034d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80034e0:	4649      	mov	r1, r9
 80034e2:	008b      	lsls	r3, r1, #2
 80034e4:	4641      	mov	r1, r8
 80034e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ea:	4641      	mov	r1, r8
 80034ec:	008a      	lsls	r2, r1, #2
 80034ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80034f2:	f7fc fe6f 	bl	80001d4 <__aeabi_uldivmod>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003530 <UART_SetConfig+0x4e4>)
 80034fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003500:	095b      	lsrs	r3, r3, #5
 8003502:	2164      	movs	r1, #100	@ 0x64
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	3332      	adds	r3, #50	@ 0x32
 800350e:	4a08      	ldr	r2, [pc, #32]	@ (8003530 <UART_SetConfig+0x4e4>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	f003 020f 	and.w	r2, r3, #15
 800351a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4422      	add	r2, r4
 8003522:	609a      	str	r2, [r3, #8]
}
 8003524:	bf00      	nop
 8003526:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800352a:	46bd      	mov	sp, r7
 800352c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003530:	51eb851f 	.word	0x51eb851f

08003534 <std>:
 8003534:	2300      	movs	r3, #0
 8003536:	b510      	push	{r4, lr}
 8003538:	4604      	mov	r4, r0
 800353a:	e9c0 3300 	strd	r3, r3, [r0]
 800353e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003542:	6083      	str	r3, [r0, #8]
 8003544:	8181      	strh	r1, [r0, #12]
 8003546:	6643      	str	r3, [r0, #100]	@ 0x64
 8003548:	81c2      	strh	r2, [r0, #14]
 800354a:	6183      	str	r3, [r0, #24]
 800354c:	4619      	mov	r1, r3
 800354e:	2208      	movs	r2, #8
 8003550:	305c      	adds	r0, #92	@ 0x5c
 8003552:	f000 f9e7 	bl	8003924 <memset>
 8003556:	4b0d      	ldr	r3, [pc, #52]	@ (800358c <std+0x58>)
 8003558:	6263      	str	r3, [r4, #36]	@ 0x24
 800355a:	4b0d      	ldr	r3, [pc, #52]	@ (8003590 <std+0x5c>)
 800355c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800355e:	4b0d      	ldr	r3, [pc, #52]	@ (8003594 <std+0x60>)
 8003560:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003562:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <std+0x64>)
 8003564:	6323      	str	r3, [r4, #48]	@ 0x30
 8003566:	4b0d      	ldr	r3, [pc, #52]	@ (800359c <std+0x68>)
 8003568:	6224      	str	r4, [r4, #32]
 800356a:	429c      	cmp	r4, r3
 800356c:	d006      	beq.n	800357c <std+0x48>
 800356e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003572:	4294      	cmp	r4, r2
 8003574:	d002      	beq.n	800357c <std+0x48>
 8003576:	33d0      	adds	r3, #208	@ 0xd0
 8003578:	429c      	cmp	r4, r3
 800357a:	d105      	bne.n	8003588 <std+0x54>
 800357c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003584:	f000 ba46 	b.w	8003a14 <__retarget_lock_init_recursive>
 8003588:	bd10      	pop	{r4, pc}
 800358a:	bf00      	nop
 800358c:	08003775 	.word	0x08003775
 8003590:	08003797 	.word	0x08003797
 8003594:	080037cf 	.word	0x080037cf
 8003598:	080037f3 	.word	0x080037f3
 800359c:	20000530 	.word	0x20000530

080035a0 <stdio_exit_handler>:
 80035a0:	4a02      	ldr	r2, [pc, #8]	@ (80035ac <stdio_exit_handler+0xc>)
 80035a2:	4903      	ldr	r1, [pc, #12]	@ (80035b0 <stdio_exit_handler+0x10>)
 80035a4:	4803      	ldr	r0, [pc, #12]	@ (80035b4 <stdio_exit_handler+0x14>)
 80035a6:	f000 b869 	b.w	800367c <_fwalk_sglue>
 80035aa:	bf00      	nop
 80035ac:	2000000c 	.word	0x2000000c
 80035b0:	08003d15 	.word	0x08003d15
 80035b4:	2000001c 	.word	0x2000001c

080035b8 <cleanup_stdio>:
 80035b8:	6841      	ldr	r1, [r0, #4]
 80035ba:	4b0c      	ldr	r3, [pc, #48]	@ (80035ec <cleanup_stdio+0x34>)
 80035bc:	4299      	cmp	r1, r3
 80035be:	b510      	push	{r4, lr}
 80035c0:	4604      	mov	r4, r0
 80035c2:	d001      	beq.n	80035c8 <cleanup_stdio+0x10>
 80035c4:	f000 fba6 	bl	8003d14 <_fflush_r>
 80035c8:	68a1      	ldr	r1, [r4, #8]
 80035ca:	4b09      	ldr	r3, [pc, #36]	@ (80035f0 <cleanup_stdio+0x38>)
 80035cc:	4299      	cmp	r1, r3
 80035ce:	d002      	beq.n	80035d6 <cleanup_stdio+0x1e>
 80035d0:	4620      	mov	r0, r4
 80035d2:	f000 fb9f 	bl	8003d14 <_fflush_r>
 80035d6:	68e1      	ldr	r1, [r4, #12]
 80035d8:	4b06      	ldr	r3, [pc, #24]	@ (80035f4 <cleanup_stdio+0x3c>)
 80035da:	4299      	cmp	r1, r3
 80035dc:	d004      	beq.n	80035e8 <cleanup_stdio+0x30>
 80035de:	4620      	mov	r0, r4
 80035e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035e4:	f000 bb96 	b.w	8003d14 <_fflush_r>
 80035e8:	bd10      	pop	{r4, pc}
 80035ea:	bf00      	nop
 80035ec:	20000530 	.word	0x20000530
 80035f0:	20000598 	.word	0x20000598
 80035f4:	20000600 	.word	0x20000600

080035f8 <global_stdio_init.part.0>:
 80035f8:	b510      	push	{r4, lr}
 80035fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003628 <global_stdio_init.part.0+0x30>)
 80035fc:	4c0b      	ldr	r4, [pc, #44]	@ (800362c <global_stdio_init.part.0+0x34>)
 80035fe:	4a0c      	ldr	r2, [pc, #48]	@ (8003630 <global_stdio_init.part.0+0x38>)
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	4620      	mov	r0, r4
 8003604:	2200      	movs	r2, #0
 8003606:	2104      	movs	r1, #4
 8003608:	f7ff ff94 	bl	8003534 <std>
 800360c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003610:	2201      	movs	r2, #1
 8003612:	2109      	movs	r1, #9
 8003614:	f7ff ff8e 	bl	8003534 <std>
 8003618:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800361c:	2202      	movs	r2, #2
 800361e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003622:	2112      	movs	r1, #18
 8003624:	f7ff bf86 	b.w	8003534 <std>
 8003628:	20000668 	.word	0x20000668
 800362c:	20000530 	.word	0x20000530
 8003630:	080035a1 	.word	0x080035a1

08003634 <__sfp_lock_acquire>:
 8003634:	4801      	ldr	r0, [pc, #4]	@ (800363c <__sfp_lock_acquire+0x8>)
 8003636:	f000 b9ee 	b.w	8003a16 <__retarget_lock_acquire_recursive>
 800363a:	bf00      	nop
 800363c:	20000671 	.word	0x20000671

08003640 <__sfp_lock_release>:
 8003640:	4801      	ldr	r0, [pc, #4]	@ (8003648 <__sfp_lock_release+0x8>)
 8003642:	f000 b9e9 	b.w	8003a18 <__retarget_lock_release_recursive>
 8003646:	bf00      	nop
 8003648:	20000671 	.word	0x20000671

0800364c <__sinit>:
 800364c:	b510      	push	{r4, lr}
 800364e:	4604      	mov	r4, r0
 8003650:	f7ff fff0 	bl	8003634 <__sfp_lock_acquire>
 8003654:	6a23      	ldr	r3, [r4, #32]
 8003656:	b11b      	cbz	r3, 8003660 <__sinit+0x14>
 8003658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800365c:	f7ff bff0 	b.w	8003640 <__sfp_lock_release>
 8003660:	4b04      	ldr	r3, [pc, #16]	@ (8003674 <__sinit+0x28>)
 8003662:	6223      	str	r3, [r4, #32]
 8003664:	4b04      	ldr	r3, [pc, #16]	@ (8003678 <__sinit+0x2c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f5      	bne.n	8003658 <__sinit+0xc>
 800366c:	f7ff ffc4 	bl	80035f8 <global_stdio_init.part.0>
 8003670:	e7f2      	b.n	8003658 <__sinit+0xc>
 8003672:	bf00      	nop
 8003674:	080035b9 	.word	0x080035b9
 8003678:	20000668 	.word	0x20000668

0800367c <_fwalk_sglue>:
 800367c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003680:	4607      	mov	r7, r0
 8003682:	4688      	mov	r8, r1
 8003684:	4614      	mov	r4, r2
 8003686:	2600      	movs	r6, #0
 8003688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800368c:	f1b9 0901 	subs.w	r9, r9, #1
 8003690:	d505      	bpl.n	800369e <_fwalk_sglue+0x22>
 8003692:	6824      	ldr	r4, [r4, #0]
 8003694:	2c00      	cmp	r4, #0
 8003696:	d1f7      	bne.n	8003688 <_fwalk_sglue+0xc>
 8003698:	4630      	mov	r0, r6
 800369a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800369e:	89ab      	ldrh	r3, [r5, #12]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d907      	bls.n	80036b4 <_fwalk_sglue+0x38>
 80036a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036a8:	3301      	adds	r3, #1
 80036aa:	d003      	beq.n	80036b4 <_fwalk_sglue+0x38>
 80036ac:	4629      	mov	r1, r5
 80036ae:	4638      	mov	r0, r7
 80036b0:	47c0      	blx	r8
 80036b2:	4306      	orrs	r6, r0
 80036b4:	3568      	adds	r5, #104	@ 0x68
 80036b6:	e7e9      	b.n	800368c <_fwalk_sglue+0x10>

080036b8 <_puts_r>:
 80036b8:	6a03      	ldr	r3, [r0, #32]
 80036ba:	b570      	push	{r4, r5, r6, lr}
 80036bc:	6884      	ldr	r4, [r0, #8]
 80036be:	4605      	mov	r5, r0
 80036c0:	460e      	mov	r6, r1
 80036c2:	b90b      	cbnz	r3, 80036c8 <_puts_r+0x10>
 80036c4:	f7ff ffc2 	bl	800364c <__sinit>
 80036c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036ca:	07db      	lsls	r3, r3, #31
 80036cc:	d405      	bmi.n	80036da <_puts_r+0x22>
 80036ce:	89a3      	ldrh	r3, [r4, #12]
 80036d0:	0598      	lsls	r0, r3, #22
 80036d2:	d402      	bmi.n	80036da <_puts_r+0x22>
 80036d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036d6:	f000 f99e 	bl	8003a16 <__retarget_lock_acquire_recursive>
 80036da:	89a3      	ldrh	r3, [r4, #12]
 80036dc:	0719      	lsls	r1, r3, #28
 80036de:	d502      	bpl.n	80036e6 <_puts_r+0x2e>
 80036e0:	6923      	ldr	r3, [r4, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d135      	bne.n	8003752 <_puts_r+0x9a>
 80036e6:	4621      	mov	r1, r4
 80036e8:	4628      	mov	r0, r5
 80036ea:	f000 f8c5 	bl	8003878 <__swsetup_r>
 80036ee:	b380      	cbz	r0, 8003752 <_puts_r+0x9a>
 80036f0:	f04f 35ff 	mov.w	r5, #4294967295
 80036f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036f6:	07da      	lsls	r2, r3, #31
 80036f8:	d405      	bmi.n	8003706 <_puts_r+0x4e>
 80036fa:	89a3      	ldrh	r3, [r4, #12]
 80036fc:	059b      	lsls	r3, r3, #22
 80036fe:	d402      	bmi.n	8003706 <_puts_r+0x4e>
 8003700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003702:	f000 f989 	bl	8003a18 <__retarget_lock_release_recursive>
 8003706:	4628      	mov	r0, r5
 8003708:	bd70      	pop	{r4, r5, r6, pc}
 800370a:	2b00      	cmp	r3, #0
 800370c:	da04      	bge.n	8003718 <_puts_r+0x60>
 800370e:	69a2      	ldr	r2, [r4, #24]
 8003710:	429a      	cmp	r2, r3
 8003712:	dc17      	bgt.n	8003744 <_puts_r+0x8c>
 8003714:	290a      	cmp	r1, #10
 8003716:	d015      	beq.n	8003744 <_puts_r+0x8c>
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	6022      	str	r2, [r4, #0]
 800371e:	7019      	strb	r1, [r3, #0]
 8003720:	68a3      	ldr	r3, [r4, #8]
 8003722:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003726:	3b01      	subs	r3, #1
 8003728:	60a3      	str	r3, [r4, #8]
 800372a:	2900      	cmp	r1, #0
 800372c:	d1ed      	bne.n	800370a <_puts_r+0x52>
 800372e:	2b00      	cmp	r3, #0
 8003730:	da11      	bge.n	8003756 <_puts_r+0x9e>
 8003732:	4622      	mov	r2, r4
 8003734:	210a      	movs	r1, #10
 8003736:	4628      	mov	r0, r5
 8003738:	f000 f85f 	bl	80037fa <__swbuf_r>
 800373c:	3001      	adds	r0, #1
 800373e:	d0d7      	beq.n	80036f0 <_puts_r+0x38>
 8003740:	250a      	movs	r5, #10
 8003742:	e7d7      	b.n	80036f4 <_puts_r+0x3c>
 8003744:	4622      	mov	r2, r4
 8003746:	4628      	mov	r0, r5
 8003748:	f000 f857 	bl	80037fa <__swbuf_r>
 800374c:	3001      	adds	r0, #1
 800374e:	d1e7      	bne.n	8003720 <_puts_r+0x68>
 8003750:	e7ce      	b.n	80036f0 <_puts_r+0x38>
 8003752:	3e01      	subs	r6, #1
 8003754:	e7e4      	b.n	8003720 <_puts_r+0x68>
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	6022      	str	r2, [r4, #0]
 800375c:	220a      	movs	r2, #10
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e7ee      	b.n	8003740 <_puts_r+0x88>
	...

08003764 <puts>:
 8003764:	4b02      	ldr	r3, [pc, #8]	@ (8003770 <puts+0xc>)
 8003766:	4601      	mov	r1, r0
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	f7ff bfa5 	b.w	80036b8 <_puts_r>
 800376e:	bf00      	nop
 8003770:	20000018 	.word	0x20000018

08003774 <__sread>:
 8003774:	b510      	push	{r4, lr}
 8003776:	460c      	mov	r4, r1
 8003778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800377c:	f000 f8fc 	bl	8003978 <_read_r>
 8003780:	2800      	cmp	r0, #0
 8003782:	bfab      	itete	ge
 8003784:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003786:	89a3      	ldrhlt	r3, [r4, #12]
 8003788:	181b      	addge	r3, r3, r0
 800378a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800378e:	bfac      	ite	ge
 8003790:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003792:	81a3      	strhlt	r3, [r4, #12]
 8003794:	bd10      	pop	{r4, pc}

08003796 <__swrite>:
 8003796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800379a:	461f      	mov	r7, r3
 800379c:	898b      	ldrh	r3, [r1, #12]
 800379e:	05db      	lsls	r3, r3, #23
 80037a0:	4605      	mov	r5, r0
 80037a2:	460c      	mov	r4, r1
 80037a4:	4616      	mov	r6, r2
 80037a6:	d505      	bpl.n	80037b4 <__swrite+0x1e>
 80037a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ac:	2302      	movs	r3, #2
 80037ae:	2200      	movs	r2, #0
 80037b0:	f000 f8d0 	bl	8003954 <_lseek_r>
 80037b4:	89a3      	ldrh	r3, [r4, #12]
 80037b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037be:	81a3      	strh	r3, [r4, #12]
 80037c0:	4632      	mov	r2, r6
 80037c2:	463b      	mov	r3, r7
 80037c4:	4628      	mov	r0, r5
 80037c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ca:	f000 b8e7 	b.w	800399c <_write_r>

080037ce <__sseek>:
 80037ce:	b510      	push	{r4, lr}
 80037d0:	460c      	mov	r4, r1
 80037d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d6:	f000 f8bd 	bl	8003954 <_lseek_r>
 80037da:	1c43      	adds	r3, r0, #1
 80037dc:	89a3      	ldrh	r3, [r4, #12]
 80037de:	bf15      	itete	ne
 80037e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80037e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80037e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80037ea:	81a3      	strheq	r3, [r4, #12]
 80037ec:	bf18      	it	ne
 80037ee:	81a3      	strhne	r3, [r4, #12]
 80037f0:	bd10      	pop	{r4, pc}

080037f2 <__sclose>:
 80037f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f6:	f000 b89d 	b.w	8003934 <_close_r>

080037fa <__swbuf_r>:
 80037fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fc:	460e      	mov	r6, r1
 80037fe:	4614      	mov	r4, r2
 8003800:	4605      	mov	r5, r0
 8003802:	b118      	cbz	r0, 800380c <__swbuf_r+0x12>
 8003804:	6a03      	ldr	r3, [r0, #32]
 8003806:	b90b      	cbnz	r3, 800380c <__swbuf_r+0x12>
 8003808:	f7ff ff20 	bl	800364c <__sinit>
 800380c:	69a3      	ldr	r3, [r4, #24]
 800380e:	60a3      	str	r3, [r4, #8]
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	071a      	lsls	r2, r3, #28
 8003814:	d501      	bpl.n	800381a <__swbuf_r+0x20>
 8003816:	6923      	ldr	r3, [r4, #16]
 8003818:	b943      	cbnz	r3, 800382c <__swbuf_r+0x32>
 800381a:	4621      	mov	r1, r4
 800381c:	4628      	mov	r0, r5
 800381e:	f000 f82b 	bl	8003878 <__swsetup_r>
 8003822:	b118      	cbz	r0, 800382c <__swbuf_r+0x32>
 8003824:	f04f 37ff 	mov.w	r7, #4294967295
 8003828:	4638      	mov	r0, r7
 800382a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	6922      	ldr	r2, [r4, #16]
 8003830:	1a98      	subs	r0, r3, r2
 8003832:	6963      	ldr	r3, [r4, #20]
 8003834:	b2f6      	uxtb	r6, r6
 8003836:	4283      	cmp	r3, r0
 8003838:	4637      	mov	r7, r6
 800383a:	dc05      	bgt.n	8003848 <__swbuf_r+0x4e>
 800383c:	4621      	mov	r1, r4
 800383e:	4628      	mov	r0, r5
 8003840:	f000 fa68 	bl	8003d14 <_fflush_r>
 8003844:	2800      	cmp	r0, #0
 8003846:	d1ed      	bne.n	8003824 <__swbuf_r+0x2a>
 8003848:	68a3      	ldr	r3, [r4, #8]
 800384a:	3b01      	subs	r3, #1
 800384c:	60a3      	str	r3, [r4, #8]
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	6022      	str	r2, [r4, #0]
 8003854:	701e      	strb	r6, [r3, #0]
 8003856:	6962      	ldr	r2, [r4, #20]
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	429a      	cmp	r2, r3
 800385c:	d004      	beq.n	8003868 <__swbuf_r+0x6e>
 800385e:	89a3      	ldrh	r3, [r4, #12]
 8003860:	07db      	lsls	r3, r3, #31
 8003862:	d5e1      	bpl.n	8003828 <__swbuf_r+0x2e>
 8003864:	2e0a      	cmp	r6, #10
 8003866:	d1df      	bne.n	8003828 <__swbuf_r+0x2e>
 8003868:	4621      	mov	r1, r4
 800386a:	4628      	mov	r0, r5
 800386c:	f000 fa52 	bl	8003d14 <_fflush_r>
 8003870:	2800      	cmp	r0, #0
 8003872:	d0d9      	beq.n	8003828 <__swbuf_r+0x2e>
 8003874:	e7d6      	b.n	8003824 <__swbuf_r+0x2a>
	...

08003878 <__swsetup_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4b29      	ldr	r3, [pc, #164]	@ (8003920 <__swsetup_r+0xa8>)
 800387c:	4605      	mov	r5, r0
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	460c      	mov	r4, r1
 8003882:	b118      	cbz	r0, 800388c <__swsetup_r+0x14>
 8003884:	6a03      	ldr	r3, [r0, #32]
 8003886:	b90b      	cbnz	r3, 800388c <__swsetup_r+0x14>
 8003888:	f7ff fee0 	bl	800364c <__sinit>
 800388c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003890:	0719      	lsls	r1, r3, #28
 8003892:	d422      	bmi.n	80038da <__swsetup_r+0x62>
 8003894:	06da      	lsls	r2, r3, #27
 8003896:	d407      	bmi.n	80038a8 <__swsetup_r+0x30>
 8003898:	2209      	movs	r2, #9
 800389a:	602a      	str	r2, [r5, #0]
 800389c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038a0:	81a3      	strh	r3, [r4, #12]
 80038a2:	f04f 30ff 	mov.w	r0, #4294967295
 80038a6:	e033      	b.n	8003910 <__swsetup_r+0x98>
 80038a8:	0758      	lsls	r0, r3, #29
 80038aa:	d512      	bpl.n	80038d2 <__swsetup_r+0x5a>
 80038ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038ae:	b141      	cbz	r1, 80038c2 <__swsetup_r+0x4a>
 80038b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038b4:	4299      	cmp	r1, r3
 80038b6:	d002      	beq.n	80038be <__swsetup_r+0x46>
 80038b8:	4628      	mov	r0, r5
 80038ba:	f000 f8af 	bl	8003a1c <_free_r>
 80038be:	2300      	movs	r3, #0
 80038c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80038c2:	89a3      	ldrh	r3, [r4, #12]
 80038c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80038c8:	81a3      	strh	r3, [r4, #12]
 80038ca:	2300      	movs	r3, #0
 80038cc:	6063      	str	r3, [r4, #4]
 80038ce:	6923      	ldr	r3, [r4, #16]
 80038d0:	6023      	str	r3, [r4, #0]
 80038d2:	89a3      	ldrh	r3, [r4, #12]
 80038d4:	f043 0308 	orr.w	r3, r3, #8
 80038d8:	81a3      	strh	r3, [r4, #12]
 80038da:	6923      	ldr	r3, [r4, #16]
 80038dc:	b94b      	cbnz	r3, 80038f2 <__swsetup_r+0x7a>
 80038de:	89a3      	ldrh	r3, [r4, #12]
 80038e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80038e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038e8:	d003      	beq.n	80038f2 <__swsetup_r+0x7a>
 80038ea:	4621      	mov	r1, r4
 80038ec:	4628      	mov	r0, r5
 80038ee:	f000 fa5f 	bl	8003db0 <__smakebuf_r>
 80038f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038f6:	f013 0201 	ands.w	r2, r3, #1
 80038fa:	d00a      	beq.n	8003912 <__swsetup_r+0x9a>
 80038fc:	2200      	movs	r2, #0
 80038fe:	60a2      	str	r2, [r4, #8]
 8003900:	6962      	ldr	r2, [r4, #20]
 8003902:	4252      	negs	r2, r2
 8003904:	61a2      	str	r2, [r4, #24]
 8003906:	6922      	ldr	r2, [r4, #16]
 8003908:	b942      	cbnz	r2, 800391c <__swsetup_r+0xa4>
 800390a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800390e:	d1c5      	bne.n	800389c <__swsetup_r+0x24>
 8003910:	bd38      	pop	{r3, r4, r5, pc}
 8003912:	0799      	lsls	r1, r3, #30
 8003914:	bf58      	it	pl
 8003916:	6962      	ldrpl	r2, [r4, #20]
 8003918:	60a2      	str	r2, [r4, #8]
 800391a:	e7f4      	b.n	8003906 <__swsetup_r+0x8e>
 800391c:	2000      	movs	r0, #0
 800391e:	e7f7      	b.n	8003910 <__swsetup_r+0x98>
 8003920:	20000018 	.word	0x20000018

08003924 <memset>:
 8003924:	4402      	add	r2, r0
 8003926:	4603      	mov	r3, r0
 8003928:	4293      	cmp	r3, r2
 800392a:	d100      	bne.n	800392e <memset+0xa>
 800392c:	4770      	bx	lr
 800392e:	f803 1b01 	strb.w	r1, [r3], #1
 8003932:	e7f9      	b.n	8003928 <memset+0x4>

08003934 <_close_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	4d06      	ldr	r5, [pc, #24]	@ (8003950 <_close_r+0x1c>)
 8003938:	2300      	movs	r3, #0
 800393a:	4604      	mov	r4, r0
 800393c:	4608      	mov	r0, r1
 800393e:	602b      	str	r3, [r5, #0]
 8003940:	f7fd fb38 	bl	8000fb4 <_close>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d102      	bne.n	800394e <_close_r+0x1a>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	b103      	cbz	r3, 800394e <_close_r+0x1a>
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	2000066c 	.word	0x2000066c

08003954 <_lseek_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	4d07      	ldr	r5, [pc, #28]	@ (8003974 <_lseek_r+0x20>)
 8003958:	4604      	mov	r4, r0
 800395a:	4608      	mov	r0, r1
 800395c:	4611      	mov	r1, r2
 800395e:	2200      	movs	r2, #0
 8003960:	602a      	str	r2, [r5, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	f7fd fb4d 	bl	8001002 <_lseek>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d102      	bne.n	8003972 <_lseek_r+0x1e>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	b103      	cbz	r3, 8003972 <_lseek_r+0x1e>
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	2000066c 	.word	0x2000066c

08003978 <_read_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4d07      	ldr	r5, [pc, #28]	@ (8003998 <_read_r+0x20>)
 800397c:	4604      	mov	r4, r0
 800397e:	4608      	mov	r0, r1
 8003980:	4611      	mov	r1, r2
 8003982:	2200      	movs	r2, #0
 8003984:	602a      	str	r2, [r5, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	f7fd fadb 	bl	8000f42 <_read>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d102      	bne.n	8003996 <_read_r+0x1e>
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	b103      	cbz	r3, 8003996 <_read_r+0x1e>
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	bd38      	pop	{r3, r4, r5, pc}
 8003998:	2000066c 	.word	0x2000066c

0800399c <_write_r>:
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	4d07      	ldr	r5, [pc, #28]	@ (80039bc <_write_r+0x20>)
 80039a0:	4604      	mov	r4, r0
 80039a2:	4608      	mov	r0, r1
 80039a4:	4611      	mov	r1, r2
 80039a6:	2200      	movs	r2, #0
 80039a8:	602a      	str	r2, [r5, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	f7fd fae6 	bl	8000f7c <_write>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d102      	bne.n	80039ba <_write_r+0x1e>
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	b103      	cbz	r3, 80039ba <_write_r+0x1e>
 80039b8:	6023      	str	r3, [r4, #0]
 80039ba:	bd38      	pop	{r3, r4, r5, pc}
 80039bc:	2000066c 	.word	0x2000066c

080039c0 <__errno>:
 80039c0:	4b01      	ldr	r3, [pc, #4]	@ (80039c8 <__errno+0x8>)
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000018 	.word	0x20000018

080039cc <__libc_init_array>:
 80039cc:	b570      	push	{r4, r5, r6, lr}
 80039ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003a04 <__libc_init_array+0x38>)
 80039d0:	4c0d      	ldr	r4, [pc, #52]	@ (8003a08 <__libc_init_array+0x3c>)
 80039d2:	1b64      	subs	r4, r4, r5
 80039d4:	10a4      	asrs	r4, r4, #2
 80039d6:	2600      	movs	r6, #0
 80039d8:	42a6      	cmp	r6, r4
 80039da:	d109      	bne.n	80039f0 <__libc_init_array+0x24>
 80039dc:	4d0b      	ldr	r5, [pc, #44]	@ (8003a0c <__libc_init_array+0x40>)
 80039de:	4c0c      	ldr	r4, [pc, #48]	@ (8003a10 <__libc_init_array+0x44>)
 80039e0:	f000 fa54 	bl	8003e8c <_init>
 80039e4:	1b64      	subs	r4, r4, r5
 80039e6:	10a4      	asrs	r4, r4, #2
 80039e8:	2600      	movs	r6, #0
 80039ea:	42a6      	cmp	r6, r4
 80039ec:	d105      	bne.n	80039fa <__libc_init_array+0x2e>
 80039ee:	bd70      	pop	{r4, r5, r6, pc}
 80039f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f4:	4798      	blx	r3
 80039f6:	3601      	adds	r6, #1
 80039f8:	e7ee      	b.n	80039d8 <__libc_init_array+0xc>
 80039fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fe:	4798      	blx	r3
 8003a00:	3601      	adds	r6, #1
 8003a02:	e7f2      	b.n	80039ea <__libc_init_array+0x1e>
 8003a04:	080054d8 	.word	0x080054d8
 8003a08:	080054d8 	.word	0x080054d8
 8003a0c:	080054d8 	.word	0x080054d8
 8003a10:	080054dc 	.word	0x080054dc

08003a14 <__retarget_lock_init_recursive>:
 8003a14:	4770      	bx	lr

08003a16 <__retarget_lock_acquire_recursive>:
 8003a16:	4770      	bx	lr

08003a18 <__retarget_lock_release_recursive>:
 8003a18:	4770      	bx	lr
	...

08003a1c <_free_r>:
 8003a1c:	b538      	push	{r3, r4, r5, lr}
 8003a1e:	4605      	mov	r5, r0
 8003a20:	2900      	cmp	r1, #0
 8003a22:	d041      	beq.n	8003aa8 <_free_r+0x8c>
 8003a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a28:	1f0c      	subs	r4, r1, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bfb8      	it	lt
 8003a2e:	18e4      	addlt	r4, r4, r3
 8003a30:	f000 f8e0 	bl	8003bf4 <__malloc_lock>
 8003a34:	4a1d      	ldr	r2, [pc, #116]	@ (8003aac <_free_r+0x90>)
 8003a36:	6813      	ldr	r3, [r2, #0]
 8003a38:	b933      	cbnz	r3, 8003a48 <_free_r+0x2c>
 8003a3a:	6063      	str	r3, [r4, #4]
 8003a3c:	6014      	str	r4, [r2, #0]
 8003a3e:	4628      	mov	r0, r5
 8003a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a44:	f000 b8dc 	b.w	8003c00 <__malloc_unlock>
 8003a48:	42a3      	cmp	r3, r4
 8003a4a:	d908      	bls.n	8003a5e <_free_r+0x42>
 8003a4c:	6820      	ldr	r0, [r4, #0]
 8003a4e:	1821      	adds	r1, r4, r0
 8003a50:	428b      	cmp	r3, r1
 8003a52:	bf01      	itttt	eq
 8003a54:	6819      	ldreq	r1, [r3, #0]
 8003a56:	685b      	ldreq	r3, [r3, #4]
 8003a58:	1809      	addeq	r1, r1, r0
 8003a5a:	6021      	streq	r1, [r4, #0]
 8003a5c:	e7ed      	b.n	8003a3a <_free_r+0x1e>
 8003a5e:	461a      	mov	r2, r3
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	b10b      	cbz	r3, 8003a68 <_free_r+0x4c>
 8003a64:	42a3      	cmp	r3, r4
 8003a66:	d9fa      	bls.n	8003a5e <_free_r+0x42>
 8003a68:	6811      	ldr	r1, [r2, #0]
 8003a6a:	1850      	adds	r0, r2, r1
 8003a6c:	42a0      	cmp	r0, r4
 8003a6e:	d10b      	bne.n	8003a88 <_free_r+0x6c>
 8003a70:	6820      	ldr	r0, [r4, #0]
 8003a72:	4401      	add	r1, r0
 8003a74:	1850      	adds	r0, r2, r1
 8003a76:	4283      	cmp	r3, r0
 8003a78:	6011      	str	r1, [r2, #0]
 8003a7a:	d1e0      	bne.n	8003a3e <_free_r+0x22>
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	6053      	str	r3, [r2, #4]
 8003a82:	4408      	add	r0, r1
 8003a84:	6010      	str	r0, [r2, #0]
 8003a86:	e7da      	b.n	8003a3e <_free_r+0x22>
 8003a88:	d902      	bls.n	8003a90 <_free_r+0x74>
 8003a8a:	230c      	movs	r3, #12
 8003a8c:	602b      	str	r3, [r5, #0]
 8003a8e:	e7d6      	b.n	8003a3e <_free_r+0x22>
 8003a90:	6820      	ldr	r0, [r4, #0]
 8003a92:	1821      	adds	r1, r4, r0
 8003a94:	428b      	cmp	r3, r1
 8003a96:	bf04      	itt	eq
 8003a98:	6819      	ldreq	r1, [r3, #0]
 8003a9a:	685b      	ldreq	r3, [r3, #4]
 8003a9c:	6063      	str	r3, [r4, #4]
 8003a9e:	bf04      	itt	eq
 8003aa0:	1809      	addeq	r1, r1, r0
 8003aa2:	6021      	streq	r1, [r4, #0]
 8003aa4:	6054      	str	r4, [r2, #4]
 8003aa6:	e7ca      	b.n	8003a3e <_free_r+0x22>
 8003aa8:	bd38      	pop	{r3, r4, r5, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000678 	.word	0x20000678

08003ab0 <sbrk_aligned>:
 8003ab0:	b570      	push	{r4, r5, r6, lr}
 8003ab2:	4e0f      	ldr	r6, [pc, #60]	@ (8003af0 <sbrk_aligned+0x40>)
 8003ab4:	460c      	mov	r4, r1
 8003ab6:	6831      	ldr	r1, [r6, #0]
 8003ab8:	4605      	mov	r5, r0
 8003aba:	b911      	cbnz	r1, 8003ac2 <sbrk_aligned+0x12>
 8003abc:	f000 f9d6 	bl	8003e6c <_sbrk_r>
 8003ac0:	6030      	str	r0, [r6, #0]
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	f000 f9d1 	bl	8003e6c <_sbrk_r>
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	d103      	bne.n	8003ad6 <sbrk_aligned+0x26>
 8003ace:	f04f 34ff 	mov.w	r4, #4294967295
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
 8003ad6:	1cc4      	adds	r4, r0, #3
 8003ad8:	f024 0403 	bic.w	r4, r4, #3
 8003adc:	42a0      	cmp	r0, r4
 8003ade:	d0f8      	beq.n	8003ad2 <sbrk_aligned+0x22>
 8003ae0:	1a21      	subs	r1, r4, r0
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	f000 f9c2 	bl	8003e6c <_sbrk_r>
 8003ae8:	3001      	adds	r0, #1
 8003aea:	d1f2      	bne.n	8003ad2 <sbrk_aligned+0x22>
 8003aec:	e7ef      	b.n	8003ace <sbrk_aligned+0x1e>
 8003aee:	bf00      	nop
 8003af0:	20000674 	.word	0x20000674

08003af4 <_malloc_r>:
 8003af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003af8:	1ccd      	adds	r5, r1, #3
 8003afa:	f025 0503 	bic.w	r5, r5, #3
 8003afe:	3508      	adds	r5, #8
 8003b00:	2d0c      	cmp	r5, #12
 8003b02:	bf38      	it	cc
 8003b04:	250c      	movcc	r5, #12
 8003b06:	2d00      	cmp	r5, #0
 8003b08:	4606      	mov	r6, r0
 8003b0a:	db01      	blt.n	8003b10 <_malloc_r+0x1c>
 8003b0c:	42a9      	cmp	r1, r5
 8003b0e:	d904      	bls.n	8003b1a <_malloc_r+0x26>
 8003b10:	230c      	movs	r3, #12
 8003b12:	6033      	str	r3, [r6, #0]
 8003b14:	2000      	movs	r0, #0
 8003b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003bf0 <_malloc_r+0xfc>
 8003b1e:	f000 f869 	bl	8003bf4 <__malloc_lock>
 8003b22:	f8d8 3000 	ldr.w	r3, [r8]
 8003b26:	461c      	mov	r4, r3
 8003b28:	bb44      	cbnz	r4, 8003b7c <_malloc_r+0x88>
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f7ff ffbf 	bl	8003ab0 <sbrk_aligned>
 8003b32:	1c43      	adds	r3, r0, #1
 8003b34:	4604      	mov	r4, r0
 8003b36:	d158      	bne.n	8003bea <_malloc_r+0xf6>
 8003b38:	f8d8 4000 	ldr.w	r4, [r8]
 8003b3c:	4627      	mov	r7, r4
 8003b3e:	2f00      	cmp	r7, #0
 8003b40:	d143      	bne.n	8003bca <_malloc_r+0xd6>
 8003b42:	2c00      	cmp	r4, #0
 8003b44:	d04b      	beq.n	8003bde <_malloc_r+0xea>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	4639      	mov	r1, r7
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	eb04 0903 	add.w	r9, r4, r3
 8003b50:	f000 f98c 	bl	8003e6c <_sbrk_r>
 8003b54:	4581      	cmp	r9, r0
 8003b56:	d142      	bne.n	8003bde <_malloc_r+0xea>
 8003b58:	6821      	ldr	r1, [r4, #0]
 8003b5a:	1a6d      	subs	r5, r5, r1
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	4630      	mov	r0, r6
 8003b60:	f7ff ffa6 	bl	8003ab0 <sbrk_aligned>
 8003b64:	3001      	adds	r0, #1
 8003b66:	d03a      	beq.n	8003bde <_malloc_r+0xea>
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	442b      	add	r3, r5
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	bb62      	cbnz	r2, 8003bd0 <_malloc_r+0xdc>
 8003b76:	f8c8 7000 	str.w	r7, [r8]
 8003b7a:	e00f      	b.n	8003b9c <_malloc_r+0xa8>
 8003b7c:	6822      	ldr	r2, [r4, #0]
 8003b7e:	1b52      	subs	r2, r2, r5
 8003b80:	d420      	bmi.n	8003bc4 <_malloc_r+0xd0>
 8003b82:	2a0b      	cmp	r2, #11
 8003b84:	d917      	bls.n	8003bb6 <_malloc_r+0xc2>
 8003b86:	1961      	adds	r1, r4, r5
 8003b88:	42a3      	cmp	r3, r4
 8003b8a:	6025      	str	r5, [r4, #0]
 8003b8c:	bf18      	it	ne
 8003b8e:	6059      	strne	r1, [r3, #4]
 8003b90:	6863      	ldr	r3, [r4, #4]
 8003b92:	bf08      	it	eq
 8003b94:	f8c8 1000 	streq.w	r1, [r8]
 8003b98:	5162      	str	r2, [r4, r5]
 8003b9a:	604b      	str	r3, [r1, #4]
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	f000 f82f 	bl	8003c00 <__malloc_unlock>
 8003ba2:	f104 000b 	add.w	r0, r4, #11
 8003ba6:	1d23      	adds	r3, r4, #4
 8003ba8:	f020 0007 	bic.w	r0, r0, #7
 8003bac:	1ac2      	subs	r2, r0, r3
 8003bae:	bf1c      	itt	ne
 8003bb0:	1a1b      	subne	r3, r3, r0
 8003bb2:	50a3      	strne	r3, [r4, r2]
 8003bb4:	e7af      	b.n	8003b16 <_malloc_r+0x22>
 8003bb6:	6862      	ldr	r2, [r4, #4]
 8003bb8:	42a3      	cmp	r3, r4
 8003bba:	bf0c      	ite	eq
 8003bbc:	f8c8 2000 	streq.w	r2, [r8]
 8003bc0:	605a      	strne	r2, [r3, #4]
 8003bc2:	e7eb      	b.n	8003b9c <_malloc_r+0xa8>
 8003bc4:	4623      	mov	r3, r4
 8003bc6:	6864      	ldr	r4, [r4, #4]
 8003bc8:	e7ae      	b.n	8003b28 <_malloc_r+0x34>
 8003bca:	463c      	mov	r4, r7
 8003bcc:	687f      	ldr	r7, [r7, #4]
 8003bce:	e7b6      	b.n	8003b3e <_malloc_r+0x4a>
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	42a3      	cmp	r3, r4
 8003bd6:	d1fb      	bne.n	8003bd0 <_malloc_r+0xdc>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	6053      	str	r3, [r2, #4]
 8003bdc:	e7de      	b.n	8003b9c <_malloc_r+0xa8>
 8003bde:	230c      	movs	r3, #12
 8003be0:	6033      	str	r3, [r6, #0]
 8003be2:	4630      	mov	r0, r6
 8003be4:	f000 f80c 	bl	8003c00 <__malloc_unlock>
 8003be8:	e794      	b.n	8003b14 <_malloc_r+0x20>
 8003bea:	6005      	str	r5, [r0, #0]
 8003bec:	e7d6      	b.n	8003b9c <_malloc_r+0xa8>
 8003bee:	bf00      	nop
 8003bf0:	20000678 	.word	0x20000678

08003bf4 <__malloc_lock>:
 8003bf4:	4801      	ldr	r0, [pc, #4]	@ (8003bfc <__malloc_lock+0x8>)
 8003bf6:	f7ff bf0e 	b.w	8003a16 <__retarget_lock_acquire_recursive>
 8003bfa:	bf00      	nop
 8003bfc:	20000670 	.word	0x20000670

08003c00 <__malloc_unlock>:
 8003c00:	4801      	ldr	r0, [pc, #4]	@ (8003c08 <__malloc_unlock+0x8>)
 8003c02:	f7ff bf09 	b.w	8003a18 <__retarget_lock_release_recursive>
 8003c06:	bf00      	nop
 8003c08:	20000670 	.word	0x20000670

08003c0c <__sflush_r>:
 8003c0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c14:	0716      	lsls	r6, r2, #28
 8003c16:	4605      	mov	r5, r0
 8003c18:	460c      	mov	r4, r1
 8003c1a:	d454      	bmi.n	8003cc6 <__sflush_r+0xba>
 8003c1c:	684b      	ldr	r3, [r1, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	dc02      	bgt.n	8003c28 <__sflush_r+0x1c>
 8003c22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	dd48      	ble.n	8003cba <__sflush_r+0xae>
 8003c28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c2a:	2e00      	cmp	r6, #0
 8003c2c:	d045      	beq.n	8003cba <__sflush_r+0xae>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003c34:	682f      	ldr	r7, [r5, #0]
 8003c36:	6a21      	ldr	r1, [r4, #32]
 8003c38:	602b      	str	r3, [r5, #0]
 8003c3a:	d030      	beq.n	8003c9e <__sflush_r+0x92>
 8003c3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c3e:	89a3      	ldrh	r3, [r4, #12]
 8003c40:	0759      	lsls	r1, r3, #29
 8003c42:	d505      	bpl.n	8003c50 <__sflush_r+0x44>
 8003c44:	6863      	ldr	r3, [r4, #4]
 8003c46:	1ad2      	subs	r2, r2, r3
 8003c48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c4a:	b10b      	cbz	r3, 8003c50 <__sflush_r+0x44>
 8003c4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c4e:	1ad2      	subs	r2, r2, r3
 8003c50:	2300      	movs	r3, #0
 8003c52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c54:	6a21      	ldr	r1, [r4, #32]
 8003c56:	4628      	mov	r0, r5
 8003c58:	47b0      	blx	r6
 8003c5a:	1c43      	adds	r3, r0, #1
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	d106      	bne.n	8003c6e <__sflush_r+0x62>
 8003c60:	6829      	ldr	r1, [r5, #0]
 8003c62:	291d      	cmp	r1, #29
 8003c64:	d82b      	bhi.n	8003cbe <__sflush_r+0xb2>
 8003c66:	4a2a      	ldr	r2, [pc, #168]	@ (8003d10 <__sflush_r+0x104>)
 8003c68:	410a      	asrs	r2, r1
 8003c6a:	07d6      	lsls	r6, r2, #31
 8003c6c:	d427      	bmi.n	8003cbe <__sflush_r+0xb2>
 8003c6e:	2200      	movs	r2, #0
 8003c70:	6062      	str	r2, [r4, #4]
 8003c72:	04d9      	lsls	r1, r3, #19
 8003c74:	6922      	ldr	r2, [r4, #16]
 8003c76:	6022      	str	r2, [r4, #0]
 8003c78:	d504      	bpl.n	8003c84 <__sflush_r+0x78>
 8003c7a:	1c42      	adds	r2, r0, #1
 8003c7c:	d101      	bne.n	8003c82 <__sflush_r+0x76>
 8003c7e:	682b      	ldr	r3, [r5, #0]
 8003c80:	b903      	cbnz	r3, 8003c84 <__sflush_r+0x78>
 8003c82:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c86:	602f      	str	r7, [r5, #0]
 8003c88:	b1b9      	cbz	r1, 8003cba <__sflush_r+0xae>
 8003c8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c8e:	4299      	cmp	r1, r3
 8003c90:	d002      	beq.n	8003c98 <__sflush_r+0x8c>
 8003c92:	4628      	mov	r0, r5
 8003c94:	f7ff fec2 	bl	8003a1c <_free_r>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c9c:	e00d      	b.n	8003cba <__sflush_r+0xae>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	47b0      	blx	r6
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	1c50      	adds	r0, r2, #1
 8003ca8:	d1c9      	bne.n	8003c3e <__sflush_r+0x32>
 8003caa:	682b      	ldr	r3, [r5, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0c6      	beq.n	8003c3e <__sflush_r+0x32>
 8003cb0:	2b1d      	cmp	r3, #29
 8003cb2:	d001      	beq.n	8003cb8 <__sflush_r+0xac>
 8003cb4:	2b16      	cmp	r3, #22
 8003cb6:	d11e      	bne.n	8003cf6 <__sflush_r+0xea>
 8003cb8:	602f      	str	r7, [r5, #0]
 8003cba:	2000      	movs	r0, #0
 8003cbc:	e022      	b.n	8003d04 <__sflush_r+0xf8>
 8003cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cc2:	b21b      	sxth	r3, r3
 8003cc4:	e01b      	b.n	8003cfe <__sflush_r+0xf2>
 8003cc6:	690f      	ldr	r7, [r1, #16]
 8003cc8:	2f00      	cmp	r7, #0
 8003cca:	d0f6      	beq.n	8003cba <__sflush_r+0xae>
 8003ccc:	0793      	lsls	r3, r2, #30
 8003cce:	680e      	ldr	r6, [r1, #0]
 8003cd0:	bf08      	it	eq
 8003cd2:	694b      	ldreq	r3, [r1, #20]
 8003cd4:	600f      	str	r7, [r1, #0]
 8003cd6:	bf18      	it	ne
 8003cd8:	2300      	movne	r3, #0
 8003cda:	eba6 0807 	sub.w	r8, r6, r7
 8003cde:	608b      	str	r3, [r1, #8]
 8003ce0:	f1b8 0f00 	cmp.w	r8, #0
 8003ce4:	dde9      	ble.n	8003cba <__sflush_r+0xae>
 8003ce6:	6a21      	ldr	r1, [r4, #32]
 8003ce8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003cea:	4643      	mov	r3, r8
 8003cec:	463a      	mov	r2, r7
 8003cee:	4628      	mov	r0, r5
 8003cf0:	47b0      	blx	r6
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	dc08      	bgt.n	8003d08 <__sflush_r+0xfc>
 8003cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cfe:	81a3      	strh	r3, [r4, #12]
 8003d00:	f04f 30ff 	mov.w	r0, #4294967295
 8003d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d08:	4407      	add	r7, r0
 8003d0a:	eba8 0800 	sub.w	r8, r8, r0
 8003d0e:	e7e7      	b.n	8003ce0 <__sflush_r+0xd4>
 8003d10:	dfbffffe 	.word	0xdfbffffe

08003d14 <_fflush_r>:
 8003d14:	b538      	push	{r3, r4, r5, lr}
 8003d16:	690b      	ldr	r3, [r1, #16]
 8003d18:	4605      	mov	r5, r0
 8003d1a:	460c      	mov	r4, r1
 8003d1c:	b913      	cbnz	r3, 8003d24 <_fflush_r+0x10>
 8003d1e:	2500      	movs	r5, #0
 8003d20:	4628      	mov	r0, r5
 8003d22:	bd38      	pop	{r3, r4, r5, pc}
 8003d24:	b118      	cbz	r0, 8003d2e <_fflush_r+0x1a>
 8003d26:	6a03      	ldr	r3, [r0, #32]
 8003d28:	b90b      	cbnz	r3, 8003d2e <_fflush_r+0x1a>
 8003d2a:	f7ff fc8f 	bl	800364c <__sinit>
 8003d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f3      	beq.n	8003d1e <_fflush_r+0xa>
 8003d36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003d38:	07d0      	lsls	r0, r2, #31
 8003d3a:	d404      	bmi.n	8003d46 <_fflush_r+0x32>
 8003d3c:	0599      	lsls	r1, r3, #22
 8003d3e:	d402      	bmi.n	8003d46 <_fflush_r+0x32>
 8003d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d42:	f7ff fe68 	bl	8003a16 <__retarget_lock_acquire_recursive>
 8003d46:	4628      	mov	r0, r5
 8003d48:	4621      	mov	r1, r4
 8003d4a:	f7ff ff5f 	bl	8003c0c <__sflush_r>
 8003d4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d50:	07da      	lsls	r2, r3, #31
 8003d52:	4605      	mov	r5, r0
 8003d54:	d4e4      	bmi.n	8003d20 <_fflush_r+0xc>
 8003d56:	89a3      	ldrh	r3, [r4, #12]
 8003d58:	059b      	lsls	r3, r3, #22
 8003d5a:	d4e1      	bmi.n	8003d20 <_fflush_r+0xc>
 8003d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d5e:	f7ff fe5b 	bl	8003a18 <__retarget_lock_release_recursive>
 8003d62:	e7dd      	b.n	8003d20 <_fflush_r+0xc>

08003d64 <__swhatbuf_r>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	460c      	mov	r4, r1
 8003d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d6c:	2900      	cmp	r1, #0
 8003d6e:	b096      	sub	sp, #88	@ 0x58
 8003d70:	4615      	mov	r5, r2
 8003d72:	461e      	mov	r6, r3
 8003d74:	da0d      	bge.n	8003d92 <__swhatbuf_r+0x2e>
 8003d76:	89a3      	ldrh	r3, [r4, #12]
 8003d78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d7c:	f04f 0100 	mov.w	r1, #0
 8003d80:	bf14      	ite	ne
 8003d82:	2340      	movne	r3, #64	@ 0x40
 8003d84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d88:	2000      	movs	r0, #0
 8003d8a:	6031      	str	r1, [r6, #0]
 8003d8c:	602b      	str	r3, [r5, #0]
 8003d8e:	b016      	add	sp, #88	@ 0x58
 8003d90:	bd70      	pop	{r4, r5, r6, pc}
 8003d92:	466a      	mov	r2, sp
 8003d94:	f000 f848 	bl	8003e28 <_fstat_r>
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	dbec      	blt.n	8003d76 <__swhatbuf_r+0x12>
 8003d9c:	9901      	ldr	r1, [sp, #4]
 8003d9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003da2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003da6:	4259      	negs	r1, r3
 8003da8:	4159      	adcs	r1, r3
 8003daa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dae:	e7eb      	b.n	8003d88 <__swhatbuf_r+0x24>

08003db0 <__smakebuf_r>:
 8003db0:	898b      	ldrh	r3, [r1, #12]
 8003db2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003db4:	079d      	lsls	r5, r3, #30
 8003db6:	4606      	mov	r6, r0
 8003db8:	460c      	mov	r4, r1
 8003dba:	d507      	bpl.n	8003dcc <__smakebuf_r+0x1c>
 8003dbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	6123      	str	r3, [r4, #16]
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	6163      	str	r3, [r4, #20]
 8003dc8:	b003      	add	sp, #12
 8003dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dcc:	ab01      	add	r3, sp, #4
 8003dce:	466a      	mov	r2, sp
 8003dd0:	f7ff ffc8 	bl	8003d64 <__swhatbuf_r>
 8003dd4:	9f00      	ldr	r7, [sp, #0]
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	4639      	mov	r1, r7
 8003dda:	4630      	mov	r0, r6
 8003ddc:	f7ff fe8a 	bl	8003af4 <_malloc_r>
 8003de0:	b948      	cbnz	r0, 8003df6 <__smakebuf_r+0x46>
 8003de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003de6:	059a      	lsls	r2, r3, #22
 8003de8:	d4ee      	bmi.n	8003dc8 <__smakebuf_r+0x18>
 8003dea:	f023 0303 	bic.w	r3, r3, #3
 8003dee:	f043 0302 	orr.w	r3, r3, #2
 8003df2:	81a3      	strh	r3, [r4, #12]
 8003df4:	e7e2      	b.n	8003dbc <__smakebuf_r+0xc>
 8003df6:	89a3      	ldrh	r3, [r4, #12]
 8003df8:	6020      	str	r0, [r4, #0]
 8003dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dfe:	81a3      	strh	r3, [r4, #12]
 8003e00:	9b01      	ldr	r3, [sp, #4]
 8003e02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003e06:	b15b      	cbz	r3, 8003e20 <__smakebuf_r+0x70>
 8003e08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	f000 f81d 	bl	8003e4c <_isatty_r>
 8003e12:	b128      	cbz	r0, 8003e20 <__smakebuf_r+0x70>
 8003e14:	89a3      	ldrh	r3, [r4, #12]
 8003e16:	f023 0303 	bic.w	r3, r3, #3
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	81a3      	strh	r3, [r4, #12]
 8003e20:	89a3      	ldrh	r3, [r4, #12]
 8003e22:	431d      	orrs	r5, r3
 8003e24:	81a5      	strh	r5, [r4, #12]
 8003e26:	e7cf      	b.n	8003dc8 <__smakebuf_r+0x18>

08003e28 <_fstat_r>:
 8003e28:	b538      	push	{r3, r4, r5, lr}
 8003e2a:	4d07      	ldr	r5, [pc, #28]	@ (8003e48 <_fstat_r+0x20>)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	4604      	mov	r4, r0
 8003e30:	4608      	mov	r0, r1
 8003e32:	4611      	mov	r1, r2
 8003e34:	602b      	str	r3, [r5, #0]
 8003e36:	f7fd f8c9 	bl	8000fcc <_fstat>
 8003e3a:	1c43      	adds	r3, r0, #1
 8003e3c:	d102      	bne.n	8003e44 <_fstat_r+0x1c>
 8003e3e:	682b      	ldr	r3, [r5, #0]
 8003e40:	b103      	cbz	r3, 8003e44 <_fstat_r+0x1c>
 8003e42:	6023      	str	r3, [r4, #0]
 8003e44:	bd38      	pop	{r3, r4, r5, pc}
 8003e46:	bf00      	nop
 8003e48:	2000066c 	.word	0x2000066c

08003e4c <_isatty_r>:
 8003e4c:	b538      	push	{r3, r4, r5, lr}
 8003e4e:	4d06      	ldr	r5, [pc, #24]	@ (8003e68 <_isatty_r+0x1c>)
 8003e50:	2300      	movs	r3, #0
 8003e52:	4604      	mov	r4, r0
 8003e54:	4608      	mov	r0, r1
 8003e56:	602b      	str	r3, [r5, #0]
 8003e58:	f7fd f8c8 	bl	8000fec <_isatty>
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	d102      	bne.n	8003e66 <_isatty_r+0x1a>
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	b103      	cbz	r3, 8003e66 <_isatty_r+0x1a>
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	bd38      	pop	{r3, r4, r5, pc}
 8003e68:	2000066c 	.word	0x2000066c

08003e6c <_sbrk_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4d06      	ldr	r5, [pc, #24]	@ (8003e88 <_sbrk_r+0x1c>)
 8003e70:	2300      	movs	r3, #0
 8003e72:	4604      	mov	r4, r0
 8003e74:	4608      	mov	r0, r1
 8003e76:	602b      	str	r3, [r5, #0]
 8003e78:	f7fd f8d0 	bl	800101c <_sbrk>
 8003e7c:	1c43      	adds	r3, r0, #1
 8003e7e:	d102      	bne.n	8003e86 <_sbrk_r+0x1a>
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	b103      	cbz	r3, 8003e86 <_sbrk_r+0x1a>
 8003e84:	6023      	str	r3, [r4, #0]
 8003e86:	bd38      	pop	{r3, r4, r5, pc}
 8003e88:	2000066c 	.word	0x2000066c

08003e8c <_init>:
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	bf00      	nop
 8003e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e92:	bc08      	pop	{r3}
 8003e94:	469e      	mov	lr, r3
 8003e96:	4770      	bx	lr

08003e98 <_fini>:
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9a:	bf00      	nop
 8003e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9e:	bc08      	pop	{r3}
 8003ea0:	469e      	mov	lr, r3
 8003ea2:	4770      	bx	lr
